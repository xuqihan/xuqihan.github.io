<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>21.Servlet从数据库读取记录性能优化</title>
      <link href="/2022/04/27/serlvet/21.Servlet%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%BB%E5%8F%96%E8%AE%B0%E5%BD%95%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2022/04/27/serlvet/21.Servlet%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AF%BB%E5%8F%96%E8%AE%B0%E5%BD%95%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p><strong>提高Servlet从数据库中读取记录</strong></p><p>在这个例子中，我们将学习如何从Web应用程序从数据库中读取数据记录。要实现这个工作，我们将<em>employess</em>表的数据预先从数据库中读取出来并存储在一个集合中，以在servlet中重用这个集合。因此，当使用到这个<em>employess</em>表的数据时，只需要从<code>ServletContext</code>获取即可，而不需要连接数据库中查询表的数据记录。这样就能提高数据的读取性能。</p><p>要运行此应用程序，需要创建具有一些记录的表。完整的SQL语句如下 - </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `employees`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `employees` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">3</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  `address` <span class="type">varchar</span>(<span class="number">254</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `salary` <span class="type">float</span>(<span class="number">8</span>,<span class="number">2</span>) unsigned <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>MyISAM AUTO_INCREMENT<span class="operator">=</span><span class="number">4</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of employees</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;李小春&#x27;</span>, <span class="string">&#x27;23&#x27;</span>, <span class="string">&#x27;海口市人民大道1800号&#x27;</span>, <span class="string">&#x27;8900.00&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees` <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;张辉&#x27;</span>, <span class="string">&#x27;28&#x27;</span>, <span class="string">&#x27;广州天河区珠村市场&#x27;</span>, <span class="string">&#x27;15800.00&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees` <span class="keyword">VALUES</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;林贤弟&#x27;</span>, <span class="string">&#x27;25&#x27;</span>, <span class="string">&#x27;广州白云区龙塘村120号&#x27;</span>, <span class="string">&#x27;18990.00&#x27;</span>);</span><br><span class="line"><span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><h2 id="提高servlet从数据库中获取记录的性能的示例"><a href="#提高servlet从数据库中获取记录的性能的示例" class="headerlink" title="提高servlet从数据库中获取记录的性能的示例"></a>提高servlet从数据库中获取记录的性能的示例</h2><p>在这个例子中，我们创建了<code>6</code>个代码文件。它们分别如下 - </p><ol><li><em>index.html</em>  - 项目首页</li><li><em>Employees.java</em> - 这是一个简单的<code>bean</code>类，包含几个属性及其<code>getter</code>和<code>setter</code>方法，此类用于表示数据库表：<code>employees</code>。</li><li><em>MyListener.java</em> - 监听器</li><li><em>MyServlet1.java</em> </li><li><em>MyServlet2.java</em></li><li><em>web.xml</em> - 项目部署类</li></ol><p>打开Eclipse，创建一个动态Web项目：<em>ImprovingFetchRecords</em>，其完整的目录结构如下所示 -</p><p><img src="http://www.yiibai.com/uploads/images/201710/1210/247111038_80799.png" alt="img"></p><p>以下是这个项目中的几个主要的代码文件。</p><p>文件：<em>index.html</em> - </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Servlet从数据库读取记录性能优化<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">&quot;text-algin: center;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;servlet1&quot;</span>&gt;</span>从数据库读取数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span>|</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;servlet2&quot;</span>&gt;</span>读取存储的数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">HTML</span><br></pre></td></tr></table></figure><p>员工信息Bean类：<em>Employees.java</em> - </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yiibai;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employees</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">float</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>文件：<em>MyListener.java</em> - </p><p>这是是一个监听类。当部署项目时，默认情况下会调用<code>ServletContextListener</code>的<code>contextInitialized</code>方法。 在这里，将查询获取<code>employees</code>表的记录，并将数据记录在添加存储到<code>ArrayList</code>类对象中。 最后，表的所有记录将存储在<code>ArrayList</code>类对象(集合)。 最后，将<code>ServletConext</code>对象中的<code>ArrayList</code>对象作为属性存储，以便可以在Servlet中获取并使用它。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yiibai.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yiibai.Employees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent e)</span> </span>&#123;</span><br><span class="line">        String jdbcDriver = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">        String dbURL = <span class="string">&quot;jdbc:mysql://localhost/testdb&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Database credentials</span></span><br><span class="line">        String dbUser = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> String passwd = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(jdbcDriver);</span><br><span class="line">            con = DriverManager.getConnection(dbURL, dbUser, passwd);</span><br><span class="line">            PreparedStatement ps = con.prepareStatement(<span class="string">&quot;SELECT * FROM `employees`&quot;</span>);</span><br><span class="line">            ResultSet rs = ps.executeQuery();</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                Employees emp = <span class="keyword">new</span> Employees();</span><br><span class="line">                emp.setId(rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                emp.setName(rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">                emp.setAddress(rs.getString(<span class="string">&quot;address&quot;</span>));</span><br><span class="line">                emp.setAge(rs.getInt(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">                emp.setSalary(rs.getFloat(<span class="string">&quot;salary&quot;</span>));</span><br><span class="line">                list.add(emp);</span><br><span class="line">            &#125;</span><br><span class="line">            rs.close();</span><br><span class="line">            ps.close();</span><br><span class="line">            <span class="comment">//con.close();</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            System.out.print(ex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// storing the ArrayList object in ServletContext</span></span><br><span class="line">        ServletContext context = e.getServletContext();</span><br><span class="line">        context.setAttribute(<span class="string">&quot;con&quot;</span>, con);</span><br><span class="line">        context.setAttribute(<span class="string">&quot;datalist&quot;</span>, list);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent arg0)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;project undeployed...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>文件：<em>MyServlet1.java</em> - </p><p><code>MyServlet1</code>从servlet上下文对象获取信息并打印它。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yiibai;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> before = System.currentTimeMillis();</span><br><span class="line">        ServletContext context = getServletContext();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Connection con = (Connection) context.getAttribute(<span class="string">&quot;con&quot;</span>);</span><br><span class="line">            PreparedStatement ps;</span><br><span class="line">            ps = con.prepareStatement(<span class="string">&quot;SELECT * FROM `employees`&quot;</span>);</span><br><span class="line">            ResultSet rs = ps.executeQuery();</span><br><span class="line">            out.print(<span class="string">&quot;员工数据信息如下所示：&lt;hr/&gt;&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                out.print(<span class="string">&quot;&quot;</span> + rs.getInt(<span class="string">&quot;id&quot;</span>) + <span class="string">&quot;, &quot;</span> + rs.getString(<span class="string">&quot;name&quot;</span>) + <span class="string">&quot;, &quot;</span> + rs.getString(<span class="string">&quot;address&quot;</span>));</span><br><span class="line">                out.println(<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//con.close();</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> after = System.currentTimeMillis();</span><br><span class="line">        out.print(<span class="string">&quot;&lt;br&gt;总用时 :&quot;</span> + (after - before));</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>文件：<em>MyServlet2.java</em> - </p><p>它与<code>MyServlet1</code>相同，从servlet上下文对象获取信息并打印它。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yiibai;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> before = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        ServletContext context = getServletContext();</span><br><span class="line">        List list = (List) context.getAttribute(<span class="string">&quot;datalist&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;员工数据信息(从ServletContext中预存储读取)如下所示：&lt;hr/&gt;&quot;</span>);</span><br><span class="line">        Iterator itr = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (itr.hasNext()) &#123;</span><br><span class="line">            Employees e = (Employees) itr.next();</span><br><span class="line">            out.print(<span class="string">&quot;&quot;</span> + e.getId() + <span class="string">&quot;, &quot;</span> + e.getName() + <span class="string">&quot;, &quot;</span> + e.getAddress());</span><br><span class="line">            out.println(<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> after = System.currentTimeMillis();</span><br><span class="line">        out.print(<span class="string">&quot;&lt;br&gt;总用时:&quot;</span> + (after - before));</span><br><span class="line"></span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>文件：<code>web.xml</code> - </p><p>这个文件中配置包含有关servlet和监听器的信息。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>ImprovingFetchRecords<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.yiibai.listener.MyListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.yiibai.MyServlet1<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.yiibai.MyServlet2<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line">XML</span><br></pre></td></tr></table></figure><p>在编写上面代码后，部署此Web应用程序(在项目名称上点击右键-&gt;”Run On Server…”)，打开浏览器访问URL： <a href="http://localhost:8080/ImprovingFetchRecords/">http://localhost:8080/ImprovingFetchRecords/</a> ，如果没有错误，应该会看到以下结果 -</p><blockquote><p>注意：将需要将MySQL驱动程序库加到<em>WEB-INFO/lib</em>目录下。</p></blockquote><p><img src="http://www.yiibai.com/uploads/images/201710/1210/895111028_52928.png" alt="img"></p><p>点击“从数据库读取数据”链接，应该会看到以下结果 -<br><img src="http://www.yiibai.com/uploads/images/201710/1210/864111034_51363.png" alt="img"></p><p>点击“读取存储的数据”链接，应该会看到以下结果 -</p><p><img src="http://www.yiibai.com/uploads/images/201710/1210/314111034_25350.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> SERVLET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SERVLET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20.Servlet ServletContextEvent事件</title>
      <link href="/2022/04/27/serlvet/20.Servlet%20ServletContextEvent%E4%BA%8B%E4%BB%B6/"/>
      <url>/2022/04/27/serlvet/20.Servlet%20ServletContextEvent%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>当Web应用程序部署在服务器上时，会通知<code>ServletContextEvent</code>事件。</p><p>如果要在部署Web应用程序时执行某些操作，例如创建数据库连接，创建项目的所有表等，则需要实现<code>ServletContextListener</code>接口并提供其方法的实现。</p><p><strong>ServletContextEvent类的构造方法</strong></p><p>在<code>ServletContextEvent</code>类中只定义了一个构造函数。Web容器在<code>ServletContext</code>实例之后创建<code>ServletContextEvent</code>的实例。</p><ul><li><code>ServletContextEvent(ServletContext e)</code></li></ul><p><strong>ServletContextEvent类的方法</strong></p><p><code>ServletContextEvent</code>类中只定义了一个方法：</p><ul><li><code>public ServletContext getServletContext()</code> - 返回<code>ServletContext</code>的实例。</li></ul><p><strong>ServletContextListener接口的方法</strong></p><p>在<code>ServletContextListener</code>接口中声明了两种方法，这些方法必须由<code>servlet</code>程序员实现，以执行一些操作，如创建数据库连接等。</p><ul><li><code>public void contextInitialized(ServletContextEvent e)</code>: 当应用程序部署在服务器上时被调用。</li><li><code>public void contextDestroyed(ServletContextEvent e)</code>: 当应用程序从服务器取消部署时被调用。</li></ul><h2 id="ServletContextEvent和ServletContextListener的示例"><a href="#ServletContextEvent和ServletContextListener的示例" class="headerlink" title="ServletContextEvent和ServletContextListener的示例"></a>ServletContextEvent和ServletContextListener的示例</h2><p>在这个例子中，从<code>employees</code>表中检索数据。为了实现这个服务，我们在监听器类中创建了连接数据库对象，并在servlet中使用了连接对象。</p><p>首先，在MySQL中创建一个名称为：<em>testdb</em> 的数据库，创建以下表及以数据记录 - </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `employees`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `employees` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">3</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  `address` <span class="type">varchar</span>(<span class="number">254</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `salary` <span class="type">float</span>(<span class="number">8</span>,<span class="number">2</span>) unsigned <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>MyISAM AUTO_INCREMENT<span class="operator">=</span><span class="number">4</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of employees</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;李小春&#x27;</span>, <span class="string">&#x27;23&#x27;</span>, <span class="string">&#x27;海口市人民大道1800号&#x27;</span>, <span class="string">&#x27;8900.00&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees` <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;张辉&#x27;</span>, <span class="string">&#x27;28&#x27;</span>, <span class="string">&#x27;广州天河区珠村市场&#x27;</span>, <span class="string">&#x27;15800.00&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employees` <span class="keyword">VALUES</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;林贤弟&#x27;</span>, <span class="string">&#x27;25&#x27;</span>, <span class="string">&#x27;广州白云区龙塘村120号&#x27;</span>, <span class="string">&#x27;18990.00&#x27;</span>);</span><br><span class="line"><span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><p>打开Eclipse，创建一个动态Web项目：<em>ServletContextEvent</em>，其完整的目录结构如下 - </p><p><img src="http://www.yiibai.com/uploads/images/201710/1210/698091045_43795.png" alt="img"></p><p>以下是项目中的几个主要的文件代码。</p><p>文件：<em>index.html</em> - </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>ServletContextListener实例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">&quot;text-algin: center;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;getdata&quot;</span>&gt;</span>点击读取employees表中的数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">HTML</span><br></pre></td></tr></table></figure><p>文件：<em>MyListener.java</em> - </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">package com.yiibai;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletContext;</span><br><span class="line">import javax.servlet.ServletContextEvent;</span><br><span class="line">import javax.servlet.ServletContextListener;</span><br><span class="line">import javax.servlet.annotation.WebListener;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Application Lifecycle Listener implementation class MyListener</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">@WebListener</span><br><span class="line">public class MyListener implements ServletContextListener &#123;</span><br><span class="line"></span><br><span class="line">    public void contextInitialized(ServletContextEvent event) &#123;</span><br><span class="line"></span><br><span class="line">        String jdbcDriver = &quot;com.mysql.jdbc.Driver&quot;;</span><br><span class="line">        String dbURL = &quot;jdbc:mysql://localhost/testdb&quot;;</span><br><span class="line"></span><br><span class="line">        // Database credentials</span><br><span class="line">        String dbUser = &quot;root&quot;;</span><br><span class="line">        final String passwd = &quot;123456&quot;;</span><br><span class="line">        try &#123;</span><br><span class="line">            Class.forName(jdbcDriver);</span><br><span class="line">            Connection con = DriverManager.getConnection(dbURL, dbUser, passwd);</span><br><span class="line">            // storing connection object as an attribute in ServletContext</span><br><span class="line">            ServletContext ctx = event.getServletContext();</span><br><span class="line">            ctx.setAttribute(&quot;mycon&quot;, con);</span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void contextDestroyed(ServletContextEvent arg0) &#123;</span><br><span class="line">        System.out.println(&quot;Servlet has contextDestroyed...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件：<em>FetchData.java</em> - </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yiibai;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class FetchData</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FetchData</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse</span></span><br><span class="line"><span class="comment">     *      response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Retrieving connection object from ServletContext object</span></span><br><span class="line">            ServletContext ctx = getServletContext();</span><br><span class="line">            Connection con = (Connection) ctx.getAttribute(<span class="string">&quot;mycon&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(con==<span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;获取数据库连接异常~！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// retieving data from emp32 table</span></span><br><span class="line">            String sql = <span class="string">&quot;SELECT * FROM employees&quot;</span>;</span><br><span class="line">            PreparedStatement ps = con.prepareStatement(sql, ResultSet.TYPE_SCROLL_SENSITIVE,</span><br><span class="line">                    ResultSet.CONCUR_UPDATABLE);</span><br><span class="line"></span><br><span class="line">            ResultSet rs = ps.executeQuery();</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                out.print(<span class="string">&quot;&lt;br&gt;&quot;</span> + rs.getString(<span class="number">1</span>) + <span class="string">&quot; &quot;</span> + rs.getString(<span class="number">2</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            con.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>文件：<em>web.xml</em> - </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>ServletContextEvent<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.yiibai.MyListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>FetchDataServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.yiibai.FetchData<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>FetchDataServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/getdata<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line">XML</span><br></pre></td></tr></table></figure><p>在编写上面代码后，部署此Web应用程序(在项目名称上点击右键-&gt;”Run On Server…”)，打开浏览器访问URL： <a href="http://localhost:8080/ServletContextEvent/">http://localhost:8080/ServletContextEvent/</a> ，如果没有错误，应该会看到以下结果 -</p><p><img src="http://www.yiibai.com/uploads/images/201710/1210/867091048_68116.png" alt="img"></p><p>点击上面链接后，从数据库表中读取到的数据如下所示 - </p><p><img src="http://www.yiibai.com/uploads/images/201710/1210/283091049_20884.png" alt="img"></p><h2 id="ServletContextListener创建项目表的示例"><a href="#ServletContextListener创建项目表的示例" class="headerlink" title="ServletContextListener创建项目表的示例"></a>ServletContextListener创建项目表的示例</h2><p>在这个例子中，我们创建一个项目所使用的表。因此不需要在数据库中手动创建所有表。</p><p>修改上面<em>MyListener.java</em>中的示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yiibai;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Application Lifecycle Listener implementation class MyListener</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String jdbcDriver = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">        String dbURL = <span class="string">&quot;jdbc:mysql://localhost/testdb&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Database credentials</span></span><br><span class="line">        String dbUser = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> String passwd = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(jdbcDriver);</span><br><span class="line">            Connection con = DriverManager.getConnection(dbURL, dbUser, passwd);</span><br><span class="line">            String query=<span class="string">&quot;CREATE TABLE `employees` (&quot;</span> + </span><br><span class="line">                    <span class="string">&quot;  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,&quot;</span> + </span><br><span class="line">                    <span class="string">&quot;  `name` varchar(64) NOT NULL DEFAULT &#x27;&#x27;,&quot;</span> + </span><br><span class="line">                    <span class="string">&quot;  `age` int(3) unsigned NOT NULL DEFAULT &#x27;0&#x27;,&quot;</span> + </span><br><span class="line">                    <span class="string">&quot;  `address` varchar(254) DEFAULT NULL,&quot;</span> + </span><br><span class="line">                    <span class="string">&quot;  `salary` float(8,2) unsigned DEFAULT NULL,&quot;</span> + </span><br><span class="line">                    <span class="string">&quot;  PRIMARY KEY (`id`)&quot;</span> + </span><br><span class="line">                    <span class="string">&quot;) ENGINE=MyISAM AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;&quot;</span>;  </span><br><span class="line">            PreparedStatement ps=con.prepareStatement(query);  </span><br><span class="line">            ps.executeUpdate();  </span><br><span class="line"></span><br><span class="line">            System.out.println(query);  </span><br><span class="line"></span><br><span class="line">            <span class="comment">// storing connection object as an attribute in ServletContext</span></span><br><span class="line">            ServletContext ctx = event.getServletContext();</span><br><span class="line">            ctx.setAttribute(<span class="string">&quot;mycon&quot;</span>, con);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent arg0)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Servlet has contextDestroyed...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p><strong>ServletContextListener的其他示例</strong></p><ul><li>[高性能ServletContextListener的示例</li></ul>]]></content>
      
      
      <categories>
          
          <category> SERVLET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SERVLET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>19.Servlet事件和监听器</title>
      <link href="/2022/04/27/serlvet/19.Servlet%E4%BA%8B%E4%BB%B6%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8/"/>
      <url>/2022/04/27/serlvet/19.Servlet%E4%BA%8B%E4%BB%B6%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>更改对象的状态称为事件，事件基本上都是发生什么的东西。</p><p>在发生这些异常时，我们也可以执行一些重要任务，例如计数总数和当前登录的用户数，在部署项目时创建数据库的表，创建数据库连接对象等。</p><p><code>javax.servlet</code>和<code>javax.servlet.http</code>包中有许多<code>Event</code>类和<code>Listener</code>接口。</p><p><strong>事件类</strong></p><p>Servlet中的事件类如下：</p><ol><li><code>ServletRequestEvent</code></li><li><code>ServletContextEvent</code></li><li><code>ServletRequestAttributeEvent</code></li><li><code>ServletContextAttributeEvent</code></li><li><code>HttpSessionEvent</code></li><li><code>HttpSessionBindingEvent</code></li></ol><p><strong>事件接口</strong></p><p>Servlet中的事件接口如下：</p><ul><li><code>ServletRequestListener</code></li><li><code>ServletRequestAttributeListener</code></li><li><code>ServletContextListener</code></li><li><code>ServletContextAttributeListener</code></li><li><code>HttpSessionListener</code></li><li><code>HttpSessionAttributeListener</code></li><li><code>HttpSessionBindingListener</code></li><li><code>HttpSessionActivationListener</code></li></ul><p><strong>有关Servlet事件和监听器的介绍和应用示例文章</strong></p><ul><li><a href="http://www.yiibai.com/servlet/servletcontextevent.html">ServletContextEvent</a> - 点击查看<code>ServletContextEvent</code>和<code>ServletContextListener</code>的简单例子。</li><li><a href="http://www.yiibai.com/servlet/httpessionevent.html">HttpSessionEvent</a> - 点击查看<code>HttpSessionEvent</code>和<code>HttpSessionListener</code>的简单例子。</li><li><a href="http://www.yiibai.com/servlet/servletrequestevent.html">ServletRequestEvent</a> - 点击查看<code>ServletRequestEvent</code> 和 <code>ServletRequestListener</code>的简单例子。</li><li><a href="http://www.yiibai.com/servlet/servletcontextattributeevent.html">ServletContext AttributeEvent</a> - 点击查看<code>ServletContextAttributeEvent</code> 和 <code>ServletContextAttributeListener</code>的简单例子。</li><li><a href="http://www.yiibai.com/servlet/httpessionbindingevent.html">HttpSessionBindingEvent</a> - 点击查看<code>HttpSessionBindingEvent</code> 和 <code>HttpSessionAttributeListener</code>的简单例子。</li><li><a href="http://www.yiibai.com/servlet/servletrequestattributeevent.html">ServletRequestAttributeEvent</a> - 点击查看<code>ServletRequestAttributeEvent</code> 和 <code>ServletRequestAttributeEvent</code>的简单例子。</li></ul>]]></content>
      
      
      <categories>
          
          <category> SERVLET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SERVLET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>18.Servlet过虑器</title>
      <link href="/2022/04/27/serlvet/18.Servlet%E8%BF%87%E8%99%91%E5%99%A8/"/>
      <url>/2022/04/27/serlvet/18.Servlet%E8%BF%87%E8%99%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>过滤器是在请求的预处理和后处理时调用的对象。</p><p>主要用于执行转换，日志记录，压缩，加解密，输入验证等过滤任务。</p><p>servlet过滤器是可插拔的，即它在<code>web.xml</code>文件中定义，如果从<code>web.xml</code>文件中删除过滤项，则过滤器将被自动删除，因此不需要手动更改<code>Servlet</code>。所以过滤器维护成本会比较低。</p><p>参考模型图 - </p><p><img src="http://www.yiibai.com/uploads/images/201710/1310/436141042_50107.jpg" alt="img"></p><blockquote><p>注意：与Servlet不同，一个过滤器不依赖于另一个过滤器。</p></blockquote><p><strong>过滤器的使用</strong></p><ul><li>记录所有传入的请求</li><li>记录来自标计算机的IP地址的请求</li><li>转变/转换</li><li>数据压缩</li><li>加密和解密</li><li>输入验证等</li></ul><p><strong>过滤器的优点</strong></p><ul><li>过滤器是可插拔的。</li><li>一个过滤器不依赖于另一个资源。</li><li>维护少，比较容易维护。</li></ul><h2 id="过滤器API"><a href="#过滤器API" class="headerlink" title="过滤器API"></a>过滤器API</h2><p>像Servlet一样，过滤器也有自己的API。 <code>javax.servlet</code>包中包含Filter API的三个接口，它们分别如下所示 - </p><ul><li><code>Filter</code></li><li><code>FilterChain</code></li><li><code>FilterConfig</code></li></ul><p><strong>Filter接口</strong></p><p>要创建一个过滤器，必须要实现<code>Filter</code>接口。<code>Filter</code>接口为过滤器提供了生命周期方法。</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>public void init(FilterConfig config)</code></td><td><code>init()</code>方法只被调用一次，用于初始化过滤器。</td></tr><tr><td><code>public void doFilter(HttpServletRequest request,HttpServletResponse response, FilterChain chain)</code></td><td>当用户请求过滤器所映射到资源时，会调用<code>doFilter()</code>方法，它用于执行过滤任务。</td></tr><tr><td><code>public void destroy()</code></td><td>当过滤器从服务中取出时，调用此方法(仅一次)。</td></tr></tbody></table><p><strong>FilterChain接口</strong></p><p><code>FilterChain</code>对象负责调用链中的下一个过滤器或资源。对象在<code>Filter</code>接口的<code>doFilter</code>方法中传递。<code>FilterChain</code>接口只包含一个方法：</p><ul><li><code>public void doFilter(HttpServletRequest request，HttpServletResponse response)</code>：它将控件传递给下一个过滤器或资源。</li></ul><p><strong>如何定义过滤器</strong></p><p>我们可以使用与<code>servlet</code>相同方式来定义过滤器。下面来看看过滤器和过滤器映射的元素。在<em>web.xml</em>文件配置如下 - </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>...<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>...<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>...<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>...<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line">XML</span><br></pre></td></tr></table></figure><p>对于映射过滤器，可以使用<code>url-pattern</code>或<code>servlet-name</code>。 <code>url-pattern</code>元素比<code>servlet-name</code>元素具有优势，即它可以应用于<code>servlet</code>，<code>JSP</code>或<code>HTML</code>资源。</p><h2 id="过滤器的简单示例"><a href="#过滤器的简单示例" class="headerlink" title="过滤器的简单示例"></a>过滤器的简单示例</h2><p>在这个例子中，只是显示在请求的后处理后自动调用过滤器的信息。</p><p>打开Eclipse，创建一个动态Web项目：<em>SimpleFilter</em>，其完整的目录结构如下所示 -</p><p><img src="http://www.yiibai.com/uploads/images/201710/1310/240151013_60263.png" alt="img"></p><p>以下是这个项目中的几个主要的代码文件。</p><p>文件：<em>index.html</em> -</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>过滤器的简单示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;font-align: center;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;servlet1&quot;</span>&gt;</span>查看过滤器调用信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">HTML</span><br></pre></td></tr></table></figure><p>文件：<em>MyFilter.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yiibai;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig arg0)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.print(<span class="string">&quot;过滤器调用之前&lt;br/&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        chain.doFilter(request, response);<span class="comment">// sends request to next resource</span></span><br><span class="line"></span><br><span class="line">        out.print(<span class="string">&quot;过滤器调用之后&lt;br/&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>文件：<em>MyServlet.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yiibai;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.print(<span class="string">&quot;  -- 这是一个简单的测试Servlet.&lt;br&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>文件：<em>web.xml</em> - </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>SimpleFilter<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>s1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.yiibai.MyServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>s1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>f1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.yiibai.MyFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>f1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line">XML</span><br></pre></td></tr></table></figure><p>在编写上面代码后，部署此Web应用程序(在项目名称上点击右键-&gt;”Run On Server…”)，打开浏览器访问URL： <a href="http://localhost:8080/SimpleFilter/">http://localhost:8080/SimpleFilter/</a> ，如果没有错误，应该会看到以下结果 -</p><p><img src="http://www.yiibai.com/uploads/images/201710/1310/472151014_75408.png" alt="img"></p><p>点击链接，得到 以下结果 - </p><p><img src="http://www.yiibai.com/uploads/images/201710/1310/182151022_37239.png" alt="img"></p><p>在上图中，可以看到过滤器调用的顺序。</p>]]></content>
      
      
      <categories>
          
          <category> SERVLET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SERVLET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>17.Servlet属性设置</title>
      <link href="/2022/04/27/serlvet/17.Servlet%E5%B1%9E%E6%80%A7%E8%AE%BE%E7%BD%AE/"/>
      <url>/2022/04/27/serlvet/17.Servlet%E5%B1%9E%E6%80%A7%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>Servlet中的属性是可以从以下范围之一设置，获取或删除的对象：</p><ul><li>请求范围</li><li>会话范围</li><li>应用范围</li></ul><p>Servlet程序员可以使用属性将信息从一个servlet传递给另一个servlet。它就像将对象从一个类传递给另一个类一样，以便我们可以一次又一次地重用同一个对象。</p><p><strong>ServletRequest，HttpSession和ServletContext接口的属性特定方法</strong></p><p>Servlet中有以下<code>4</code>种属性方法，它们具体如下：</p><table><thead><tr><th>序号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><code>public void setAttribute(String name,Object object)</code></td><td>在应用程序范围内设置给定的对象。</td></tr><tr><td>2</td><td><code>public Object getAttribute(String name)</code></td><td>返回指定名称的属性。</td></tr><tr><td>3</td><td><code>public Enumeration getInitParameterNames()</code></td><td>返回上下文的初始化参数的名称，转为<code>String</code>对象的枚举。</td></tr><tr><td>4</td><td><code>public void removeAttribute(String name)</code></td><td>从servlet上下文中删除具有给定名称的属性。</td></tr></tbody></table><h2 id="ServletContext的示例设置和获取属性"><a href="#ServletContext的示例设置和获取属性" class="headerlink" title="ServletContext的示例设置和获取属性"></a>ServletContext的示例设置和获取属性</h2><p>在这个例子中，在应用程序范围内设置属性，并从另一个servlet获取该值。</p><p>打开Eclipse创建一个动态Web项目：<em>ServletAttribute</em> ，其完整的项目结构如下所示 - </p><p><img src="http://www.yiibai.com/uploads/images/201710/1110/424181040_47800.png" alt="img"></p><p>以下是几个主要代码文件 - </p><p>文件： <em>ServletAttr.java</em> - </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yiibai;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class ServletAttr</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletAttr</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse</span></span><br><span class="line"><span class="comment">     *      response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">            PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line">            ServletContext context = getServletContext();</span><br><span class="line">            context.setAttribute(<span class="string">&quot;company&quot;</span>, <span class="string">&quot;Lenovo&quot;</span>);</span><br><span class="line">            out.println(<span class="string">&quot;Welcome to first servlet&quot;</span>);</span><br><span class="line">            out.println(<span class="string">&quot;在第二个Servlet&lt;a href=&#x27;servlet2&#x27;&gt;查看属性值&lt;/a&gt;&quot;</span>);</span><br><span class="line">            out.close();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>文件： <em>ServletAttr2.java</em> - </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yiibai;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class ServletAttr</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletAttr2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse</span></span><br><span class="line"><span class="comment">     *      response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line">        ServletContext context = getServletContext();</span><br><span class="line">        String n = (String) context.getAttribute(<span class="string">&quot;company&quot;</span>);</span><br><span class="line"></span><br><span class="line">        out.println(<span class="string">&quot;Welcome to &quot;</span> + n);</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>文件： <em>web.xml</em> - </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;3.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>ServletAttribute<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletAttr1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.yiibai.ServletAttr<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletAttr1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletAttr2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.yiibai.ServletAttr2<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletAttr2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line">XML</span><br></pre></td></tr></table></figure><p>在编写完成上面的代码后，部署此Web应用程序，打开浏览器访问URL：<a href="http://localhost:8080/ServletAttribute/servlet">http://localhost:8080/ServletAttribute/servlet</a>  ，如果程序没有错误，应该会看到以下结果 - </p><p><img src="http://www.yiibai.com/uploads/images/201710/1110/677181038_49810.png" alt="img"></p><p>点击<em>查看属性值</em>链接，应该会看到以下结果 - </p><p><img src="http://www.yiibai.com/uploads/images/201710/1110/674181039_81249.png" alt="img"></p><h2 id="ServletConfig和ServletContext的区别"><a href="#ServletConfig和ServletContext的区别" class="headerlink" title="ServletConfig和ServletContext的区别"></a>ServletConfig和ServletContext的区别</h2><p><code>servletconfig</code>对象引用单个servlet，而<code>servletcontext</code>对象引用整个Web应用程序。</p>]]></content>
      
      
      <categories>
          
          <category> SERVLET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SERVLET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>16.Servlet ServletContext配置信息</title>
      <link href="/2022/04/27/serlvet/16.Servlet%20ServletContext%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/"/>
      <url>/2022/04/27/serlvet/16.Servlet%20ServletContext%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p><code>ServletContext</code>的对象由Web容器在部署项目时创建。 该对象可用于从<code>web.xml</code>文件获取配置信息。 每个Web应用程序只有一个<code>ServletContext</code>对象。</p><p>如果有信息要共享给多个servlet使用，最好在<code>web.xml</code>文件中使用<code>&lt;context-param&gt;</code>元素提供它。</p><h2 id="ServletContext的优点"><a href="#ServletContext的优点" class="headerlink" title="ServletContext的优点"></a>ServletContext的优点</h2><p>如果有任何信息要共享给所有的servlet使用，并且要让它容易维护，最好的办法就是在<code>web.xml</code>文件中提供这些信息，所以如果信息要更改直接在<code>web.xml</code>中修改，而不需要修改<code>servlet</code>代码。</p><p><strong>ServletContext接口的使用</strong></p><p>有很多ServletContext对象可以使用。 其中一些如下：</p><ul><li>ServletContext对象提供容器和servlet之间的接口。</li><li>使用ServletContext对象在<code>web.xml</code>文件获取配置信息。</li><li>ServletContext对象可用于设置，获取或删除<code>web.xml</code>文件中属性。</li><li>ServletContext对象可用于提供应用程序间通信。</li></ul><p>参考以下示意图 - </p><p><img src="http://www.yiibai.com/uploads/images/201710/1110/684161042_62257.jpg" alt="img"></p><p><strong>常用的ServletContext接口方法</strong></p><p>给出了一些常用的<code>ServletContext</code>接口方法。</p><table><thead><tr><th>序号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><code>public String getInitParameter(String name)</code></td><td>返回指定参数名称的参数值。</td></tr><tr><td>2</td><td><code>public Enumeration getInitParameterNames()</code></td><td>返回上下文的初始化参数的名称。</td></tr><tr><td>3</td><td><code>public void setAttribute(String name,Object object)</code></td><td>在应用程序范围内设置给定的对象。</td></tr><tr><td>4</td><td><code>public Object getAttribute(String name)</code></td><td>返回指定名称的属性。</td></tr><tr><td>5</td><td><code>public Enumeration getInitParameterNames()</code></td><td>返回上下文的初始化参数的名称，作为<code>String</code>对象的枚举。</td></tr><tr><td>6</td><td><code>public void removeAttribute(String name)</code></td><td>从servlet上下文中删除给定名称的属性。</td></tr></tbody></table><p><strong>如何获取ServletContext接口的对象?</strong></p><ul><li>通过<code>ServletConfig</code>接口的<code>getServletContext()</code>方法返回<code>ServletContext</code>对象。</li><li>通过<code>GenericServlet</code>类的<code>getServletContext()</code>方法返回<code>ServletContext</code>对象。</li></ul><p><strong>getServletContext()方法的语法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ServletContext <span class="title">getServletContext</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Java</span></span><br></pre></td></tr></table></figure><p><strong>getServletContext()方法的示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//We can get the ServletContext object from ServletConfig object  </span></span><br><span class="line">ServletContext application=getServletConfig().getServletContext();  </span><br><span class="line"></span><br><span class="line"><span class="comment">//Another convenient way to get the ServletContext object  </span></span><br><span class="line">ServletContext application=getServletContext();</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p><strong>在Context范围内提供初始化参数的语法</strong></p><p>Web应用程序的<code>context-param</code>元素的子元素用于定义应用程序范围中的初始化参数。 参数名称和参数值是<code>context-param</code>的子元素。<code>param-name</code>元素定义参数名称，<code>param-value</code>定义其值。参考以下配置代码片段 - </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span>  </span><br><span class="line"> ......  </span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>parameter_name<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>parameter_value<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"> ......  </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line">XML</span><br></pre></td></tr></table></figure><h2 id="获取初始化参数的ServletContext示例"><a href="#获取初始化参数的ServletContext示例" class="headerlink" title="获取初始化参数的ServletContext示例"></a>获取初始化参数的ServletContext示例</h2><p>这个例子中，从<code>web.xml</code>文件获取初始化参数并打印初始化参数的值。请注意，<code>ServletContext</code>的对象表示应用程序范围。所以如果从<code>web.xml</code>文件中更改参数的值，所有的<code>servlet</code>类都将获得更改的值。所以不需要修改每个servlet中的值。最好通过<code>web.xml</code>文件中的<code>context-param</code>元素为多个<code>servlet</code>提供公共信息。下面来看一个简单的例子：</p><p>打开Eclipse，创建一个动态Web项目，其项目结构如下所示 - </p><p>以下是几个主要的代码文件 - </p><p>文件：<em>ContextServlet.java</em> - </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yiibai;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class ContextServlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse</span></span><br><span class="line"><span class="comment">     *      response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        PrintWriter pw = response.getWriter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// creating ServletContext object</span></span><br><span class="line">        ServletContext context = getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Getting the value of the initialization parameter and printing it</span></span><br><span class="line">        String driverName = context.getInitParameter(<span class="string">&quot;dname&quot;</span>);</span><br><span class="line">        pw.println(<span class="string">&quot;driver name is = &lt;b&gt;&#x27;&quot;</span> + driverName+<span class="string">&quot;&#x27;&lt;/b&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>文件：<em>web.xml</em> - </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>ServletContext<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ContextServ<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.yiibai.ContextServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>dname<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ContextServ<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/context<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line">XML</span><br></pre></td></tr></table></figure><p>在编写完成上述代码后，部署这个Web应用，打开浏览器访问URL： <a href="http://localhost:8080/ServletContext/context">http://localhost:8080/ServletContext/context</a> ，如果程序没有错误，应该会看到以下结果 - </p><p><img src="http://www.yiibai.com/uploads/images/201710/1110/877171014_97705.png" alt="img"></p><h2 id="获取所有初始化参数的ServletContext示例"><a href="#获取所有初始化参数的ServletContext示例" class="headerlink" title="获取所有初始化参数的ServletContext示例"></a>获取所有初始化参数的ServletContext示例</h2><p>在这个例子中，我们将从<code>web.xml</code>文件中获取所有初始化参数。要获取所有参数，需要在servlet类中使用<code>getInitParameterNames()</code>方法。</p><p>在上面项目中，新建一个名称为：<em>ContextServletAll.java</em> 的Servlet，其代码如下 - </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yiibai;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class ContextServletAll</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextServletAll</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse</span></span><br><span class="line"><span class="comment">     *      response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line">        ServletContext context = getServletContext();</span><br><span class="line">        Enumeration&lt;String&gt; e = context.getInitParameterNames();</span><br><span class="line">        String str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> (e.hasMoreElements()) &#123;</span><br><span class="line">            str = e.nextElement();</span><br><span class="line">            out.print(<span class="string">&quot;&lt;br&gt; &quot;</span> + context.getInitParameter(str));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>文件：<em>web.xml</em> - </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>ServletContext<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ContextServ<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.yiibai.ContextServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>dname<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ContextServ<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/context<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ContextServAll<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.yiibai.ContextServletAll<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>dname<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>password<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>mypasswd<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ContextServAll<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/contextall<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line">XML</span><br></pre></td></tr></table></figure><p>在编写完成上述代码后，部署这个Web应用，打开浏览器访问URL： <a href="http://localhost:8080/ServletContext/contextall">http://localhost:8080/ServletContext/contextall</a> ，如果程序没有错误，应该会看到以下结果 - </p><p><img src="http://www.yiibai.com/uploads/images/201710/1110/745171041_67489.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> SERVLET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SERVLET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15.servlet ServletConfig配置信息</title>
      <link href="/2022/04/27/serlvet/15.Servlet%20ServletConfig%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/"/>
      <url>/2022/04/27/serlvet/15.Servlet%20ServletConfig%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p><code>ServletConfig</code>对象是由每个servlet的Web容器创建的。这个对象可用于从<code>web.xml</code>文件获取配置信息。</p><p>如果从<code>web.xml</code>文件修改配置信息，就不需要更改servlet中的代码。因此，对于有特定配置内容需要不定时修改，这样会更容易管理Web应用程序。</p><h2 id="ServletConfig的优点"><a href="#ServletConfig的优点" class="headerlink" title="ServletConfig的优点"></a>ServletConfig的优点</h2><p><code>ServletConfig</code>的核心优点是，如果可以修改<code>web.xml</code>文件中的信息，则不需要编辑servlet代码文件。</p><p><strong>ServletConfig接口的方法</strong></p><table><thead><tr><th>编号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><code>public String getInitParameter(String name)</code></td><td>返回指定参数名称的参数值。</td></tr><tr><td>2</td><td><code>public Enumeration getInitParameterNames()</code></td><td>返回所有初始化参数名称的枚举。</td></tr><tr><td>3</td><td><code>public String getServletName()</code></td><td>返回servlet的名称。</td></tr><tr><td>4</td><td><code>public ServletContext getServletContext()</code></td><td>返回<code>ServletContext</code>的对象。</td></tr></tbody></table><p><strong>如何获取ServletConfig的对象？</strong></p><ul><li>可通过调用Servlet接口的<code>getServletConfig()</code>方法来返回<code>ServletConfig</code>对象。</li></ul><p><strong>getServletConfig()方法的语法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span></span>;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p><strong>getServletConfig()方法的示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ServletConfig config=getServletConfig();  </span><br><span class="line"><span class="comment">//Now we can call the methods of ServletConfig interface</span></span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p><strong>为servlet提供初始化参数的语法</strong></p><p>servlet的<code>init-param</code>子元素用于指定servlet的初始化参数。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    ......</span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>parameter_name<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>parameter_value<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    ......</span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line">XML</span><br></pre></td></tr></table></figure><h2 id="获取初始化参数的ServletConfig示例"><a href="#获取初始化参数的ServletConfig示例" class="headerlink" title="获取初始化参数的ServletConfig示例"></a>获取初始化参数的ServletConfig示例</h2><p>在这个例子中，将从<code>web.xml</code>文件获取一个初始化参数，并在servlet中打印这些信息。</p><p>创建一个名称为：<em>ServletConfig</em>的动态Web应用项目，其结构如下所示 - </p><p><img src="http://www.yiibai.com/uploads/images/201710/1110/217161030_65406.png" alt="img"></p><p>下面是几个主要的代码文件 - </p><p>文件：<em>ConfigServlet.java</em> - </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yiibai;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class ConfigServlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse</span></span><br><span class="line"><span class="comment">     *      response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line">        ServletConfig config = getServletConfig();</span><br><span class="line">        String driver = config.getInitParameter(<span class="string">&quot;mysql_driver&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;Driver details is: &lt;b&gt;&quot;</span> + driver+<span class="string">&quot;&lt;/b&gt;&quot;</span>);</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>文件：<em>web.xml</em> - </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>ConfigServlet<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ConfigServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.yiibai.ConfigServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>mysql_driver<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ConfigServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/dbconfig<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line">XML</span><br></pre></td></tr></table></figure><p>将上面项目部署并访问URL： <a href="http://localhost:8080/ConfigServlet/dbconfig">http://localhost:8080/ConfigServlet/dbconfig</a> ，如果程序没有问题，那么应该会看到以下结果 - </p><p><img src="http://www.yiibai.com/uploads/images/201710/1110/472161021_81133.png" alt="img"></p><h2 id="获取所有初始化参数的ServletConfig示例"><a href="#获取所有初始化参数的ServletConfig示例" class="headerlink" title="获取所有初始化参数的ServletConfig示例"></a>获取所有初始化参数的ServletConfig示例</h2><p>在这个例子中，我们从<code>web.xml</code>文件获取所有的初始化参数，并在servlet中打印这些信息。</p><p>几个主要代码文件如下 - </p><p>文件：<em>ConfigServletAll.java</em> - </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yiibai;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class ConfigServletAll</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigServletAll</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse</span></span><br><span class="line"><span class="comment">     *      response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line">        ServletConfig config = getServletConfig();</span><br><span class="line">        Enumeration&lt;String&gt; e = config.getInitParameterNames();</span><br><span class="line">        String str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> (e.hasMoreElements()) &#123;</span><br><span class="line">            str = e.nextElement();</span><br><span class="line">            out.print(<span class="string">&quot;Name: &quot;</span> + str);</span><br><span class="line">            out.print(<span class="string">&quot; value: &quot;</span> + config.getInitParameter(str)+<span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>文件：<em>web.xml</em> - </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>ConfigServlet<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ConfigServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.yiibai.ConfigServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>mysql_driver<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ConfigServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/dbconfig<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ConfigServletAll<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.yiibai.ConfigServletAll<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>mssql_driver<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>com.mssql.jdbc.Driver<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>passwd<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ConfigServletAll<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/dbconfigall<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line">XML</span><br></pre></td></tr></table></figure><p>将上面项目部署并访问URL： <a href="http://localhost:8080/ConfigServlet/dbconfigall">http://localhost:8080/ConfigServlet/dbconfigall</a> ，如果程序没有问题，那么应该会看到以下结果 - </p><p><img src="http://www.yiibai.com/uploads/images/201710/1110/787161028_87514.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> SERVLET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SERVLET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14.servlet重定向</title>
      <link href="/2022/04/27/serlvet/14.Servlet%E9%87%8D%E5%AE%9A%E5%90%91/"/>
      <url>/2022/04/27/serlvet/14.Servlet%E9%87%8D%E5%AE%9A%E5%90%91/</url>
      
        <content type="html"><![CDATA[<p><code>HttpServletResponse</code>接口的<code>sendRedirect()</code>方法可以用于将响应重定向到另一个资源，资源可能是<code>servlet</code>，<code>jsp</code>或<code>html</code>文件。</p><p>它接受相对和绝对URL。</p><p>它在客户端工作，因为它使用浏览器的URL栏来发出另一个请求。 所以，它可以在服务器内部和外部工作。</p><h2 id="forward-和sendRedirect-方法的区别"><a href="#forward-和sendRedirect-方法的区别" class="headerlink" title="forward()和sendRedirect()方法的区别"></a>forward()和sendRedirect()方法的区别</h2><p><code>RequestDispatcher</code>的<code>forward()</code>方法和<code>HttpServletResponse</code>接口的<code>sendRedirect()</code>方法之间存在很多差异。如下面给出：</p><table><thead><tr><th>forward()方法</th><th>sendRedirect()方法</th></tr></thead><tbody><tr><td><code>forward()</code>方法在服务器端工作。</td><td><code>sendRedirect()</code>方法在客户端工作。</td></tr><tr><td>它将相同的请求和响应对象发送到另一个servlet。</td><td>它总是发送一个新的请求。</td></tr><tr><td>它只能在服务器内工作。</td><td>它可以在服务器内外使用。</td></tr><tr><td>示例: <code>request.getRequestDispacher(&quot;servlet2&quot;).forward(request,response);</code></td><td>示例: <code>response.sendRedirect(&quot;servlet2&quot;);</code></td></tr></tbody></table><p><strong>sendRedirect()方法的语法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendRedirect</span><span class="params">(String URL)</span><span class="keyword">throws</span> IOException</span>;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p><strong>sendRedirect()方法的示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">response.sendRedirect(<span class="string">&quot;http://www.yiibai.com&quot;</span>);</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><h2 id="servlet中sendRedirect-方法的完整示例"><a href="#servlet中sendRedirect-方法的完整示例" class="headerlink" title="servlet中sendRedirect()方法的完整示例"></a>servlet中sendRedirect()方法的完整示例</h2><p>打开Eclipse创建一个动态Web项目：<em>SendRedirect</em>，如下所示 - </p><p><img src="http://www.yiibai.com/uploads/images/201710/1110/309151000_64432.png" alt="img"></p><p>在此示例中，我们将请求重定向到<code>yiibai.com</code>网站。请注意，<code>sendRedirect()</code>方法在客户端工作，所以可以将请求重定向到任何地方。可以在服务器内外发送请求。</p><p>文件：<em>RedirectServlet.java</em> - </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yiibai;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class RedirectServlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedirectServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse</span></span><br><span class="line"><span class="comment">     *      response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        PrintWriter pw = response.getWriter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 直接重定向到：http://www.yiibai.com</span></span><br><span class="line">        response.sendRedirect(<span class="string">&quot;http://www.yiibai.com&quot;</span>);</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><h2 id="使用sendRedirect创建自定义关键字搜索"><a href="#使用sendRedirect创建自定义关键字搜索" class="headerlink" title="使用sendRedirect创建自定义关键字搜索"></a>使用sendRedirect创建自定义关键字搜索</h2><p>在这个例子中，使用<code>sendRedirect()</code>方法将请求发送到具有请求<code>yiibai.com</code>网站上的数据。以下是几个代码文件 - </p><p>文件：<em>index.html</em> - </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/SendRedirect/YiiSearcher&quot;</span>&gt;</span></span><br><span class="line">            关键字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;keyword&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">value</span>=<span class="string">&quot;易百教程搜索&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">HTML</span><br></pre></td></tr></table></figure><p>文件：<em>index.java</em> - </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yiibai;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class YiiSearcher</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YiiSearcher</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse</span></span><br><span class="line"><span class="comment">     *      response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        String keyword = request.getParameter(<span class="string">&quot;keyword&quot;</span>);</span><br><span class="line">        response.sendRedirect(<span class="string">&quot;http://www.yiibai.com/search.php?kw=&quot;</span> + keyword);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>文件：<em>web.xml</em> - </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>SendRedirect<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>RedirectServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.yiibai.RedirectServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>YiiSearcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.yiibai.YiiSearcher<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>RedirectServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/Redirect<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>YiiSearcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/YiiSearcher<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line">XML</span><br></pre></td></tr></table></figure><p>完成上面代码编写后，部署这个Web应用程序，打开浏览器访问URL： <a href="http://localhost:8080/SendRedirect/">http://localhost:8080/SendRedirect/</a> ，如是程序没有错误，应该会看到类似下面的界面显示 - </p><p><img src="http://www.yiibai.com/uploads/images/201710/1110/162141056_88184.png" alt="img"></p><p>点击搜索按钮后，重定向到易百教程的搜索页面并搜索指定关键字：<em>servlet</em>，得到以下结果 - </p><p><img src="http://www.yiibai.com/uploads/images/201710/1110/410141058_84821.png" alt="img"></p><p>如果直接访问URL：<a href="http://localhost:8080/SendRedirect/Redirect">http://localhost:8080/SendRedirect/Redirect</a> ，那么重定向到 <code>www.yiibai.com</code> 并打开易百教程的首页。</p>]]></content>
      
      
      <categories>
          
          <category> SERVLET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SERVLET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13.Servlet RequestDispatcher请求转发</title>
      <link href="/2022/04/27/serlvet/13.Servlet%20RequestDispatcher%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91/"/>
      <url>/2022/04/27/serlvet/13.Servlet%20RequestDispatcher%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p><code>RequestDispatcher</code>接口提供将请求转发送到另一个资源的功能，它可能是<code>html</code>，<code>servlet</code>或<code>jsp</code>等。 此接口也可用于包括另一资源的内容。它是servlet协作的一种方式。</p><p>在<code>RequestDispatcher</code>接口中定义了两种方法。它们分别是 - </p><table><thead><tr><th>编号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><code>public void forward(ServletRequest request,ServletResponse response)throws ServletException,java.io.IOException</code></td><td>将<code>servlet</code>的请求转发到服务器上的另一个资源(<code>servlet</code>，<code>JSP</code>文件或<code>HTML</code>文件)。</td></tr><tr><td>2</td><td><code>public void include(ServletRequest request,ServletResponse response)throws ServletException,java.io.IOException</code></td><td>在响应中包含资源的内容(<code>servlet</code>，<code>JSP</code>页面或<code>HTML</code>文件)。</td></tr></tbody></table><p><img src="http://www.yiibai.com/uploads/images/201710/1010/889101047_81383.jpg" alt="img"></p><p>如上图所示，第一个<code>servlet</code>转发请求到第二个<code>servlet</code>的响应发送给客户端。 第一个servlet的响应不会显示给用户。</p><p><img src="http://www.yiibai.com/uploads/images/201710/1010/224101055_20476.jpg" alt="img"></p><p>如上图所示，第二个<code>servlet</code>的响应将包含在发送给客户端的第一个servlet的响应中。</p><p><strong>如何获取RequestDispatcher的对象？</strong></p><p><code>ServletRequest</code>接口的<code>getRequestDispatcher()</code>方法返回<code>RequestDispatcher</code>的对象。</p><p><code>getRequestDispatcher</code>方法的语法如下 - </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> RequestDispatcher <span class="title">getRequestDispatcher</span><span class="params">(String resource)</span></span>;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p><strong>使用getRequestDispatcher方法的示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RequestDispatcher rd=request.getRequestDispatcher(<span class="string">&quot;servlet2&quot;</span>);  </span><br><span class="line"><span class="comment">//servlet2 is the url-pattern of the second servlet  </span></span><br><span class="line">rd.forward(request, response);<span class="comment">//method may be include or forward</span></span><br><span class="line">Java</span><br></pre></td></tr></table></figure><h2 id="RequestDispatcher接口示例"><a href="#RequestDispatcher接口示例" class="headerlink" title="RequestDispatcher接口示例"></a>RequestDispatcher接口示例</h2><p>在这个例子中，验证用户输入的密码。如果密码是：<code>mypasswd</code>，它会将请求转发到<code>WelcomeServlet</code>，否则会显示一条错误消息：<code>sorry username or password error！</code> 在这个程序中，使用的是硬编码(即：直接在代码中指定密码)。大部分应用中都是在数据库中存储用户信息和密码的，在接下来的教程文章我们也会介绍和学习。在这个例子中，创建了以下几个文件：</p><ul><li><em>index.html</em>：用于从用户处获取输入。</li><li><em>Login.java</em>：用于处理响应的servlet类。如果用户输入的密码是<code>mypasswd</code>，它会将请求转发给<code>WelcomeServlet</code>。</li><li><em>WelcomeServlet.java</em>：用于显示欢迎消息的servlet类。</li><li><em>web.xml</em>：包含有关servlet信息的部署描述符文件。</li></ul><p>工作流程，请参考下图 - </p><p><img src="http://www.yiibai.com/uploads/images/201710/1010/840111014_14116.jpg" alt="img"></p><p>打开Eclipse，创建一个名称为：<em>ReqDispatcher</em> 的动态Web项目，其完整的项目结构如下图所示 - </p><p><img src="http://www.yiibai.com/uploads/images/201710/1110/679121012_84979.png" alt="img"></p><p>下面是这个项目中相关文件的代码实现 - </p><p>文件：<em>index.html</em> - </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/ReqDispatcher/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span> </span><br><span class="line">        密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userPass&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">HTML</span><br></pre></td></tr></table></figure><p>文件：<em>Login.java</em> - </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yiibai;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.RequestDispatcher;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class Login</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse</span></span><br><span class="line"><span class="comment">     *      response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);<span class="comment">//设置服务器端编码</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line">        String name = request.getParameter(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">        String passwd = request.getParameter(<span class="string">&quot;userPass&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用户输入的密码是否为：mypasswd</span></span><br><span class="line">        <span class="keyword">if</span> (passwd.equals(<span class="string">&quot;mypasswd&quot;</span>) &amp;&amp; name.equals(<span class="string">&quot;admin&quot;</span>)) &#123;</span><br><span class="line">            RequestDispatcher rd = request.getRequestDispatcher(<span class="string">&quot;welcome&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Username is : &quot;</span>+name);</span><br><span class="line">            rd.forward(request, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            out.print(<span class="string">&quot;Sorry UserName or Password Error!&quot;</span>);</span><br><span class="line">            RequestDispatcher rd = request.getRequestDispatcher(<span class="string">&quot;/index.html&quot;</span>);</span><br><span class="line">            rd.include(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>文件：<em>WelcomeServlet.java</em> - </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yiibai;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class WelcomeServlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WelcomeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse</span></span><br><span class="line"><span class="comment">     *      response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);<span class="comment">//设置服务器端编码</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        String name = request.getParameter(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(name==<span class="keyword">null</span> || name==<span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">            name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        <span class="comment">//String chset = response.getCharacterEncoding(); </span></span><br><span class="line">        out.print(<span class="string">&quot;&lt;!DOCTYPE html&gt;\r\n&quot;</span> + </span><br><span class="line">                <span class="string">&quot;&lt;html&gt;\r\n&quot;</span> + </span><br><span class="line">                <span class="string">&quot;&lt;head&gt;\r\n&quot;</span> + </span><br><span class="line">                <span class="string">&quot;&lt;meta charset=\&quot;UTF-8\&quot;&gt;\r\n&quot;</span> + </span><br><span class="line">                <span class="string">&quot;&lt;title&gt;登录成功&lt;/title&gt;\r\n&quot;</span> + </span><br><span class="line">                <span class="string">&quot;&lt;/head&gt;\r\n&quot;</span> + </span><br><span class="line">                <span class="string">&quot;&lt;body&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;&lt;b&gt;登录成功啦lala  ~ &lt;/b&gt;&lt;hr/&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;Welcome, &quot;</span> + name);</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>文件：<em>web.xml</em> - </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>ReqDispatcher<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.yiibai.Login<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>WelcomeServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.yiibai.WelcomeServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>WelcomeServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/welcome<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line">XML</span><br></pre></td></tr></table></figure><p>访问项目的URL为： <a href="http://localhost:8080/ReqDispatcher/">http://localhost:8080/ReqDispatcher/</a> ，如果代码没有错误，那么应该会看到类似如下的界面 - </p><p><img src="http://www.yiibai.com/uploads/images/201710/1110/797121015_84120.png" alt="img"></p><p>当输入用户名和密码分别为：<code>admin</code> 和 <code>mypasswd</code>，然后提交登陆，应该会看到类似如下的界面 - </p><p><img src="http://www.yiibai.com/uploads/images/201710/1110/803121017_38087.png" alt="img"></p><p>如果用户名或密码错误，应该会看到有一条错误提示信息： <em>Sorry UserName or Password Error!</em></p>]]></content>
      
      
      <categories>
          
          <category> SERVLET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SERVLET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12.servlet显示所有头信息</title>
      <link href="/2022/04/27/serlvet/12.Servlet%E6%98%BE%E7%A4%BA%E6%89%80%E6%9C%89%E5%A4%B4%E4%BF%A1%E6%81%AF/"/>
      <url>/2022/04/27/serlvet/12.Servlet%E6%98%BE%E7%A4%BA%E6%89%80%E6%9C%89%E5%A4%B4%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p><code>ServletRequest</code>接口的<code>getHeaderNames()</code>方法返回一个包含所有头名称的<code>Enumeration</code>对象。<code>ServletRequest</code>接口的<code>getHeader()</code>方法返回给定头名称的头值。 在这个例子中，我们在<code>servlet</code>页面中显示一个请求的所有头信息。</p><p><strong>getHeaderNames()方法的语法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Enumeration <span class="title">getHeaderNames</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Java</span></span><br></pre></td></tr></table></figure><p><strong>getHeader()方法的语法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHeader</span><span class="params">(String headerName)</span></span></span><br><span class="line"><span class="function">Java</span></span><br></pre></td></tr></table></figure><h2 id="在servlet中显示所有头信息的示例"><a href="#在servlet中显示所有头信息的示例" class="headerlink" title="在servlet中显示所有头信息的示例"></a>在servlet中显示所有头信息的示例</h2><p>在本示例中，我们调用<code>ServletRequest</code>接口的<code>getHeaderNames()</code>方法，该方法返回包含所有头名称的<code>Enumeration</code>对象。通过调用<code>getHeader()</code>方法来获取和显示所有的报头值。下面来看一个例子：</p><p>打开Eclipse，创建一个动态Web项目：<em>ShowHeaders</em>，并在<code>com.yiibai</code>包下创建一个名称为：<em>HeaderServlet.java</em>的Servlet类以及在<em>WebContent</em>目录下创建一个HTML文件：<em>index.html</em>，如下所示 - </p><p><img src="http://www.yiibai.com/uploads/images/201710/1010/933101027_29661.png" alt="img"></p><p>完整的代码实现如下所示 - </p><p>文件：<em>index.html</em> - </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>ShowHeaders Servlet<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span></span><br><span class="line">        请<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/ShowHeaders/headers?key1=name&quot;</span>&gt;</span>点击这里<span class="tag">&lt;/<span class="name">a</span>&gt;</span>查看所有报头信息</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">HTML</span><br></pre></td></tr></table></figure><p>文件：<em>HeaderServlet.java</em> - </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yiibai;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class HeaderServlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeaderServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse</span></span><br><span class="line"><span class="comment">     *      response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// out.println(&quot;HTTP headers sent by your client:&lt;br&gt;&quot;);</span></span><br><span class="line"></span><br><span class="line">        Enumeration enums = request.getHeaderNames();</span><br><span class="line">        <span class="keyword">while</span> (enums.hasMoreElements()) &#123;</span><br><span class="line">            String headerName = (String) enums.nextElement();</span><br><span class="line">            String headerValue = request.getHeader(headerName);</span><br><span class="line">            out.print(<span class="string">&quot;&lt;b&gt;&quot;</span> + headerName + <span class="string">&quot;&lt;/b&gt;: &quot;</span>);</span><br><span class="line">            out.println(headerValue + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>文件：<em>web.xml</em> - </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>ShowHeaders-HeaderServlet<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HeaderServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.yiibai.HeaderServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HeaderServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/headers<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line">XML</span><br></pre></td></tr></table></figure><p>执行结果如下所示 - </p><p><img src="http://www.yiibai.com/uploads/images/201710/1010/497101040_28943.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> SERVLET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SERVLET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11.servlet ServletReques</title>
      <link href="/2022/04/27/serlvet/11.Servlet%20ServletRequest%E6%8E%A5%E5%8F%A3/"/>
      <url>/2022/04/27/serlvet/11.Servlet%20ServletRequest%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<p><strong>ServletRequest接口</strong></p><p><code>ServletRequest</code>的对象用于向Servlet提供客户端请求信息，如内容类型，内容长度，参数名称和值，标题信息，属性等。</p><h2 id="ServletRequest接口的方法"><a href="#ServletRequest接口的方法" class="headerlink" title="ServletRequest接口的方法"></a>ServletRequest接口的方法</h2><p><code>ServletRequest</code>接口中定义了很多方法。 其中一些如下：</p><table><thead><tr><th>编号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><code>public String getParameter(String name)</code></td><td>用于通过名称获取参数的值。</td></tr><tr><td>2</td><td><code>public String[] getParameterValues(String name)</code></td><td>返回一个包含给定参数名称的所有值的String数组。它主要用于获取多选列表框的值。</td></tr><tr><td>3</td><td><code>java.util.Enumeration getParameterNames()</code></td><td>返回所有请求参数名称的枚举。</td></tr><tr><td>4</td><td><code>public int getContentLength()</code></td><td>返回请求实体数据的大小，如果未知则返回<code>-1</code>。</td></tr><tr><td>5</td><td><code>public String getCharacterEncoding()</code></td><td>返回此请求输入的字符集编码。</td></tr><tr><td>6</td><td><code>public String getContentType()</code></td><td>返回请求实体数据的网络媒体类型，如果未知则返回<code>null</code>。</td></tr><tr><td>7</td><td><code>public ServletInputStream getInputStream() throws IOException</code></td><td>返回用于读取请求正文中二进制数据的输入流。</td></tr><tr><td>8</td><td><code>public abstract String getServerName()</code></td><td>返回接收请求的服务器的主机名。</td></tr><tr><td>9</td><td><code>public int getServerPort()</code></td><td>返回接收到此请求的端口号。</td></tr></tbody></table><p><strong>ServletRequest显示用户名称的示例</strong></p><p>在这个例子中，在servlet中显示用户提交上来的名字。这里使用<code>getParameter()</code>方法返回指定请求参数名称的值。</p><p>打开Eclipse，创建一个名称为：<strong>ServletRequest</strong> 的动态Web网站项目，项目的目录结构如下 - </p><p>关键代码如下 - </p><p><em>ServletRequest.java</em> - </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yiibai;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class ServletRequest</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletRequest</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse</span></span><br><span class="line"><span class="comment">     *      response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="comment">// response.getWriter().append(&quot;Served at: &quot;).append(request.getContextPath());</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        PrintWriter pw = response.getWriter();</span><br><span class="line"></span><br><span class="line">        String name = request.getParameter(<span class="string">&quot;name&quot;</span>);<span class="comment">// will return value</span></span><br><span class="line">        <span class="keyword">if</span> (name == <span class="keyword">null</span> || name == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">            name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pw.println(<span class="string">&quot;Welcome &quot;</span> + name);</span><br><span class="line"></span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p><em>index.html</em> - </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Welcome - ServletRequest<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/ServletRequest/welcome&quot;</span>&gt;</span></span><br><span class="line">            名字：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">HTML</span><br></pre></td></tr></table></figure><p><em>web.xml</em> - </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>ServletRequest<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletRequest<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.yiibai.ServletRequest<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletRequest<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/welcome<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line">XML</span><br></pre></td></tr></table></figure><h2 id="ServletRequest接口的其他示例"><a href="#ServletRequest接口的其他示例" class="headerlink" title="ServletRequest接口的其他示例"></a>ServletRequest接口的其他示例</h2><p><a href="http://www.yiibai.com/servlet/displaying-all-the-header-information-in-the-servlet.html">ServletRequest的示例显示所有头信息</a><br>在这个例子中，显示servlet的头信息，如内容类型，内容长度，用户代理等。</p>]]></content>
      
      
      <categories>
          
          <category> SERVLET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SERVLET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.servlet 启动时加载</title>
      <link href="/2022/04/27/serlvet/10.Servlet%E5%90%AF%E5%8A%A8%E6%97%B6%E5%8A%A0%E8%BD%BD/"/>
      <url>/2022/04/27/serlvet/10.Servlet%E5%90%AF%E5%8A%A8%E6%97%B6%E5%8A%A0%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p><strong>在web.xml文件中指定启动时加载</strong></p><p>如果<code>load-on-startup</code>元素值为正，则会在Web应用程序部署或服务器启动时加载servlet。 它也被称为servlet的预初始化。</p><p>可以指定传递servlet的值(<code>load-on-startup</code>元素指定的值)为正或为负。</p><p><strong>load-on-startup元素的优点</strong></p><p>servlet在第一个请求时被加载。这意味着它会在第一次请求时消耗更多的时间。 如果在<code>web.xml</code>中指定启动加载，则servlet将在项目部署时间或服务器启动时加载。 所以，响应第一个请求需要较少的时间。</p><p>下面来看一个简单的<em>web.xml</em>配置<code>load-on-startup</code>元素的示例代码 - </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>helloworld<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>home.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>com.yiibai.MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>0<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>com.yiibai.BServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>BServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/index<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line">XML</span><br></pre></td></tr></table></figure><p>定义了<code>2</code>个servlet，这两个servlet将在项目部署或服务器启动时加载。但是，首先将<code>MyServlet</code>加载，然后再加载<code>BServlet</code>。</p><p><strong>传递负值</strong></p><p>如果传递<code>load-on-startup</code>元素为负值，则此servlet将请求时第一个加载。</p>]]></content>
      
      
      <categories>
          
          <category> SERVLET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SERVLET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>09.servlet web.xml</title>
      <link href="/2022/04/27/serlvet/09.Servlet%20web.xml%20welcome-file-list/"/>
      <url>/2022/04/27/serlvet/09.Servlet%20web.xml%20welcome-file-list/</url>
      
        <content type="html"><![CDATA[<p>在<code>web.xml</code>文件中的<code>web-app</code>块的<code>welcome-file-list</code>子元素用于定义欢迎文件列表。 它的子元素是<code>welcome-file</code>，用于定义欢迎文件(即默认打开的页面)。</p><p>欢迎文件是服务器自动调用的文件，如果不指定任何文件名。</p><p>默认情况下，服务器按以下顺序查找欢迎文件：</p><ol><li><code>web.xml</code>文件中的<code>welcome-file-list</code>指定的文件</li><li>index.html</li><li>index.html</li><li>index.jsp</li></ol><p>如果没有找到这些文件，服务器会报告404错误。</p><p>如果在<code>web.xml</code>中指定了<code>welcome-file</code>，并且所有文件<code>index.html</code>，<code>index.html</code>和<code>index.jsp</code>都存在，那么优先级将转到<code>welcome-file</code>。</p><p>如果<code>web.xml</code>文件中不存在<code>welcome-file-list</code>项，那么优先级到<code>index.html</code>文件，然后是<code>index.html</code>，以及最后是<code>index.jsp</code>文件。</p><p>下面来看看一个定义欢迎文件的<code>web.xml</code>文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>helloworld<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>home.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line">XML</span><br></pre></td></tr></table></figure><p>现在，<code>index.html</code>，<code>index.jsp</code>和<code>home.jsp</code>将是欢迎文件。</p><p>如果有欢迎文件，可以按如下所示的方式调用项目：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8888/helloproject</span><br><span class="line">Shell</span><br></pre></td></tr></table></figure><p>如上所示，我们并没有在项目名称(<code>helloproject</code>)之后指定任何文件名。上面URL访问相当于以下三个 - </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8888/helloproject/index.html</span><br><span class="line">http://localhost:8888/helloproject/index.jsp</span><br><span class="line">http://localhost:8888/helloproject/home.jsp</span><br><span class="line">Shell</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SERVLET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SERVLET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>08.servlet</title>
      <link href="/2022/04/27/serlvet/08.War%E6%96%87%E4%BB%B6/"/>
      <url>/2022/04/27/serlvet/08.War%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>一个war(<em>web archive</em>)文件包含一个web项目的文件。它可能有<code>servlet</code>，<code>xml</code>，<code>jsp</code>，<code>image</code>，<code>html</code>，<code>css</code>，<code>js</code>等文件。</p><p>在这里，我们将讨论什么是war文件，如何创建war文件，如何部署war文件以及如何提取war文件。</p><h2 id="war文件是什么？"><a href="#war文件是什么？" class="headerlink" title="war文件是什么？"></a>war文件是什么？</h2><p>Web存档(war)文件包含Web应用程序的所有内容。它减少了传输文件所需要的时间。</p><p><strong>war文件的优点</strong></p><p><em>节省时间</em>：war文件将所有文件合并为一个单位。 所以在将文件从客户端传输到服务器时需要更少的时间。</p><h2 id="如何创建war文件？"><a href="#如何创建war文件？" class="headerlink" title="如何创建war文件？"></a>如何创建war文件？</h2><p>要创建war文件，需要使用JDK的jar工具，可使用<code>jar</code> 和<code>-c</code>选项来创建war文件。</p><p>进入项目的目录(<em>WEB-INF</em>外部)，然后写入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jar -cvf projectname.war *</span><br><span class="line">Shell</span><br></pre></td></tr></table></figure><p>这里，<code>-c</code>用于创建文件<code>-v</code>生成详细输出，<code>-f</code>用于指定<code>war</code>文件名。</p><p><code>*</code>(星号)符号表示此目录的所有文件(包括子目录)。</p><p><strong>使用Eclipse导出War文件</strong></p><p>在项目名称上点击右键，选择：<em>Export</em>-&gt;<em>War File</em>，在弹出的对话框选选保存的位置，如下所示 - </p><p><img src="http://www.yiibai.com/uploads/images/201710/0910/995101047_89013.png" alt="img"></p><p>在弹出的对话框中，填写要保存的名称即可。</p><h2 id="如何部署war文件？"><a href="#如何部署war文件？" class="headerlink" title="如何部署war文件？"></a>如何部署war文件？</h2><p>有两种方法可用来部署war文件。</p><ul><li>通过服务器控制面板</li><li>通过手动将war文件放在服务器的特定应用发布文件夹中。</li></ul><p>如果要手动在apache tomcat服务器中部署war文件，请将war文件复制粘贴到apache tomcat的webapps目录中(如：<em>D:\software\apache-tomcat-8.5.23\webapps</em>)就可以了。</p><p>现在，可以通过浏览器访问该Web项目。例如要发布的项目War文件是<em>helloworld.war</em>，那么可在浏览器中打开访问URL：<a href="http://localhost:8080/helloworld/">http://localhost:8080/helloworld/</a> </p><blockquote><p>注意：服务器将在内部提取war文件。</p></blockquote><h2 id="如何手动提取war文件？"><a href="#如何手动提取war文件？" class="headerlink" title="如何手动提取war文件？"></a>如何手动提取war文件？</h2><p>要提取war文件，需要使用JDK的jar工具的<code>-x</code>选项。下面来看看提取<code>war</code>文件的命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jar -xvf projectname.war</span><br><span class="line">Shell</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SERVLET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SERVLET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>07.servlet 工作流程</title>
      <link href="/2022/04/27/serlvet/07.Servlet%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/"/>
      <url>/2022/04/27/serlvet/07.Servlet%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><strong>Servlet是如何工作的？</strong></p><p>了解servlet如何工作对了解servlet内部工作流程很重要。 在这里，我们将以第一个servlet程序来讲解它的内部细节。</p><p>服务器检查servlet<strong>是否为第一次被请求</strong>？</p><p>如果<strong>是第一次</strong>被请求，则 - </p><ul><li>加载servlet类。</li><li>实例化servlet类。</li><li>调用<code>init</code>方法传递<code>ServletConfig</code>对象</li></ul><p>如果<strong>不是第一次</strong>被请求，则 - </p><ul><li>调用<code>service</code>方法传递请求和响应对象</li></ul><p>Web容器在需要删除servlet时调用<code>destroy</code>方法，例如：在停止服务器或取消部署项目时。</p><p><strong>Web容器如何处理servlet请求？</strong></p><p>Web容器负责处理请求。下面来看看看它如何处理请求。</p><ul><li>将请求与<em>web.xml</em>文件中的servlet进行映射。</li><li>为请求创建请求和响应对象</li><li>调用线程上的<code>service</code>方法</li><li>公共<code>service</code>方法内部调用受保护的<code>service</code>方法</li><li>受保护的<code>service</code>方法根据请求的类型调用<code>doGet</code>方法。</li><li><code>doGet</code>方法生成响应，并将其传递给客户端。</li><li>发送响应后，Web容器将删除请求和响应对象。线程包含在线程池中或删除取决于服务器实现。</li></ul><p><strong>在公共service方法中写什么？</strong></p><p>公共<code>service</code>方法将<code>ServletRequest</code>对象转换为<code>HttpServletRequest</code>类型和<code>ServletResponse</code>对象转为<code>HttpServletResponse</code>类型。然后调用传递这些对象的<code>service</code>方法。下面来看看内部代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span>  </span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">        HttpServletRequest request;  </span><br><span class="line">        HttpServletResponse response;  </span><br><span class="line">        <span class="keyword">try</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            request = (HttpServletRequest)req;  </span><br><span class="line">            response = (HttpServletResponse)res;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">catch</span>(ClassCastException e)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">&quot;non-HTTP request or response&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        service(request, response);  </span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p><strong>在受保护的service方法中编写什么？</strong></p><p>受保护的<code>service</code>方法检查请求的类型，如果请求类型为<code>get</code>，则调用<code>doGet</code>方法，如果请求类型为<code>post</code>，则调用<code>doPost</code>方法。下面来看看内部代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span>  </span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    String method = req.getMethod();  </span><br><span class="line">    <span class="keyword">if</span>(method.equals(<span class="string">&quot;GET&quot;</span>))  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">long</span> lastModified = getLastModified(req);  </span><br><span class="line">        <span class="keyword">if</span>(lastModified == -<span class="number">1L</span>)  </span><br><span class="line">        &#123;  </span><br><span class="line">            doGet(req, resp);  </span><br><span class="line">        &#125;   </span><br><span class="line">        ....  </span><br><span class="line">        <span class="comment">//rest of the code  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SERVLET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SERVLET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06.servlet 生命周期</title>
      <link href="/2022/04/27/serlvet/06.Servlet%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2022/04/27/serlvet/06.Servlet%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<p>Web容器维护servlet实例的生命周期。下面来看看servlet的生命周期，主要分为以下几个步骤：</p><ol><li>加载Servlet类，如前面小节中的示例代码：<em>MyServlet.java</em>。</li><li>创建Servlet实例。</li><li>调用Servlet类的<code>init</code>方法。</li><li>调用Servlet类的<code>service</code>方法。</li><li>调用Servlet类的<code>destroy</code>方法。</li></ol><p>模型流程图如下所示 -</p><p><img src="http://www.yiibai.com/uploads/images/201710/0910/840091054_31912.jpg" alt="img"></p><p>如上图所示，servlet有三种状态：新，就绪和结束。 如果servlet实例被创建，则servlet处于新状态。 调用<code>init()</code>方法后，Servlet进入就绪状态。 在就绪状态下，servlet执行所有任务。当web容器调用<code>destroy()</code>方法时，它转移到结束状态。</p><p><strong>1.加载Servlet类</strong></p><p>类加载器负责加载servlet类。 当Web容器接收到servlet的第一个请求时，将加载servlet类。</p><p><strong>2.创建Servlet实例</strong></p><p>Web容器在加载servlet类之后创建一个servlet的实例。servlet实例在servlet生命周期中只创建一次。</p><p><strong>3.调用init方法</strong></p><p>Web容器在创建servlet实例后调用<code>init</code>方法一次。 <code>init</code>方法用于初始化servlet。 它是<code>javax.servlet.Servlet</code>接口的生命周期方法。<code>init</code>方法的语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException</span></span><br><span class="line"><span class="function">Java</span></span><br></pre></td></tr></table></figure><p><strong>4.调用service方法</strong></p><p>每当接收到servlet的请求时，Web容器都会调用<code>service</code>方法。如果servlet未初始化，则遵循上述前三个步骤，然后调用<code>service</code>方法。 如果servlet被初始化，它调用<code>service</code>方法。 请注意，servlet仅初始化一次。 Servlet接口的<code>service</code>方法的语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest request, ServletResponse response)</span>   </span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">Java</span></span><br></pre></td></tr></table></figure><p><strong>5.调用destroy方法</strong></p><p>从服务中删除servlet实例之前，Web容器调用<code>destroy</code>方法。它使servlet有机会清理所有资源，例如内存，线程等。Servlet接口的<code>destroy</code>方法的语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Java</span></span><br></pre></td></tr></table></figure><h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><p>下图描述了一个典型的servlet生命周期场景。</p><ul><li>首先将来到服务器的HTTP请求委托给servlet容器。</li><li>servlet容器在调用<code>service()</code>方法之前加载servlet。</li><li>然后，servlet容器通过产生多个线程来处理多个请求，每个线程执行servlet的单个实例的<code>service()</code>方法。</li></ul><p><img src="http://www.yiibai.com/uploads/images/201710/0910/732101005_31794.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> SERVLET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SERVLET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05.servlet HttpServlet</title>
      <link href="/2022/04/27/serlvet/05.Servlet%20HttpServlet%E7%B1%BB/"/>
      <url>/2022/04/27/serlvet/05.Servlet%20HttpServlet%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>HttpServlet类扩展了<code>GenericServlet</code>类并实现了<code>Serializable</code>接口。它提供了http特定的方法，如:<code>doGet</code>，<code>doPost</code>，<code>doHead</code>，<code>doTrace</code>等。</p><h2 id="HttpServlet类的方法"><a href="#HttpServlet类的方法" class="headerlink" title="HttpServlet类的方法"></a>HttpServlet类的方法</h2><p><code>HttpServlet</code>类中有很多方法。它们分别如下：</p><table><thead><tr><th>序号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><code>public void service(ServletRequest req,ServletResponse res)</code></td><td>通过将请求和响应对象转换为http类型将请求调度到受保护的<code>service</code>方法。</td></tr><tr><td>2</td><td><code>protected void service(HttpServletRequest req, HttpServletResponse res)</code></td><td>从<code>service</code>方法接收请求，并根据传入的http请求类型将请求发送到<code>doXXX()</code>方法。</td></tr><tr><td>3</td><td><code>protected void doGet(HttpServletRequest req, HttpServletResponse res)</code></td><td>处理GET请求，它由Web容器调用。</td></tr><tr><td>4</td><td><code>protected void doPost(HttpServletRequest req, HttpServletResponse res)</code></td><td>处理POST请求，它由Web容器调用。</td></tr><tr><td>5</td><td><code>protected void doHead(HttpServletRequest req, HttpServletResponse res)</code></td><td>处理HEAD请求，它由Web容器调用。</td></tr><tr><td>6</td><td><code>protected void doOptions(HttpServletRequest req, HttpServletResponse res)</code></td><td>处理OPTIONS请求，它由Web容器调用。</td></tr><tr><td>7</td><td><code>protected void doPut(HttpServletRequest req, HttpServletResponse res)</code></td><td>处理PUT请求，它由Web容器调用。</td></tr><tr><td>8</td><td><code>protected void doTrace(HttpServletRequest req, HttpServletResponse res)</code></td><td>处理TRACE请求，它由Web容器调用。</td></tr><tr><td>9</td><td><code>protected void doDelete(HttpServletRequest req, HttpServletResponse res)</code></td><td>处理DELETE请求，它由Web容器调用。</td></tr><tr><td>10</td><td><code>protected long getLastModified(HttpServletRequest req)</code></td><td>返回自1970年1月1日GMT以来<code>HttpServletRequest</code>上次修改的时间。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> SERVLET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SERVLET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04.servlet GenericServlet类</title>
      <link href="/2022/04/27/serlvet/04.Servlet%20GenericServlet%E7%B1%BB/"/>
      <url>/2022/04/27/serlvet/04.Servlet%20GenericServlet%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>Servlet接口为所有servlet提供常见的行为。</p><p><code>GenericServlet</code>类实现了<code>Servlet</code>，<code>ServletConfig</code>和<code>Serializable</code>接口。它提供除了<code>service</code>方法之外，还实现了这些接口的所有方法。</p><p><code>GenericServlet</code>类可以处理任何类型的请求，因此它与协议无关。</p><p>可以通过继承<code>GenericServlet</code>类并提供服务方法的实现来创建通用的<code>servlet</code>。</p><h2 id="GenericServlet类的方法"><a href="#GenericServlet类的方法" class="headerlink" title="GenericServlet类的方法"></a>GenericServlet类的方法</h2><p><code>GenericServlet</code>类中有很多方法。它们分别如下：</p><table><thead><tr><th>序号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><code>public void init(ServletConfig config)</code></td><td>用于初始化servlet</td></tr><tr><td>2</td><td><code>public abstract void service(ServletRequest request, ServletResponse response)</code></td><td>为传入请求提供服务，每当用户请求一个servlet时调用它。</td></tr><tr><td>3</td><td><code>public void destroy()</code></td><td>在整个生命周期中仅调用一次，以表明servlet正在被销毁。</td></tr><tr><td>4</td><td><code>public ServletConfig getServletConfig()</code></td><td>返回<code>ServletConfig</code>对象</td></tr><tr><td>5</td><td><code>public String getServletInfo()</code></td><td>返回有关servlet的信息，如作者，版权，版本等。</td></tr><tr><td>6</td><td><code>public void init()</code></td><td>这是servlet程序员的一个方便的方法，现在不需要调用<code>super.init(config)</code></td></tr><tr><td>7</td><td><code>public ServletContext getServletContext()</code></td><td>返回<code>ServletContext</code>的对象。</td></tr><tr><td>8</td><td><code>public String getInitParameter(String name)</code></td><td>返回给定参数名称的参数值。</td></tr><tr><td>9</td><td><code>public Enumeration getInitParameterNames()</code></td><td>返回<code>web.xml</code>文件中定义的所有参数。</td></tr><tr><td>10</td><td><code>public String getServletName()</code></td><td>返回<code>servlet</code>对象的名称。</td></tr><tr><td>11</td><td><code>public void log(String msg)</code></td><td>在servlet日志文件中写入给定的消息。</td></tr><tr><td>12</td><td><code>public void log(String msg,Throwable t)</code></td><td>将说明性消息写入servlet日志文件和堆栈跟踪。</td></tr></tbody></table><h2 id="通过继承GenericServlet类的Servlet示例"><a href="#通过继承GenericServlet类的Servlet示例" class="headerlink" title="通过继承GenericServlet类的Servlet示例"></a>通过继承GenericServlet类的Servlet示例</h2><p>下面是一个通过继承<code>GenericServlet</code>类的servlet简单例子。</p><p>打开Eclipse，创建一个动态网站项目(<em>Dynamic Web Project</em>)：<em>genericservlet</em>，如下 - </p><blockquote><p>注：有关如何在Eclipse创建动态网站项目，请参考：<a href="http://www.yiibai.com/servlet/creating-servlet-in-eclipse-ide.html">http://www.yiibai.com/servlet/creating-servlet-in-eclipse-ide.html</a></p></blockquote><p><code>MyServlet.java</code>的代码如下所示 - </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yiibai;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        res.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line"></span><br><span class="line">        PrintWriter out = res.getWriter();</span><br><span class="line">        out.print(<span class="string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;&lt;div style=\&quot;text-align:center;\&quot;&gt;&lt;h2&gt;hello generic servlet&lt;/h2&gt;&lt;/div&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>执行上面项目，打开浏览器，输入网址： <a href="http://localhost:8080/genericservlet/index">http://localhost:8080/genericservlet/index</a>  可以看到类似下面的界面 -</p><p><img src="http://www.yiibai.com/uploads/images/201710/0910/803091025_92639.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> SERVLET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SERVLET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03.servlet接口实现</title>
      <link href="/2022/04/27/serlvet/03.Servlet%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/04/27/serlvet/03.Servlet%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>Servlet接口为所有servlet提供常见的行为。</p><p>需要实现Servlet接口来创建任何servlet(直接或间接)。它提供了<code>3</code>个生命周期方法，用于初始化servlet，服务请求以及销毁servlet和<code>2</code>个非生命周期方法。</p><h2 id="Servlet接口的方法"><a href="#Servlet接口的方法" class="headerlink" title="Servlet接口的方法"></a>Servlet接口的方法</h2><p>Servlet接口有<code>5</code>种方法。分别为：<code>init</code>，<code>service</code>和<code>destroy</code>是servlet的生命周期方法。这些方法由web容器调用。</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>public void init(ServletConfig config)</code></td><td>初始化servlet，它是servlet的生命周期方法，由web容器调用一次。</td></tr><tr><td><code>public void service(ServletRequest request,ServletResponse response)</code></td><td>为传入的请求提供响应。它由Web容器的每个请求调用。</td></tr><tr><td><code>public void destroy()</code></td><td>仅被调用一次，并且表明servlet正在被销毁。</td></tr><tr><td><code>public ServletConfig getServletConfig()</code></td><td>返回ServletConfig对象。</td></tr><tr><td><code>public String getServletInfo()</code></td><td>返回有关servlet的信息，如作者，版权，版本等。</td></tr></tbody></table><h2 id="Servlet实例通过实现Servlet接口"><a href="#Servlet实例通过实现Servlet接口" class="headerlink" title="Servlet实例通过实现Servlet接口"></a>Servlet实例通过实现Servlet接口</h2><p>下面是一个通过实现servlet接口的Servlet简单例子。</p><p>打开Eclipse，创建一个动态网站项目(<em>Dynamic Web Project</em>)：<em>servletinterface</em>，如下 - </p><blockquote><p>注：有关如何在Eclipse创建动态网站项目，请参考：<a href="http://www.yiibai.com/servlet/creating-servlet-in-eclipse-ide.html">http://www.yiibai.com/servlet/creating-servlet-in-eclipse-ide.html</a></p></blockquote><p><img src="http://www.yiibai.com/uploads/images/201710/0910/664081052_89974.png" alt="img"></p><p><code>MyServlet.java</code>的代码如下所示 - </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yiibai;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现Servlet接口的Servlet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Maxsu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@url</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    ServletConfig config = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.config = config;</span><br><span class="line">        System.out.println(<span class="string">&quot;servlet is initialized&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        res.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line"></span><br><span class="line">        PrintWriter out = res.getWriter();</span><br><span class="line">        out.print(<span class="string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;&lt;div style=\&quot;text-align:center;\&quot;&gt;&lt;h2&gt;hello simple servlet&lt;/h2&gt;&lt;/div&gt;&quot;</span>);</span><br><span class="line">        out.print(<span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;servlet is destroyed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;copyright 2012-2020&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>执行上面项目，打开浏览器，输入网址： <a href="http://localhost:8080/servletinterface/index">http://localhost:8080/servletinterface/index</a> 可以看到类似下面的界面 -</p><p><img src="http://www.yiibai.com/uploads/images/201710/0910/753081058_60949.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> SERVLET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SERVLET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02.servlet入门程序</title>
      <link href="/2022/04/27/serlvet/02.Servlet%E5%85%A5%E9%97%A8%E7%A8%8B%E5%BA%8F/"/>
      <url>/2022/04/27/serlvet/02.Servlet%E5%85%A5%E9%97%A8%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>在这节中，我们将演示如何手动来创建一个简单的Servlet应用程序。需要遵循以下步骤，这些步骤对于所有Web服务器是常见的。在这个示例中，使用的是Apache Tomcat8服务器。Apache Tomcat是用于测试servlet和JSP技术的开源Web服务器。</p><p>这一节非常关键，希望您能仔细按照步骤说明来操作。能否手动开发一个Servlet运行成功，可能会影响到学习的热情。</p><p>在开始之前，需要安装两个软件：</p><ul><li>Java/JDK 8</li><li>Tomcat 8</li></ul><blockquote><p>注意： Java安装好后，需要将它加到系统的环境变量中。可参考：<a href="http://www.yiibai.com/java/java_environment_setup.html">http://www.yiibai.com/java/java_environment_setup.html</a> </p></blockquote><p><strong>安装Tomcat</strong></p><p>在开始编写代码之前，需要您自己<a href="http://tomcat.apache.org/download-80.cgi">下载最新版本的Tomcat Server</a>并将其安装在您的计算机上。</p><p>打开网址： <a href="http://tomcat.apache.org/download-80.cgi">http://tomcat.apache.org/download-80.cgi</a> 下载 <em>apache-tomcat-8.5.23-windows-x64.zip</em> ，如下图所示 - </p><p><img src="http://www.yiibai.com/uploads/images/201710/0910/753171029_43773.png" alt="img"></p><p>下载完成后，将它解压到一个合适的位置，如：<em>D:\software\apache-tomcat-8.5.23</em> ， 然后运行Tomcat服务器测试运行情况，可通过双击文件：<em>D:\software\apache-tomcat-8.5.23\bin\startup.bat</em> 来启动，如下所示 -  </p><p><img src="http://www.yiibai.com/uploads/images/201710/0910/512171032_16132.png" alt="img"></p><p>测试运行Tomcat服务器运行情况，打开浏览器，访问地址：<a href="http://localhost:8080/">http://localhost:8080</a> 应该会看到类似的界面 - </p><p><img src="http://www.yiibai.com/uploads/images/201710/0910/268171034_17364.png" alt="img"></p><p>在机器上安装<em>Tomcat Server</em>后，请按照以下步骤操作：</p><ol><li>创建应用程序目录结构。</li><li>创建一个Servlet</li><li>编译Servlet</li><li>创建应用程序部署描述符</li><li>启动服务器并部署应用程序</li></ol><p>下面详细介绍所有这五个步骤，首先创建第一个Servlet应用程序。</p><h2 id="1-创建应用程序目录结构"><a href="#1-创建应用程序目录结构" class="headerlink" title="1.创建应用程序目录结构"></a>1.创建应用程序目录结构</h2><p><em>Sun Microsystem</em>定义了创建servlet应用程序必须遵循的目录结构。这里以一个名称为：<em>First</em> 的应用为示例，介绍一个典型servlet应用程序的目录结构 - </p><p><img src="http://www.yiibai.com/uploads/images/201710/0910/887161002_10639.jpg" alt="img"></p><p>在<em>Apache-Tomcat\webapps</em>目录下创建上述目录结构。所有HTML，静态文件(图像，css等)都直接保存在Web应用程序(<em>webapps</em>)文件夹下。 而所有Servlet类都保存在<code>classes</code>文件夹中。</p><p><code>web.xml</code>(部署描述符)文件保存在<em>WEB-INF</em>文件夹下。</p><h2 id="2-创建一个Servlet"><a href="#2-创建一个Servlet" class="headerlink" title="2.创建一个Servlet"></a>2.创建一个Servlet</h2><p>创建<code>servlet</code>有三种不同的方法。</p><ol><li>通过实现<code>Servlet</code>接口</li><li>扩展<code>GenericServlet</code>类</li><li>通过扩展<code>HttpServlet</code>类</li></ol><p>但是大部分<code>servlet</code>是通过扩展<code>HttpServlet</code>抽象类创建的。如前所述<code>HttpServlet</code>给出了<code>Servlet</code>接口的<code>service()</code>方法的定义。我们将创建<code>Servlet</code>类但不需要覆盖<code>service()</code>方法。<code>Servlet</code>类将仅覆盖<code>doGet()</code>或<code>doPost()</code>方法。</p><p>当<code>servlet</code>的请求进入时，Web容器首先将调用<code>servlet</code>的<code>service()</code>方法，并根据<code>service()</code>方法的请求类型来调用<code>doGet()</code>或<code>doPost()</code>方法)。</p><blockquote><p>注意：默认情况下，请求是<code>Get</code>请求。</p></blockquote><p>创建一个类：<em>MyServlet.java</em>，并将这个类文件放在<em>F:\worksp\servlet\First</em>目录下，其代码如下所示 - </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> </span></span><br><span class="line"><span class="function">                     <span class="keyword">throws</span> ServletException, IOException </span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">   response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">   PrintWriter out = response.getWriter();</span><br><span class="line">   out.println(<span class="string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>);</span><br><span class="line">   out.println(<span class="string">&quot;&lt;h2 style=&#x27;text-align:center&#x27;&gt;Hello Servlet ~&lt;/h2&gt;&quot;</span>);</span><br><span class="line">   out.println(<span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>然后编译它(在下一步中解释)，并将类生成的<em>MyServlet.class</em>文件粘贴到<em>WEB-INF/classes/<em>目录中，此</em>WEB-INF/classes/<em>目录必须在</em>Tomcat/webapps</em>目录中创建。</p><h2 id="3-编译Servlet类"><a href="#3-编译Servlet类" class="headerlink" title="3.编译Servlet类"></a>3.编译Servlet类</h2><p>要编译Servlet，需要一个JAR文件。不同的服务器需要不同的JAR文件。在Apache Tomcat服务器需要的是<code>servlet-api.jar</code>文件来编译servlet类。</p><p>编译Servlet的步骤如下 - </p><ul><li>首先需要确定是否已将JDK加到系统环境变量中，可通过在命令行上输入验证：<code>java -version</code>，如已添加，则应该返回类似的结果 -<br><img src="http://www.yiibai.com/uploads/images/201710/0910/419161018_61766.png" alt="img"></li><li>下载<code>servlet-api.jar</code>文件，下载地址：<a href="http://mvnrepository.com/artifact/javax.servlet/servlet-api/3.0-alpha-1">http://mvnrepository.com/artifact/javax.servlet/servlet-api/3.0-alpha-1</a> 或者从Tomcat的安装目录：<em>D:\software\apache-tomcat-8.5.23\lib</em> 中找到。</li><li>将下载好的<code>servlet-api.jar</code>文件粘贴到一个目录，如：<code>F:\worksp\servlet\library</code>目录下，用于编译<code>Servlet</code>类。</li><li>编译<code>MyServlet</code>类，如下所示 - </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">F:\worksp\servlet\First&gt; javac -Djava.ext.dirs=F:\worksp\servlet\library MyServlet.java</span><br><span class="line">Shell</span><br></pre></td></tr></table></figure><p>如果编译没有问题，那么将会在当前目录下生成一个类文件：<em>MyServlet.class</em> ，然后将类文件<em>MyServlet.class</em>粘贴到<code>F:\worksp\servlet\First\WEB-INF\classes</code>目录中。</p><h2 id="4-创建部署描述符"><a href="#4-创建部署描述符" class="headerlink" title="4.创建部署描述符"></a>4.创建部署描述符</h2><p>部署描述符(DD)是由Web容器用于运行Servlet和JSP页面的XML文档。部署描述符用于完成几个重要的工作，如：</p><ul><li>将URL映射到Servlet类</li><li>初始化参数</li><li>定义错误页面</li><li>安全角色</li><li>声明标签库</li></ul><p>稍后将详细讨论所有这些。现在来看看我们为这个Web应用程序创建一个简单的<code>web.xml</code>文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;2.5&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>MyFirstServlet<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--// 默认主页--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span><span class="comment">&lt;!--// 类的显示名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span><span class="comment">&lt;!--// 类的别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span><span class="comment">&lt;!--// 类的名称 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span><span class="comment">&lt;!--// 类的别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span><span class="comment">&lt;!--// 请求此类的对应URL --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line">XML</span><br></pre></td></tr></table></figure><p><strong>web.xml文件元素的说明</strong></p><p><code>web.xml</code>文件中的元素太多。以下是上述<code>web.xml</code>文件中使用的一些元素的说明 - </p><ul><li><code>&lt;web-app&gt;</code>表示整个应用程序。</li><li><code>&lt;servlet&gt;</code>是<code>&lt;web-app&gt;</code>的子元素，代表servlet。</li><li><code>&lt;servlet-name&gt;</code>是<code>&lt;servlet&gt;</code>的子元素，表示servlet的名称。</li><li><code>&lt;servlet-class&gt;</code>是<code>&lt;servlet&gt;</code>的子元素，表示servlet的类。</li><li><code>&lt;servlet-mapping&gt;</code>是<code>&lt;web-app&gt;</code>的子元素。它用于映射servlet。</li><li><code>&lt;url-pattern&gt;</code>是<code>&lt;servlet-mapping&gt;</code>的子元素。客户端使用此模式来调用servlet。</li></ul><h2 id="5-启动服务器并部署应用程序"><a href="#5-启动服务器并部署应用程序" class="headerlink" title="5.启动服务器并部署应用程序"></a>5.启动服务器并部署应用程序</h2><p>将目录<em>F:\worksp\servlet\First</em> 拷贝到 <em>D:\software\apache-tomcat-8.5.23\webapps</em> 下部署这个应用程序。</p><p>双击<code>startup.bat</code>文件启动Apache Tomcat服务器。</p><p>或者，在Windows机器上在命令行提示执行以下命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\software\apache-tomcat-8.5.23\bin&gt; startup.bat</span><br><span class="line">Shell</span><br></pre></td></tr></table></figure><p>运行Servlet应用程序，打开浏览器输入并访问网址：http:localhost:8080/First/hello ，应该会看到类似的结果 - </p><p><img src="http://www.yiibai.com/uploads/images/201710/0910/110171044_14202.png" alt="img"></p><p>这样，我们的第一个Servlet应用程序就成功运行了。</p>]]></content>
      
      
      <categories>
          
          <category> SERVLET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SERVLET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01.servlet API</title>
      <link href="/2022/04/27/serlvet/01.Servlet%20API/"/>
      <url>/2022/04/27/serlvet/01.Servlet%20API/</url>
      
        <content type="html"><![CDATA[<p><code>javax.servlet</code>和<code>javax.servlet.http</code>包表示servlet api的接口和类。</p><p><code>javax.servlet</code>包中包含servlet或Web容器使用的许多接口和类。这些接口不是特定于任何协议。</p><p><code>javax.servlet.http</code>包中包含仅用于负责<code>http</code>请求的接口和类。</p><p>下面来看看<code>javax.servlet</code>包的接口有哪些？</p><h2 id="javax-servlet包中的接口"><a href="#javax-servlet包中的接口" class="headerlink" title="javax.servlet包中的接口"></a>javax.servlet包中的接口</h2><p><code>javax.servlet</code>包中有很多接口。它们分别如下所列：</p><ul><li><code>Servlet</code></li><li><code>ServletRequest</code></li><li><code>ServletResponse</code></li><li><code>RequestDispatcher</code></li><li><code>ServletConfig</code></li><li><code>ServletContext</code></li><li><code>SingleThreadModel</code></li><li><code>Filter</code></li><li><code>FilterConfig</code></li><li><code>FilterChain</code></li><li><code>ServletRequestListener</code></li><li><code>ServletRequestAttributeListener</code></li><li><code>ServletContextListener</code></li><li><code>ServletContextAttributeListener</code></li></ul><h2 id="javax-servlet包中的类"><a href="#javax-servlet包中的类" class="headerlink" title="javax.servlet包中的类"></a>javax.servlet包中的类</h2><p><code>javax.servlet</code>包中有很多类。它们分别如下所示：</p><ul><li><code>GenericServlet</code></li><li><code>ServletInputStream</code></li><li><code>ServletOutputStream</code></li><li><code>ServletRequestWrapper</code></li><li><code>ServletResponseWrapper</code></li><li><code>ServletRequestEvent</code></li><li><code>ServletContextEvent</code></li><li><code>ServletRequestAttributeEvent</code></li><li><code>ServletContextAttributeEvent</code></li><li><code>ServletException</code></li><li><code>UnavailableException</code></li></ul><h2 id="javax-servlet-http包中的接口"><a href="#javax-servlet-http包中的接口" class="headerlink" title="javax.servlet.http包中的接口"></a>javax.servlet.http包中的接口</h2><p><code>javax.servlet.http</code>包中有很多接口。它们分别如下所示：</p><ul><li><code>HttpServletRequest</code></li><li><code>HttpServletResponse</code></li><li><code>HttpSession</code></li><li><code>HttpSessionListener</code></li><li><code>HttpSessionAttributeListener</code></li><li><code>HttpSessionBindingListener</code></li><li><code>HttpSessionActivationListener</code></li><li><code>HttpSessionContext</code> (注：过时，已弃用)</li></ul><h2 id="javax-servlet-http包中的类"><a href="#javax-servlet-http包中的类" class="headerlink" title="javax.servlet.http包中的类"></a>javax.servlet.http包中的类</h2><p><code>javax.servlet.http</code>包中有很多类。它们分别如下所示：</p><ul><li><code>HttpServlet</code></li><li><code>Cookie</code></li><li><code>HttpServletRequestWrapper</code></li><li><code>HttpServletResponseWrapper</code></li><li><code>HttpSessionEvent</code></li><li><code>HttpSessionBindingEvent</code></li><li><code>HttpUtils</code>(注：过时，已弃用)</li></ul>]]></content>
      
      
      <categories>
          
          <category> SERVLET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SERVLET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>00.servlet简介</title>
      <link href="/2022/04/27/serlvet/00.servlet%E7%AE%80%E4%BB%8B/"/>
      <url>/2022/04/27/serlvet/00.servlet%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p>Servlet技术是一种基于Java语言，用于创建Web应用程序(处在服务器端并生成动态网页)。</p><p>由于java语言，Servlet技术变得可靠并且可扩展。 在Servlet之前，CGI(通用网关接口)脚本语言作为服务器端编程语言很受欢迎，但是这种技术有很多缺点。关于CGI的缺点，在本节的最后部分有说明介绍。</p><p>servlet API中有很多接口和类，如：<code>Servlet</code>，<code>GenericServlet</code>，<code>HttpServlet</code>，<code>ServletRequest</code>，<code>ServletResponse</code>等。</p><h2 id="什么是Servlet？"><a href="#什么是Servlet？" class="headerlink" title="什么是Servlet？"></a>什么是Servlet？</h2><p>Servlet可以通过多种方式进行描述，具体取决于上下文。</p><ul><li>Servlet是一种用于创建Web应用程序的技术。</li><li>Servlet是一个API，它提供了许多接口和类，包括文档。</li><li>Servlet是一个必须实现的接口，用于创建任何servlet。</li><li>Servlet是一个扩展服务器功能并响应传入请求的类。它可以响应任何类型的请求。</li><li>Servlet是部署在服务器上的Web组件，用于创建动态网页。</li></ul><p>参考以下模型 - </p><p><img src="http://www.yiibai.com/uploads/images/201710/0810/365101010_19867.jpg" alt="img"></p><p><strong>以下一些问题，您是否知道？</strong></p><ul><li>什么是Web应用程序，Get和Post请求有什么区别？</li><li>如果请求一个servlet，Web服务器收到什么信息？</li><li>如何在Eclipse，MyEclipse和Netbeans IDE中运行servlet？</li><li>Servlet协作的方式是什么？<code>RequestDispatcher</code>和<code>sendRedirect()</code>方法有什么区别？</li><li>ServletConfig和ServletContext接口有什么区别？</li><li>可以维持用户状态的方式有多少？ 哪种方法主要用于Web开发？</li><li>使用过滤器来计算访问者总数和请求的总响应时间？</li><li>如何使用注释运行servlet？</li><li>如何使用Servlet和MySQL数据库创建注册表？</li><li>如何从服务器上传和下载文件？</li></ul><p>在本教程中，我们将通过一个个的实例来讲解说明。学习完本教程后，相信您对上述问题有所了解。</p><h2 id="什么是Web应用程序？"><a href="#什么是Web应用程序？" class="headerlink" title="什么是Web应用程序？"></a>什么是Web应用程序？</h2><p>Web应用程序是可从Web访问的应用程序。Web应用程序由Web组件(如：<a href="http://www.yiibai.com/servlet/">Servlet</a>，<a href="http://www.yiibai.com/jsp/">JSP</a>，Filter等)和其他组件(如HTML)组成。 Web组件通常在Web服务器中执行并响应HTTP请求。</p><h2 id="CGI-通用网关接口"><a href="#CGI-通用网关接口" class="headerlink" title="CGI(通用网关接口)"></a>CGI(通用网关接口)</h2><p>CGI技术使Web服务器能够调用外部程序，并将HTTP请求信息传递给外部程序来处理请求。 对于每个请求，它启动一个新的进程。</p><p><img src="http://www.yiibai.com/uploads/images/201710/0810/324101017_22567.jpg" alt="img"></p><h2 id="CGI的缺点"><a href="#CGI的缺点" class="headerlink" title="CGI的缺点"></a>CGI的缺点</h2><p>CGI技术有很多问题：</p><ul><li>如果客户端数量增加，发送响应需要更多的时间。</li><li>对于每个请求，它启动一个进程，一般情况下Web服务器会被操作系统限制启动进程。</li><li>它使用平台依赖语言，例如：C语言，<a href="http://www.yiibai.com/cplusplus/">C++</a>，<a href="http://www.yiibai.com/perl/">perl</a>。</li></ul><h2 id="Servlet的优势"><a href="#Servlet的优势" class="headerlink" title="Servlet的优势"></a>Servlet的优势</h2><p>Servlet的工作模型如下 - </p><p><img src="http://www.yiibai.com/uploads/images/201710/0810/226101020_91047.jpg" alt="img"></p><p>Servlet比CGI有很多优点。Web容器创建用于处理对servlet的多个请求的线程。 线程具有比进程多得多的优点，如共享共享内存区域，轻量级，线程之间的通信成本低。Servlet的基本好处如下：</p><ul><li><em>更好的性能</em>：因为它为每个请求创建一个线程，而不是进程。</li><li><em>更便携，可移植</em>：因为它使用java语言，具有Java语言的特性。</li><li><em>更强大</em>：Servlet由JVM管理，所以不需要担心内存泄漏，垃圾收集等。</li><li><em>更安全</em>：因为它使用java语言，具有Java语言的特性。</li></ul><h2 id="读者"><a href="#读者" class="headerlink" title="读者"></a>读者</h2><p>本教程是专为Servlet初学者而准备的，通过简单的步骤帮助他们来了解和学习Servlet基础知识。 完成本教程的学习后，您将发现自己在Servlet编程方面具有一定的专业知识水平，进而能更容易地学习Servlet编程中更深层次的技术和知识。</p><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>Servlet使用Java语言编程，所以如果你知道或熟悉Java语法，那么将很容易学习Servlet。 此外，如果您没有Java专业知识，但如果您有其它任何其他编程语言(如C语言，C++或Python)的基础，那么也将有助于快速掌握Servlet编程技术。所需技术有 - </p><ul><li>Java编程基础</li><li>HTML基础</li></ul><h2 id="问题反馈"><a href="#问题反馈" class="headerlink" title="问题反馈"></a>问题反馈</h2><p>我们不能保证您在学习此Servlet教程的过程中不会遇到任何问题。本教程中的讲解，示例和代码等只是根据作者的理解来概括写出。由于作者水平和能力有限，因此不保正所有编写的文章都准确无误。但是如果有遇到任何错误或问题，请反馈给我们，我们会及时纠正以方便后续读者阅读。</p>]]></content>
      
      
      <categories>
          
          <category> SERVLET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SERVLET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>19.jdbc 流 ASCLL和二进制数据</title>
      <link href="/2022/04/26/JDBC/19.JDBC%E6%B5%81ASCII%E5%92%8C%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E6%8D%AE/"/>
      <url>/2022/04/26/JDBC/19.JDBC%E6%B5%81ASCII%E5%92%8C%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><p><code>PreparedStatement</code>对象可以使用输入和输出流来提供参数数据。能够将整个文件放入可以容纳大值的数据库列，例如<code>CLOB</code>和<code>BLOB</code>数据类型。</p><p>有以下方法可用于流式传输数据 -</p><ul><li><code>setAsciiStream()</code>：此方法用于提供大的ASCII值。</li><li><code>setCharacterStream()</code>：此方法用于提供较大的UNICODE值。</li><li><code>setBinaryStream()</code>：此方法用于提供较大的二进制值。</li></ul><p><code>setXXXStream()</code>方法除了参数占位符之外还需要额外的参数和文件大小。此参数通知驱动程序使用流向数据库发送多少数据。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>考虑要将XML文件<code>xml_data.xml</code>上传到数据库表中。下面是XML文件的内容 -</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Employee</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>125<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">first</span>&gt;</span>Max<span class="tag">&lt;/<span class="name">first</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">last</span>&gt;</span>Su<span class="tag">&lt;/<span class="name">last</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Salary</span>&gt;</span>18000<span class="tag">&lt;/<span class="name">Salary</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Dob</span>&gt;</span>18-08-1978<span class="tag">&lt;/<span class="name">Dob</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Employee</span>&gt;</span></span><br><span class="line">XML</span><br></pre></td></tr></table></figure><p>将此XML文件保存在要运行此示例的同一目录中。</p><p>此示例将在数据库创建一个表：<em>xml_data</em>，然后将文件<code>xml_data.xml</code>上传到此表中。</p><p>复制以下示例代码，并保存在文件：<em>StreamingData.java</em> 中，编译并运行如下 -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Import required packages</span></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamingData</span> </span>&#123;</span><br><span class="line">   <span class="comment">// JDBC driver name and database URL</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String JDBC_DRIVER = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;  </span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String DB_URL = <span class="string">&quot;jdbc:mysql://localhost/EMP&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//  Database credentials</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String USER = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String PASS = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   Connection conn = <span class="keyword">null</span>;</span><br><span class="line">   PreparedStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line">   Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">   ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="comment">// Register JDBC driver</span></span><br><span class="line">      Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Open a connection</span></span><br><span class="line">      System.out.println(<span class="string">&quot;Connecting to database...&quot;</span>);</span><br><span class="line">      conn = DriverManager.getConnection(DB_URL,USER,PASS);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//Create a Statement object and build table</span></span><br><span class="line">      stmt = conn.createStatement();</span><br><span class="line">      createXMLTable(stmt);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//Open a FileInputStream</span></span><br><span class="line">      File f = <span class="keyword">new</span> File(<span class="string">&quot;xml_data.xml&quot;</span>);</span><br><span class="line">      <span class="keyword">long</span> fileLength = f.length();</span><br><span class="line">      FileInputStream fis = <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//Create PreparedStatement and stream data</span></span><br><span class="line">      String SQL = <span class="string">&quot;INSERT INTO XML_Data VALUES (?,?)&quot;</span>;</span><br><span class="line">      pstmt = conn.prepareStatement(SQL);</span><br><span class="line">      pstmt.setInt(<span class="number">1</span>,<span class="number">125</span>);</span><br><span class="line">      pstmt.setAsciiStream(<span class="number">2</span>,fis,(<span class="keyword">int</span>)fileLength);</span><br><span class="line">      pstmt.execute();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//Close input stream</span></span><br><span class="line">      fis.close();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Do a query to get the row</span></span><br><span class="line">      SQL = <span class="string">&quot;SELECT Data FROM XML_Data WHERE id=125&quot;</span>;</span><br><span class="line">      rs = stmt.executeQuery (SQL);</span><br><span class="line">      <span class="comment">// Get the first row</span></span><br><span class="line">      <span class="keyword">if</span> (rs.next ())&#123;</span><br><span class="line">         <span class="comment">//Retrieve data from input stream</span></span><br><span class="line">         InputStream xmlInputStream = rs.getAsciiStream (<span class="number">1</span>);</span><br><span class="line">         <span class="keyword">int</span> c;</span><br><span class="line">         ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">         <span class="keyword">while</span> (( c = xmlInputStream.read ()) != -<span class="number">1</span>)</span><br><span class="line">            bos.write(c);</span><br><span class="line">         <span class="comment">//Print results</span></span><br><span class="line">         System.out.println(bos.toString());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Clean-up environment</span></span><br><span class="line">      rs.close();</span><br><span class="line">      stmt.close();</span><br><span class="line">      pstmt.close();</span><br><span class="line">      conn.close();</span><br><span class="line">   &#125;<span class="keyword">catch</span>(SQLException se)&#123;</span><br><span class="line">      <span class="comment">//Handle errors for JDBC</span></span><br><span class="line">      se.printStackTrace();</span><br><span class="line">   &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">      <span class="comment">//Handle errors for Class.forName</span></span><br><span class="line">      e.printStackTrace();</span><br><span class="line">   &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">      <span class="comment">//finally block used to close resources</span></span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(stmt!=<span class="keyword">null</span>)</span><br><span class="line">            stmt.close();</span><br><span class="line">      &#125;<span class="keyword">catch</span>(SQLException se2)&#123;</span><br><span class="line">      &#125;<span class="comment">// nothing we can do</span></span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(pstmt!=<span class="keyword">null</span>)</span><br><span class="line">            pstmt.close();</span><br><span class="line">      &#125;<span class="keyword">catch</span>(SQLException se2)&#123;</span><br><span class="line">      &#125;<span class="comment">// nothing we can do</span></span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)</span><br><span class="line">            conn.close();</span><br><span class="line">      &#125;<span class="keyword">catch</span>(SQLException se)&#123;</span><br><span class="line">         se.printStackTrace();</span><br><span class="line">      &#125;<span class="comment">//end finally try</span></span><br><span class="line">   &#125;<span class="comment">//end try</span></span><br><span class="line">   System.out.println(<span class="string">&quot;Goodbye!&quot;</span>);</span><br><span class="line">&#125;<span class="comment">//end main</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createXMLTable</span><span class="params">(Statement stmt)</span> </span></span><br><span class="line"><span class="function">   <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;Creating XML_Data table...&quot;</span> );</span><br><span class="line">   <span class="comment">//Create SQL Statement</span></span><br><span class="line">   String streamingDataSql = <span class="string">&quot;CREATE TABLE XML_Data &quot;</span> +</span><br><span class="line">                             <span class="string">&quot;(id INTEGER, Data LONG)&quot;</span>;</span><br><span class="line">   <span class="comment">//Drop table first if it exists.</span></span><br><span class="line">   <span class="keyword">try</span>&#123;</span><br><span class="line">      stmt.executeUpdate(<span class="string">&quot;DROP TABLE XML_Data&quot;</span>);</span><br><span class="line">   &#125;<span class="keyword">catch</span>(SQLException se)&#123;</span><br><span class="line">   &#125;<span class="comment">// do nothing</span></span><br><span class="line">   <span class="comment">//Build table.</span></span><br><span class="line">   stmt.executeUpdate(streamingDataSql);</span><br><span class="line">&#125;<span class="comment">//end createXMLTable</span></span><br><span class="line">&#125;<span class="comment">//end JDBCExample</span></span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>执行上面编译后的代码，得到以下结果 - </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Connecting to database...</span><br><span class="line">Thu Jun 01 21:42:00 CST 2017 WARN: Establishing SSL connection without server&#x27;s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn&#x27;t set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to &#x27;false&#x27;. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification.</span><br><span class="line">Creating XML_Data table...</span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;Employee&gt;</span><br><span class="line">        &lt;id&gt;125&lt;/id&gt;</span><br><span class="line">        &lt;first&gt;Max&lt;/first&gt;</span><br><span class="line">        &lt;last&gt;Su&lt;/last&gt;</span><br><span class="line">        &lt;Salary&gt;18000&lt;/Salary&gt;</span><br><span class="line">        &lt;Dob&gt;18-08-1978&lt;/Dob&gt;</span><br><span class="line">&lt;Employee&gt;</span><br><span class="line">Goodbye!</span><br></pre></td></tr></table></figure><p>在执行上面语句后，将在数据库：<code>emp</code>下创建一个名称为：<code>xml_data</code>的表，现在查询<code>xml_data</code>表中的数据，如下所示 - </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select * from xml_data;</span></span><br><span class="line">+-----+-----------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| id  | Data                                                                                                                              |</span><br><span class="line">+-----+-----------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| 125 | &lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;Employee&gt;</span><br><span class="line">    &lt;id&gt;125&lt;/id&gt;</span><br><span class="line">    &lt;first&gt;Max&lt;/first&gt;</span><br><span class="line">    &lt;last&gt;Su&lt;/last&gt;</span><br><span class="line">    &lt;Salary&gt;18000&lt;/Salary&gt;</span><br><span class="line">    &lt;Dob&gt;18-08-1978&lt;/Dob&gt;</span><br><span class="line">&lt;Employee&gt; |</span><br><span class="line">+-----+-----------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">1 row in set</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>18. jdbc存储过程调用</title>
      <link href="/2022/04/26/JDBC/18.JDBC%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8%20/"/>
      <url>/2022/04/26/JDBC/18.JDBC%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8%20/</url>
      
        <content type="html"><![CDATA[<h2 id="在讨论JDBC-Statement教程文章时，我们已经学习了如何在JDBC中使用存储过程。-本教程文章与该部分类似，但它将讲解演示有关JDBC-SQL转义语法的其他信息。"><a href="#在讨论JDBC-Statement教程文章时，我们已经学习了如何在JDBC中使用存储过程。-本教程文章与该部分类似，但它将讲解演示有关JDBC-SQL转义语法的其他信息。" class="headerlink" title="在讨论JDBC Statement教程文章时，我们已经学习了如何在JDBC中使用存储过程。 本教程文章与该部分类似，但它将讲解演示有关JDBC SQL转义语法的其他信息。"></a>在讨论<a href="http://www.yiibai.com/jdbc/jdbc-statements.html">JDBC Statement教程</a>文章时，我们已经学习了如何在JDBC中使用存储过程。 本教程文章与该部分类似，但它将讲解演示有关JDBC SQL转义语法的其他信息。</h2><p>就像<code>Connection</code>对象创建<code>Statement</code>和<code>PreparedStatement</code>对象一样，它可使用同样的方式创建<code>CallableStatement</code>对象，该对象将用于执行对数据库存储过程的调用。</p><h2 id="创建CallableStatement对象"><a href="#创建CallableStatement对象" class="headerlink" title="创建CallableStatement对象"></a>创建CallableStatement对象</h2><p>假设需要执行以下Oracle存储过程 -</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">PROCEDURE</span> getEmpName </span><br><span class="line">   (EMP_ID <span class="keyword">IN</span> NUMBER, EMP_FIRST <span class="keyword">OUT</span> <span class="type">VARCHAR</span>) <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">SELECT</span> <span class="keyword">first</span> <span class="keyword">INTO</span> EMP_FIRST</span><br><span class="line">   <span class="keyword">FROM</span> Employees</span><br><span class="line">   <span class="keyword">WHERE</span> ID <span class="operator">=</span> EMP_ID;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：上面的存储过程是为Oracle编写的，但是如果使用MySQL数据库，参考以下代码为MySQL编写相同的存储过程，如下在<code>EMP</code>数据库中创建它 -</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> IF <span class="keyword">EXISTS</span> `EMP`.`getEmpName` $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> `EMP`.`getEmpName` </span><br><span class="line">   (<span class="keyword">IN</span> EMP_ID <span class="type">INT</span>, <span class="keyword">OUT</span> EMP_FIRST <span class="type">VARCHAR</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">SELECT</span> <span class="keyword">first</span> <span class="keyword">INTO</span> EMP_FIRST</span><br><span class="line">   <span class="keyword">FROM</span> Employees</span><br><span class="line">   <span class="keyword">WHERE</span> ID <span class="operator">=</span> EMP_ID;</span><br><span class="line"><span class="keyword">END</span> $$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"><span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><p>存在三种类型的参数：<code>IN</code>，<code>OUT</code>和<code>INOUT</code>。 <code>PreparedStatement</code>对象只使用<code>IN</code>参数。 <code>CallableStatement</code>对象可以使用上面三种类型参数。</p><p>以下是上面三种类型参数的定义 -</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>IN</td><td>创建SQL语句时其参数值是未知的。 使用<code>setXXX()</code>方法将值绑定到<code>IN</code>参数。</td></tr><tr><td>OUT</td><td>由SQL语句返回的参数值。可以使用<code>getXXX()</code>方法从OUT参数中检索值。</td></tr><tr><td>INOUT</td><td>提供输入和输出值的参数。使用<code>setXXX()</code>方法绑定变量并使用<code>getXXX()</code>方法检索值。</td></tr></tbody></table><p>以下代码片段显示了如何使用<code>Connection.prepareCall()</code>方法根据上述存储过程来实例化一个<code>CallableStatement</code>对象 -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CallableStatement cstmt = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   String str = <span class="string">&quot;&#123;call getEmpName (?, ?)&#125;&quot;</span>;</span><br><span class="line">   cstmt = conn.prepareCall (SQL);</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>String变量<code>str</code>表示存储过程，带有参数占位符。</p><p>使用<code>CallableStatement</code>对象与使用<code>PreparedStatement</code>对象很像。 在执行语句之前，必须将值绑定到所有参数，否则将收到一个<code>SQLException</code>异常。</p><p>如果有<code>IN</code>参数，只需遵循适用于<code>PreparedStatement</code>对象的相同规则和技术; 使用与绑定的Java数据类型相对应的<code>setXXX()</code>方法。</p><p>使用<code>OUT</code>和<code>INOUT</code>参数时，必须使用一个额外的<code>CallableStatement</code>对象方法<code>registerOutParameter()</code>。 <code>registerOutParameter()</code>方法将JDBC数据类型绑定到存储过程预期返回的数据类型。</p><p>当调用存储过程后，可以使用适当的<code>getXXX()</code>方法从<code>OUT</code>参数中检索该值。 此方法将检索到的SQL类型的值转换为Java数据类型。</p><h2 id="关闭CallableStatement对象"><a href="#关闭CallableStatement对象" class="headerlink" title="关闭CallableStatement对象"></a>关闭CallableStatement对象</h2><p>就像关闭其他Statement对象一样，由于同样的原因(节省资源)，还应该关闭<code>CallableStatement</code>对象。</p><p>简单的调用<code>close()</code>方法将执行关闭工作。 如果先关闭<code>Connection</code>对象，它也会关闭<code>CallableStatement</code>对象。 但是，应该始终显式关闭<code>CallableStatement</code>对象，以确保正确的顺序清理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CallableStatement cstmt = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   String SQL = <span class="string">&quot;&#123;call getEmpName (?, ?)&#125;&quot;</span>;</span><br><span class="line">   cstmt = conn.prepareCall (SQL);</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">   cstmt.close();</span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>有关更多的细节，建议学习研究“<a href="http://www.yiibai.com/jdbc/callablestatement-object-example.html">Callable实例代码</a>”</p><h2 id="JDBC-SQL转义语法"><a href="#JDBC-SQL转义语法" class="headerlink" title="JDBC SQL转义语法"></a>JDBC SQL转义语法</h2><p>通过使用标准JDBC方法和属性，转义语法使您能够灵活地使用不可用的数据库特定功能。</p><p>一般SQL转义语法格式如下 -</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;keyword &#x27;parameters&#x27;&#125;</span><br></pre></td></tr></table></figure><p>以下是以下转义序列，在执行JDBC编程时非常有用 -</p><p><strong>d, t, ts关键字</strong></p><p>它们用于帮助确定日期，时间和时间戳文字。没有哪两个DBMS表示时间和日期的方式相同。 该转义语法告诉驱动程序以目标数据库的格式呈现日期或时间。 例如 -</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;d &#x27;yyyy-mm-dd&#x27;&#125;</span><br></pre></td></tr></table></figure><p><code>yyyy</code>=年份，<code>mm</code>=月份; <code>dd</code>=日期。 使用这种语法<code>&#123;d&#39;2019-09-03&#39;&#125;</code>表示的是2019年3月9日。</p><p>这是一个简单的示例，显示如何将日期插入表中 -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Create a Statement object</span></span><br><span class="line">stmt = conn.createStatement();</span><br><span class="line"><span class="comment">//Insert data ==&gt; ID, First Name, Last Name, DOB</span></span><br><span class="line">String sql=<span class="string">&quot;INSERT INTO STUDENTS VALUES&quot;</span> +</span><br><span class="line">             <span class="string">&quot;(100,&#x27;Kobe&#x27;,&#x27;Bryant&#x27;, &#123;d &#x27;2002-12-16&#x27;&#125;)&quot;</span>;</span><br><span class="line"></span><br><span class="line">stmt.executeUpdate(sql);</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>同样，还可以使用以下两种语法：<code>t</code>或<code>ts</code> -</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;t &#x27;hh:mm:ss&#x27;&#125;</span><br></pre></td></tr></table></figure><p>这里，<code>hh</code>=小时，<code>mm</code> =分钟， <code>ss</code> =秒。 使用这种语法<code>&#123;t &#39;13:30:29&#39;&#125;</code>是<code>1:30:29 PM</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;ts &#x27;yyyy-mm-dd hh:mm:ss&#x27;&#125;</span><br></pre></td></tr></table></figure><p>这里“<code>d</code>”和“<code>t</code>”是上述两种语法的组合语法来表示时间戳。</p><p><strong>escape关键字</strong></p><p><code>escape</code>关键字标识<code>LIKE</code>子句中使用转义字符。 使用SQL通配符<code>%</code>(与<code>0</code>个或多个字符匹配)时很有用。 例如 -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">&quot;SELECT symbol FROM MathSymbols</span></span><br><span class="line"><span class="string">              WHERE symbol LIKE &#x27;\%&#x27; &#123;escape &#x27;\&#x27;&#125;&quot;</span>;</span><br><span class="line">stmt.execute(sql);</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>如果使用反斜杠字符(<code>\</code>)作为转义字符，则还必须在Java字符串文字中使用两个反斜杠字符，因为反斜杠也是Java转义字符。</p><p><strong>fn 关键字</strong></p><p>这个关键字表示DBMS中使用的标量函数。 例如，可以使用SQL函数长度来获取字符串的长度 -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="function">fn <span class="title">length</span><span class="params">(<span class="string">&#x27;Hello World&#x27;</span>)</span>&#125;</span></span><br><span class="line"><span class="function">Java</span></span><br></pre></td></tr></table></figure><p>上面语句返回结果值为：<code>11</code>，也就是字符串’<code>Hello World</code>‘的长度。</p><p><strong>call 关键字</strong></p><p>此关键字用于调用存储过程。 例如，对于需要<code>IN</code>参数的存储过程，请使用以下语法 -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="function">call <span class="title">my_procedure</span><span class="params">(?)</span>&#125;</span>;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>对于需要<code>IN</code>参数并返回<code>OUT</code>参数的存储过程，请使用以下语法 -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;? = <span class="function">call <span class="title">my_procedure</span><span class="params">(?)</span>&#125;</span>;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p><strong>oj关键字</strong></p><p>此关键字用于表示外部连接。 语法如下 -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;oj outer-join&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>这里，<em>outer-join = table {LEFT|RIGHT|FULL} OUTERJOIN {table | outer-join}</em> 搜索条件。 例如 - </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">&quot;SELECT Employees </span></span><br><span class="line"><span class="string">              FROM &#123;oj ThisTable RIGHT</span></span><br><span class="line"><span class="string">              OUTER JOIN ThatTable on id = &#x27;100&#x27;&#125;&quot;</span>;</span><br><span class="line">stmt.execute(sql);</span><br><span class="line">Java</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>17.jdbc Prepare statement对象执行批量处理</title>
      <link href="/2022/04/26/JDBC/17.JDBC%20PrepareStatement%E5%AF%B9%E8%B1%A1%E6%89%A7%E8%A1%8C%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86/"/>
      <url>/2022/04/26/JDBC/17.JDBC%20PrepareStatement%E5%AF%B9%E8%B1%A1%E6%89%A7%E8%A1%8C%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="以下是使用PrepareStatement对象进行批处理的典型步骤顺序"><a href="#以下是使用PrepareStatement对象进行批处理的典型步骤顺序" class="headerlink" title="以下是使用PrepareStatement对象进行批处理的典型步骤顺序 -"></a>以下是使用<code>PrepareStatement</code>对象进行批处理的典型步骤顺序 -</h2><ul><li>使用占位符创建SQL语句。</li><li>使用<code>prepareStatement()</code>方法创建<code>PrepareStatement</code>对象。</li><li>使用<code>setAutoCommit()</code>将自动提交设置为<code>false</code>。</li><li>使用<code>addBatch()</code>方法在创建的<code>Statement</code>对象上添加SQL语句到批处理中。</li><li>在创建的<code>Statement</code>对象上使用<code>executeBatch()</code>方法执行所有SQL语句。</li><li>最后，使用<code>commit()</code>方法提交所有更改。</li></ul><p>此示例代码是基于前面章节中完成的环境和数据库设置编写的。</p><p>以下代码片段提供了使用<code>PrepareStatement</code>对象的批量更新示例，将下面代码保存到文件：<em>BatchingWithPrepareStatement.java</em> -</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> Import required packages</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> See more detail <span class="keyword">at</span> http:<span class="operator">/</span><span class="operator">/</span>www.yiibai.com<span class="operator">/</span>jdbc<span class="operator">/</span></span><br><span class="line"></span><br><span class="line">import java.sql.<span class="operator">*</span>;</span><br><span class="line"></span><br><span class="line">public class BatchingWithPrepareStatement &#123;</span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span> JDBC driver name <span class="keyword">and</span> database URL</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String JDBC_DRIVER <span class="operator">=</span> &quot;com.mysql.jdbc.Driver&quot;;  </span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String DB_URL <span class="operator">=</span> &quot;jdbc:mysql://localhost/EMP&quot;;</span><br><span class="line"></span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span>  Database credentials</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String <span class="keyword">USER</span> <span class="operator">=</span> &quot;root&quot;;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String PASS <span class="operator">=</span> &quot;123456&quot;;</span><br><span class="line"></span><br><span class="line">   public <span class="keyword">static</span> void main(String[] args) &#123;</span><br><span class="line">   Connection conn <span class="operator">=</span> <span class="keyword">null</span>;</span><br><span class="line">   PreparedStatement stmt <span class="operator">=</span> <span class="keyword">null</span>;</span><br><span class="line">   try&#123;</span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span> Register JDBC driver</span><br><span class="line">      Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line"></span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span> <span class="keyword">Open</span> a connection</span><br><span class="line">      System.out.println(&quot;Connecting to database...&quot;);</span><br><span class="line">      conn <span class="operator">=</span> DriverManager.getConnection(DB_URL,<span class="keyword">USER</span>,PASS);</span><br><span class="line"></span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span> <span class="keyword">Create</span> <span class="keyword">SQL</span> statement</span><br><span class="line">      String <span class="keyword">SQL</span> <span class="operator">=</span> &quot;INSERT INTO Employees(id,first,last,age) &quot; <span class="operator">+</span></span><br><span class="line">                   &quot;VALUES(?, ?, ?, ?)&quot;;</span><br><span class="line"></span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span> <span class="keyword">Create</span> preparedStatemen</span><br><span class="line">      System.out.println(&quot;Creating statement...&quot;);</span><br><span class="line">      stmt <span class="operator">=</span> conn.prepareStatement(<span class="keyword">SQL</span>);</span><br><span class="line"></span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span> <span class="keyword">Set</span> auto<span class="operator">-</span><span class="keyword">commit</span> <span class="keyword">to</span> <span class="literal">false</span></span><br><span class="line">      conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span> <span class="keyword">First</span>, let us <span class="keyword">select</span> <span class="keyword">all</span> the records <span class="keyword">and</span> display them.</span><br><span class="line">      printRows( stmt );</span><br><span class="line"></span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span> <span class="keyword">Set</span> the variables</span><br><span class="line">      stmt.setInt( <span class="number">1</span>, <span class="number">400</span> );</span><br><span class="line">      stmt.setString( <span class="number">2</span>, &quot;Python&quot; );</span><br><span class="line">      stmt.setString( <span class="number">3</span>, &quot;Zhang&quot; );</span><br><span class="line">      stmt.setInt( <span class="number">4</span>, <span class="number">33</span> );</span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span> <span class="keyword">Add</span> it <span class="keyword">to</span> the batch</span><br><span class="line">      stmt.addBatch();</span><br><span class="line"></span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span> <span class="keyword">Set</span> the variables</span><br><span class="line">      stmt.setInt( <span class="number">1</span>, <span class="number">401</span> );</span><br><span class="line">      stmt.setString( <span class="number">2</span>, &quot;C++&quot; );</span><br><span class="line">      stmt.setString( <span class="number">3</span>, &quot;Huang&quot; );</span><br><span class="line">      stmt.setInt( <span class="number">4</span>, <span class="number">31</span> );</span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span> <span class="keyword">Add</span> it <span class="keyword">to</span> the batch</span><br><span class="line">      stmt.addBatch();</span><br><span class="line"></span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span> <span class="keyword">Create</span> an <span class="type">int</span>[] <span class="keyword">to</span> <span class="keyword">hold</span> returned <span class="keyword">values</span></span><br><span class="line">      <span class="type">int</span>[] count <span class="operator">=</span> stmt.executeBatch();</span><br><span class="line"></span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span>Explicitly <span class="keyword">commit</span> statements <span class="keyword">to</span> apply changes</span><br><span class="line">      conn.commit();</span><br><span class="line"></span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span> Again, let us <span class="keyword">select</span> <span class="keyword">all</span> the records <span class="keyword">and</span> display them.</span><br><span class="line">      printRows( stmt );</span><br><span class="line"></span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span> Clean<span class="operator">-</span>up environment</span><br><span class="line">      stmt.close();</span><br><span class="line">      conn.close();</span><br><span class="line">   &#125;catch(<span class="keyword">SQLException</span> se)&#123;</span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span>Handle errors <span class="keyword">for</span> JDBC</span><br><span class="line">      se.printStackTrace();</span><br><span class="line">   &#125;catch(Exception e)&#123;</span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span>Handle errors <span class="keyword">for</span> Class.forName</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">   &#125;finally&#123;</span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span>finally block used <span class="keyword">to</span> <span class="keyword">close</span> resources</span><br><span class="line">      try&#123;</span><br><span class="line">         if(stmt<span class="operator">!=</span><span class="keyword">null</span>)</span><br><span class="line">            stmt.close();</span><br><span class="line">      &#125;catch(<span class="keyword">SQLException</span> se2)&#123;</span><br><span class="line">      &#125;<span class="operator">/</span><span class="operator">/</span> nothing we can do</span><br><span class="line">      try&#123;</span><br><span class="line">         if(conn<span class="operator">!=</span><span class="keyword">null</span>)</span><br><span class="line">            conn.close();</span><br><span class="line">      &#125;catch(<span class="keyword">SQLException</span> se)&#123;</span><br><span class="line">         se.printStackTrace();</span><br><span class="line">      &#125;<span class="operator">/</span><span class="operator">/</span><span class="keyword">end</span> finally try</span><br><span class="line">   &#125;<span class="operator">/</span><span class="operator">/</span><span class="keyword">end</span> try</span><br><span class="line">   System.out.println(&quot;Goodbye!&quot;);</span><br><span class="line">&#125;<span class="operator">/</span><span class="operator">/</span><span class="keyword">end</span> main</span><br><span class="line"></span><br><span class="line">public <span class="keyword">static</span> void printRows(Statement stmt) throws <span class="keyword">SQLException</span>&#123;</span><br><span class="line">   System.out.println(&quot;Displaying available rows...&quot;);</span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span> Let us <span class="keyword">select</span> <span class="keyword">all</span> the records <span class="keyword">and</span> display them.</span><br><span class="line">   String <span class="keyword">sql</span> <span class="operator">=</span> &quot;SELECT id, first, last, age FROM Employees&quot;;</span><br><span class="line">   ResultSet rs <span class="operator">=</span> stmt.executeQuery(<span class="keyword">sql</span>);</span><br><span class="line"></span><br><span class="line">   while(rs.next())&#123;</span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span>Retrieve <span class="keyword">by</span> <span class="keyword">column</span> name</span><br><span class="line">      <span class="type">int</span> id  <span class="operator">=</span> rs.getInt(&quot;id&quot;);</span><br><span class="line">      <span class="type">int</span> age <span class="operator">=</span> rs.getInt(&quot;age&quot;);</span><br><span class="line">      String <span class="keyword">first</span> <span class="operator">=</span> rs.getString(&quot;first&quot;);</span><br><span class="line">      String <span class="keyword">last</span> <span class="operator">=</span> rs.getString(&quot;last&quot;);</span><br><span class="line"></span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span>Display <span class="keyword">values</span></span><br><span class="line">      System.out.print(&quot;ID: &quot; <span class="operator">+</span> id);</span><br><span class="line">      System.out.print(&quot;, Age: &quot; <span class="operator">+</span> age);</span><br><span class="line">      System.out.print(&quot;, First: &quot; <span class="operator">+</span> <span class="keyword">first</span>);</span><br><span class="line">      System.out.println(&quot;, Last: &quot; <span class="operator">+</span> <span class="keyword">last</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   System.out.println();</span><br><span class="line">   rs.close();</span><br><span class="line">&#125;<span class="operator">/</span><span class="operator">/</span><span class="keyword">end</span> printRows()</span><br><span class="line">&#125;<span class="operator">/</span><span class="operator">/</span><span class="keyword">end</span> JDBCExample</span><br><span class="line"><span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><p>编译上面代码，如下 - </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">F:\worksp\jdbc&gt;javac -Djava.ext.dirs=F:\worksp\jdbc\libs BatchingWithPrepareStatement.java</span><br><span class="line">Shell</span><br></pre></td></tr></table></figure><p>执行上面代码如下所示 - </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Connecting to database...</span><br><span class="line">Thu Jun 01 04:46:38 CST 2017 WARN: Establishing SSL connection without server&#x27;s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn&#x27;t set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to &#x27;false&#x27;. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification.</span><br><span class="line">Creating statement...</span><br><span class="line">Displaying available rows...</span><br><span class="line">ID: 100, Age: 35, First: Max, Last: Su</span><br><span class="line">ID: 101, Age: 25, First: Wei, Last: Wang</span><br><span class="line">ID: 102, Age: 35, First: Xueyou, Last: Zhang</span><br><span class="line">ID: 103, Age: 30, First: Jack, Last: Ma</span><br><span class="line">ID: 106, Age: 28, First: Curry, Last: Stephen</span><br><span class="line">ID: 107, Age: 32, First: Kobe, Last: Bryant</span><br><span class="line">ID: 200, Age: 30, First: Curry, Last: Stephen</span><br><span class="line">ID: 201, Age: 35, First: Kobe, Last: Bryant</span><br><span class="line"></span><br><span class="line">Displaying available rows...</span><br><span class="line">ID: 100, Age: 35, First: Max, Last: Su</span><br><span class="line">ID: 101, Age: 25, First: Wei, Last: Wang</span><br><span class="line">ID: 102, Age: 35, First: Xueyou, Last: Zhang</span><br><span class="line">ID: 103, Age: 30, First: Jack, Last: Ma</span><br><span class="line">ID: 106, Age: 28, First: Curry, Last: Stephen</span><br><span class="line">ID: 107, Age: 32, First: Kobe, Last: Bryant</span><br><span class="line">ID: 200, Age: 30, First: Curry, Last: Stephen</span><br><span class="line">ID: 201, Age: 35, First: Kobe, Last: Bryant</span><br><span class="line">ID: 400, Age: 33, First: Python, Last: Zhang</span><br><span class="line">ID: 401, Age: 31, First: C++, Last: Huang</span><br><span class="line"></span><br><span class="line">Goodbye!</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>16.jdbc statement对象执行批量处理</title>
      <link href="/2022/04/26/JDBC/16.jdbc%20statement%E5%AF%B9%E8%B1%A1%E6%89%A7%E8%A1%8C%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86/"/>
      <url>/2022/04/26/JDBC/16.jdbc%20statement%E5%AF%B9%E8%B1%A1%E6%89%A7%E8%A1%8C%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="以下是使用Statement对象的批处理的典型步骤序列"><a href="#以下是使用Statement对象的批处理的典型步骤序列" class="headerlink" title="以下是使用Statement对象的批处理的典型步骤序列 -"></a>以下是使用<code>Statement</code>对象的批处理的典型步骤序列 -</h2><ul><li>使用<code>createStatement()</code>方法创建<code>Statement</code>对象。</li><li>使用<code>setAutoCommit()</code>将自动提交设置为<code>false</code>。</li><li>使用<code>addBatch()</code>方法在创建的<code>Statement</code>对象上添加SQL语句到批处理中。</li><li>在创建的<code>Statement</code>对象上使用<code>executeBatch()</code>方法执行所有SQL语句。</li><li>最后，使用<code>commit()</code>方法提交所有更改。</li></ul><p>此示例代码是基于前面章节中完成的环境和数据库设置编写的。</p><p>以下代码片段提供了使用<code>Statement</code>对象的批量更新示例，将下面代码保存到文件：<em>BatchingWithStatement.java</em> -</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> Import required packages</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> See more detail <span class="keyword">at</span> http:<span class="operator">/</span><span class="operator">/</span>www.yiibai.com<span class="operator">/</span>jdbc<span class="operator">/</span></span><br><span class="line"></span><br><span class="line">import java.sql.<span class="operator">*</span>;</span><br><span class="line"></span><br><span class="line">public class BatchingWithStatement &#123;</span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span> JDBC driver name <span class="keyword">and</span> database URL</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String JDBC_DRIVER <span class="operator">=</span> &quot;com.mysql.jdbc.Driver&quot;;  </span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String DB_URL <span class="operator">=</span> &quot;jdbc:mysql://localhost/EMP&quot;;</span><br><span class="line"></span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span>  Database credentials</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String <span class="keyword">USER</span> <span class="operator">=</span> &quot;root&quot;;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String PASS <span class="operator">=</span> &quot;123456&quot;;</span><br><span class="line"></span><br><span class="line">   public <span class="keyword">static</span> void main(String[] args) &#123;</span><br><span class="line">   Connection conn <span class="operator">=</span> <span class="keyword">null</span>;</span><br><span class="line">   Statement stmt <span class="operator">=</span> <span class="keyword">null</span>;</span><br><span class="line">   try&#123;</span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span> Register JDBC driver</span><br><span class="line">      Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line"></span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span> <span class="keyword">Open</span> a connection</span><br><span class="line">      System.out.println(&quot;Connecting to database...&quot;);</span><br><span class="line">      conn <span class="operator">=</span> DriverManager.getConnection(DB_URL,<span class="keyword">USER</span>,PASS);</span><br><span class="line"></span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span> <span class="keyword">Create</span> statement</span><br><span class="line">      System.out.println(&quot;Creating statement...&quot;);</span><br><span class="line">      stmt <span class="operator">=</span> conn.createStatement();</span><br><span class="line"></span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span> <span class="keyword">Set</span> auto<span class="operator">-</span><span class="keyword">commit</span> <span class="keyword">to</span> <span class="literal">false</span></span><br><span class="line">      conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span> <span class="keyword">First</span>, let us <span class="keyword">select</span> <span class="keyword">all</span> the records <span class="keyword">and</span> display them.</span><br><span class="line">      printRows( stmt );</span><br><span class="line"></span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span> <span class="keyword">Create</span> <span class="keyword">SQL</span> statement</span><br><span class="line">      String <span class="keyword">SQL</span> <span class="operator">=</span> &quot;INSERT INTO Employees (id, first, last, age) &quot; <span class="operator">+</span> </span><br><span class="line">                   &quot;VALUES(200,&#x27;Curry&#x27;, &#x27;Stephen&#x27;, 30)&quot;;</span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span> <span class="keyword">Add</span> above <span class="keyword">SQL</span> statement <span class="keyword">in</span> the batch.</span><br><span class="line">      stmt.addBatch(<span class="keyword">SQL</span>);</span><br><span class="line"></span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span> <span class="keyword">Create</span> <span class="keyword">one</span> more <span class="keyword">SQL</span> statement</span><br><span class="line">      <span class="keyword">SQL</span> <span class="operator">=</span> &quot;INSERT INTO Employees (id, first, last, age) &quot; <span class="operator">+</span></span><br><span class="line">            &quot;VALUES(201,&#x27;Kobe&#x27;, &#x27;Bryant&#x27;, 35)&quot;;</span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span> <span class="keyword">Add</span> above <span class="keyword">SQL</span> statement <span class="keyword">in</span> the batch.</span><br><span class="line">      stmt.addBatch(<span class="keyword">SQL</span>);</span><br><span class="line"></span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span> <span class="keyword">Create</span> <span class="keyword">one</span> more <span class="keyword">SQL</span> statement</span><br><span class="line">      <span class="keyword">SQL</span> <span class="operator">=</span> &quot;UPDATE Employees SET age = 35 &quot; <span class="operator">+</span></span><br><span class="line">            &quot;WHERE id = 100&quot;;</span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span> <span class="keyword">Add</span> above <span class="keyword">SQL</span> statement <span class="keyword">in</span> the batch.</span><br><span class="line">      stmt.addBatch(<span class="keyword">SQL</span>);</span><br><span class="line"></span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span> <span class="keyword">Create</span> an <span class="type">int</span>[] <span class="keyword">to</span> <span class="keyword">hold</span> returned <span class="keyword">values</span></span><br><span class="line">      <span class="type">int</span>[] count <span class="operator">=</span> stmt.executeBatch();</span><br><span class="line"></span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span>Explicitly <span class="keyword">commit</span> statements <span class="keyword">to</span> apply changes</span><br><span class="line">      conn.commit();</span><br><span class="line"></span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span> Again, let us <span class="keyword">select</span> <span class="keyword">all</span> the records <span class="keyword">and</span> display them.</span><br><span class="line">      printRows( stmt );</span><br><span class="line"></span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span> Clean<span class="operator">-</span>up environment</span><br><span class="line">      stmt.close();</span><br><span class="line">      conn.close();</span><br><span class="line">   &#125;catch(<span class="keyword">SQLException</span> se)&#123;</span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span>Handle errors <span class="keyword">for</span> JDBC</span><br><span class="line">      se.printStackTrace();</span><br><span class="line">   &#125;catch(Exception e)&#123;</span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span>Handle errors <span class="keyword">for</span> Class.forName</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">   &#125;finally&#123;</span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span>finally block used <span class="keyword">to</span> <span class="keyword">close</span> resources</span><br><span class="line">      try&#123;</span><br><span class="line">         if(stmt<span class="operator">!=</span><span class="keyword">null</span>)</span><br><span class="line">            stmt.close();</span><br><span class="line">      &#125;catch(<span class="keyword">SQLException</span> se2)&#123;</span><br><span class="line">      &#125;<span class="operator">/</span><span class="operator">/</span> nothing we can do</span><br><span class="line">      try&#123;</span><br><span class="line">         if(conn<span class="operator">!=</span><span class="keyword">null</span>)</span><br><span class="line">            conn.close();</span><br><span class="line">      &#125;catch(<span class="keyword">SQLException</span> se)&#123;</span><br><span class="line">         se.printStackTrace();</span><br><span class="line">      &#125;<span class="operator">/</span><span class="operator">/</span><span class="keyword">end</span> finally try</span><br><span class="line">   &#125;<span class="operator">/</span><span class="operator">/</span><span class="keyword">end</span> try</span><br><span class="line">   System.out.println(&quot;Goodbye!&quot;);</span><br><span class="line">&#125;<span class="operator">/</span><span class="operator">/</span><span class="keyword">end</span> main</span><br><span class="line"></span><br><span class="line">public <span class="keyword">static</span> void printRows(Statement stmt) throws <span class="keyword">SQLException</span>&#123;</span><br><span class="line">   System.out.println(&quot;Displaying available rows...&quot;);</span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span> Let us <span class="keyword">select</span> <span class="keyword">all</span> the records <span class="keyword">and</span> display them.</span><br><span class="line">   String <span class="keyword">sql</span> <span class="operator">=</span> &quot;SELECT id, first, last, age FROM Employees&quot;;</span><br><span class="line">   ResultSet rs <span class="operator">=</span> stmt.executeQuery(<span class="keyword">sql</span>);</span><br><span class="line"></span><br><span class="line">   while(rs.next())&#123;</span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span>Retrieve <span class="keyword">by</span> <span class="keyword">column</span> name</span><br><span class="line">      <span class="type">int</span> id  <span class="operator">=</span> rs.getInt(&quot;id&quot;);</span><br><span class="line">      <span class="type">int</span> age <span class="operator">=</span> rs.getInt(&quot;age&quot;);</span><br><span class="line">      String <span class="keyword">first</span> <span class="operator">=</span> rs.getString(&quot;first&quot;);</span><br><span class="line">      String <span class="keyword">last</span> <span class="operator">=</span> rs.getString(&quot;last&quot;);</span><br><span class="line"></span><br><span class="line">      <span class="operator">/</span><span class="operator">/</span>Display <span class="keyword">values</span></span><br><span class="line">      System.out.print(&quot;ID: &quot; <span class="operator">+</span> id);</span><br><span class="line">      System.out.print(&quot;, Age: &quot; <span class="operator">+</span> age);</span><br><span class="line">      System.out.print(&quot;, First: &quot; <span class="operator">+</span> <span class="keyword">first</span>);</span><br><span class="line">      System.out.println(&quot;, Last: &quot; <span class="operator">+</span> <span class="keyword">last</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   System.out.println();</span><br><span class="line">   rs.close();</span><br><span class="line">&#125;<span class="operator">/</span><span class="operator">/</span><span class="keyword">end</span> printRows()</span><br><span class="line">&#125;<span class="operator">/</span><span class="operator">/</span><span class="keyword">end</span> JDBCExample</span><br><span class="line"><span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><p>编译上面代码，如下 - </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">F:\worksp\jdbc&gt;javac -Djava.ext.dirs=F:\worksp\jdbc\libs BatchingWithStatement.java</span><br><span class="line">Shell</span><br></pre></td></tr></table></figure><p>执行上面代码如下所示 - </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">F:\worksp\jdbc&gt;java -Djava.ext.dirs=F:\worksp\jdbc\libs BatchingWithStatement</span><br><span class="line">Connecting to database...</span><br><span class="line">Thu Jun 01 04:41:05 CST 2017 WARN: Establishing SSL connection without server&#x27;s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn&#x27;t set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to &#x27;false&#x27;. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification.</span><br><span class="line">Creating statement...</span><br><span class="line">Displaying available rows...</span><br><span class="line">ID: 100, Age: 28, First: Max, Last: Su</span><br><span class="line">ID: 101, Age: 25, First: Wei, Last: Wang</span><br><span class="line">ID: 102, Age: 35, First: Xueyou, Last: Zhang</span><br><span class="line">ID: 103, Age: 30, First: Jack, Last: Ma</span><br><span class="line">ID: 106, Age: 28, First: Curry, Last: Stephen</span><br><span class="line">ID: 107, Age: 32, First: Kobe, Last: Bryant</span><br><span class="line"></span><br><span class="line">Displaying available rows...</span><br><span class="line">ID: 100, Age: 35, First: Max, Last: Su</span><br><span class="line">ID: 101, Age: 25, First: Wei, Last: Wang</span><br><span class="line">ID: 102, Age: 35, First: Xueyou, Last: Zhang</span><br><span class="line">ID: 103, Age: 30, First: Jack, Last: Ma</span><br><span class="line">ID: 106, Age: 28, First: Curry, Last: Stephen</span><br><span class="line">ID: 107, Age: 32, First: Kobe, Last: Bryant</span><br><span class="line">ID: 200, Age: 30, First: Curry, Last: Stephen</span><br><span class="line">ID: 201, Age: 35, First: Kobe, Last: Bryant</span><br><span class="line"></span><br><span class="line">Goodbye!</span><br><span class="line"></span><br><span class="line">F:\worksp\jdbc&gt;</span><br><span class="line">Shell</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15. jdbc批量处理</title>
      <link href="/2022/04/26/JDBC/15.jdbc%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86/"/>
      <url>/2022/04/26/JDBC/15.jdbc%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="批量处理允许将相关的SQL语句分组到批处理中，并通过对数据库的一次调用来提交它们，一次执行完成与数据库之间的交互。"><a href="#批量处理允许将相关的SQL语句分组到批处理中，并通过对数据库的一次调用来提交它们，一次执行完成与数据库之间的交互。" class="headerlink" title="批量处理允许将相关的SQL语句分组到批处理中，并通过对数据库的一次调用来提交它们，一次执行完成与数据库之间的交互。"></a>批量处理允许将相关的SQL语句分组到批处理中，并通过对数据库的一次调用来提交它们，一次执行完成与数据库之间的交互。</h2><p>一次向数据库发送多个SQL语句时，可以减少通信开销，从而提高性能。</p><ul><li>不需要JDBC驱动程序来支持此功能。应该使用<code>DatabaseMetaData.supportsBatchUpdates()</code>方法来确定目标数据库是否支持批量更新处理。如果JDBC驱动程序支持此功能，该方法将返回<code>true</code>。</li><li><code>Statement</code>，<code>PreparedStatement</code>和<code>CallableStatement</code>的<code>addBatch()</code>方法用于将单个语句添加到批处理。 <code>executeBatch()</code>用于执行组成批量的所有语句。</li><li><code>executeBatch()</code>返回一个整数数组，数组的每个元素表示相应更新语句的更新计数。</li><li>就像将批处理语句添加到处理中一样，可以使用<code>clearBatch()</code>方法删除它们。此方法将删除所有使用<code>addBatch()</code>方法添加的语句。 但是，无法指定选择某个要删除的语句。</li></ul><h2 id="使用Statement对象进行批处理"><a href="#使用Statement对象进行批处理" class="headerlink" title="使用Statement对象进行批处理"></a>使用Statement对象进行批处理</h2><p>以下是使用<code>Statement</code>对象的批处理的典型步骤序列 -</p><ul><li>使用<code>createStatement()</code>方法创建<code>Statement</code>对象。</li><li>使用<code>setAutoCommit()</code>将自动提交设置为<code>false</code>。</li><li>使用<code>addBatch()</code>方法在创建的<code>Statement</code>对象上添加SQL语句到批处理中。</li><li>在创建的<code>Statement</code>对象上使用<code>executeBatch()</code>方法执行所有SQL语句。</li><li>最后，使用<code>commit()</code>方法提交所有更改。</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>以下代码片段提供了使用<code>Statement</code>对象的批量更新示例 -</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">Create</span> statement object</span><br><span class="line">Statement stmt <span class="operator">=</span> conn.createStatement();</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">Set</span> auto<span class="operator">-</span><span class="keyword">commit</span> <span class="keyword">to</span> <span class="literal">false</span></span><br><span class="line">conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">Create</span> <span class="keyword">SQL</span> statement</span><br><span class="line">String <span class="keyword">SQL</span> <span class="operator">=</span> &quot;INSERT INTO Employees (id, first, last, age) &quot; <span class="operator">+</span></span><br><span class="line">             &quot;VALUES(200,&#x27;Ruby&#x27;, &#x27;Yang&#x27;, 30)&quot;;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">Add</span> above <span class="keyword">SQL</span> statement <span class="keyword">in</span> the batch.</span><br><span class="line">stmt.addBatch(<span class="keyword">SQL</span>);</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">Create</span> <span class="keyword">one</span> more <span class="keyword">SQL</span> statement</span><br><span class="line">String <span class="keyword">SQL</span> <span class="operator">=</span> &quot;INSERT INTO Employees (id, first, last, age) &quot; <span class="operator">+</span></span><br><span class="line">             &quot;VALUES(201,&#x27;Java&#x27;, &#x27;Lee&#x27;, 35)&quot;;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">Add</span> above <span class="keyword">SQL</span> statement <span class="keyword">in</span> the batch.</span><br><span class="line">stmt.addBatch(<span class="keyword">SQL</span>);</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">Create</span> <span class="keyword">one</span> more <span class="keyword">SQL</span> statement</span><br><span class="line">String <span class="keyword">SQL</span> <span class="operator">=</span> &quot;UPDATE Employees SET age = 35 &quot; <span class="operator">+</span></span><br><span class="line">             &quot;WHERE id = 100&quot;;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">Add</span> above <span class="keyword">SQL</span> statement <span class="keyword">in</span> the batch.</span><br><span class="line">stmt.addBatch(<span class="keyword">SQL</span>);</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> <span class="keyword">Create</span> an <span class="type">int</span>[] <span class="keyword">to</span> <span class="keyword">hold</span> returned <span class="keyword">values</span></span><br><span class="line"><span class="type">int</span>[] count <span class="operator">=</span> stmt.executeBatch();</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>Explicitly <span class="keyword">commit</span> statements <span class="keyword">to</span> apply changes</span><br><span class="line">conn.commit();</span><br><span class="line"><span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><p>为了更好的理解，建议学习和研究“<a href="http://www.yiibai.com/jdbc/statement-batching-example.html">JDBC批处理示例代码</a>”。</p><h2 id="使用PrepareStatement对象进行批处理"><a href="#使用PrepareStatement对象进行批处理" class="headerlink" title="使用PrepareStatement对象进行批处理"></a>使用PrepareStatement对象进行批处理</h2><p>以下是使用<code>PrepareStatement</code>对象进行批处理的典型步骤顺序 -</p><ul><li>使用占位符创建SQL语句。</li><li>使用<code>prepareStatement()</code>方法创建<code>PrepareStatement</code>对象。</li><li>使用<code>setAutoCommit()</code>将自动提交设置为<code>false</code>。</li><li>使用<code>addBatch()</code>方法在创建的<code>Statement</code>对象上添加SQL语句到批处理中。</li><li>在创建的<code>Statement</code>对象上使用<code>executeBatch()</code>方法执行所有SQL语句。</li><li>最后，使用<code>commit()</code>方法提交所有更改。</li></ul><p>以下代码段提供了使用<code>PreparedStatement</code>对象进行批量更新的示例 -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create SQL statement</span></span><br><span class="line">String SQL = <span class="string">&quot;INSERT INTO Employees (id, first, last, age) &quot;</span> +</span><br><span class="line">             <span class="string">&quot;VALUES(?, ?, ?, ?)&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create PrepareStatement object</span></span><br><span class="line">PreparedStatemen pstmt = conn.prepareStatement(SQL);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Set auto-commit to false</span></span><br><span class="line">conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set the variables</span></span><br><span class="line">pstmt.setInt( <span class="number">1</span>, <span class="number">400</span> );</span><br><span class="line">pstmt.setString( <span class="number">2</span>, <span class="string">&quot;JDBC&quot;</span> );</span><br><span class="line">pstmt.setString( <span class="number">3</span>, <span class="string">&quot;Li&quot;</span> );</span><br><span class="line">pstmt.setInt( <span class="number">4</span>, <span class="number">33</span> );</span><br><span class="line"><span class="comment">// Add it to the batch</span></span><br><span class="line">pstmt.addBatch();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set the variables</span></span><br><span class="line">pstmt.setInt( <span class="number">1</span>, <span class="number">401</span> );</span><br><span class="line">pstmt.setString( <span class="number">2</span>, <span class="string">&quot;CSharp&quot;</span> );</span><br><span class="line">pstmt.setString( <span class="number">3</span>, <span class="string">&quot;Liang&quot;</span> );</span><br><span class="line">pstmt.setInt( <span class="number">4</span>, <span class="number">31</span> );</span><br><span class="line"><span class="comment">// Add it to the batch</span></span><br><span class="line">pstmt.addBatch();</span><br><span class="line"></span><br><span class="line"><span class="comment">//add more batches</span></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"><span class="comment">//Create an int[] to hold returned values</span></span><br><span class="line"><span class="keyword">int</span>[] count = stmt.executeBatch();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Explicitly commit statements to apply changes</span></span><br><span class="line">conn.commit();</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>为了更好的理解，建议学习和研究“<a href="http://www.yiibai.com/jdbc/preparestatement-batching-example.html">JDBC批处理示例代码</a></p>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14.jdbc异常</title>
      <link href="/2022/04/26/JDBC/14.jdbc%E5%BC%82%E5%B8%B8/"/>
      <url>/2022/04/26/JDBC/14.jdbc%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h2 id="异常处理允许我们以受控的方式处理异常情况，而不是直接退出程序，例如程序定义的错误。"><a href="#异常处理允许我们以受控的方式处理异常情况，而不是直接退出程序，例如程序定义的错误。" class="headerlink" title="异常处理允许我们以受控的方式处理异常情况，而不是直接退出程序，例如程序定义的错误。"></a>异常处理允许我们以受控的方式处理异常情况，而不是直接退出程序，例如程序定义的错误。</h2><p>发生异常时可以抛出异常。术语“<strong>异常</strong>”表示当前的程序执行停止，并且被重定向到最近的适用的<code>catch</code>子句。如果没有适用的<code>catch</code>子句存在，则程序的执行结束。</p><p>JDBC异常处理与Java异常处理非常相似，但对于JDBC，要处理的最常见异常是<code>java.sql.SQLException</code>。</p><h2 id="SQLException方法"><a href="#SQLException方法" class="headerlink" title="SQLException方法"></a>SQLException方法</h2><p>驱动程序和数据库中都会发生<code>SQLException</code>。 发生这种异常时，<code>SQLException</code>类型的对象将被传递给<code>catch</code>子句。</p><p>传递的<code>SQLException</code>对象具有以下可用于检索有关异常信息的方法 -</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>getErrorCode( )</code></td><td>获取与异常关联的错误代码。</td></tr><tr><td><code>getMessage( )</code></td><td>获取驱动程序处理的错误的JDBC驱动程序的错误消息，或获取数据库错误的Oracle错误代码和消息。</td></tr><tr><td><code>getSQLState( )</code></td><td>获取XOPEN SQLstate字符串。 对于JDBC驱动程序错误，不会从此方法返回有用的信息。 对于数据库错误，返回五位数的XOPEN SQLstate代码。 此方法可以返回<code>null</code>。</td></tr><tr><td><code>getNextException( )</code></td><td>获取异常链中的下一个<code>Exception</code>对象。</td></tr><tr><td><code>printStackTrace( )</code></td><td>打印当前异常或可抛出的异常，并将其追溯到标准错误流。</td></tr><tr><td><code>printStackTrace(PrintStream s)</code></td><td>将此<code>throwable</code>及其回溯打印到指定的打印流。</td></tr><tr><td><code>printStackTrace(PrintWriter w)</code></td><td>打印这个<code>throwable</code>，它是回溯到指定的打印器(<code>PrintWriter</code>)。</td></tr></tbody></table><p>通过利用<code>Exception</code>对象提供的信息，可以捕获异常并适当地继续执行程序。下面是一个<code>try</code>块的一般形式 -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   <span class="comment">// Your risky code goes between these curly braces!!!</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exception ex) &#123;</span><br><span class="line">   <span class="comment">// Your exception handling code goes between these </span></span><br><span class="line">   <span class="comment">// curly braces, similar to the exception clause </span></span><br><span class="line">   <span class="comment">// in a PL/SQL block.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">   <span class="comment">// Your must-always-be-executed code goes between these </span></span><br><span class="line">   <span class="comment">// curly braces. Like closing database connection.</span></span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>学习研究以下示例代码以了解<em>try …. catch … finally</em>块的用法。将下面代码保存到文件：<em>TryCatchFinally.java</em> 中，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//STEP 1. Import required packages</span></span><br><span class="line"><span class="comment">// See more detail at http://www.yiibai.com/jdbc/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TryCatchFinally</span> </span>&#123;</span><br><span class="line">   <span class="comment">// JDBC driver name and database URL</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String JDBC_DRIVER = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;  </span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String DB_URL = <span class="string">&quot;jdbc:mysql://localhost/EMP&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//  Database credentials</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String USER = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String PASS = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   Connection conn = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="comment">//STEP 2: Register JDBC driver</span></span><br><span class="line">      Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//STEP 3: Open a connection</span></span><br><span class="line">      System.out.println(<span class="string">&quot;Connecting to database...&quot;</span>);</span><br><span class="line">      conn = DriverManager.getConnection(DB_URL,USER,PASS);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//STEP 4: Execute a query</span></span><br><span class="line">      System.out.println(<span class="string">&quot;Creating statement...&quot;</span>);</span><br><span class="line">      Statement stmt = conn.createStatement();</span><br><span class="line">      String sql;</span><br><span class="line">      sql = <span class="string">&quot;SELECT id, first, last, age FROM Employees&quot;</span>;</span><br><span class="line">      ResultSet rs = stmt.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//STEP 5: Extract data from result set</span></span><br><span class="line">      <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">         <span class="comment">//Retrieve by column name</span></span><br><span class="line">         <span class="keyword">int</span> id  = rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">         <span class="keyword">int</span> age = rs.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">         String first = rs.getString(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">         String last = rs.getString(<span class="string">&quot;last&quot;</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//Display values</span></span><br><span class="line">         System.out.print(<span class="string">&quot;ID: &quot;</span> + id);</span><br><span class="line">         System.out.print(<span class="string">&quot;, Age: &quot;</span> + age);</span><br><span class="line">         System.out.print(<span class="string">&quot;, First: &quot;</span> + first);</span><br><span class="line">         System.out.println(<span class="string">&quot;, Last: &quot;</span> + last);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//STEP 6: Clean-up environment</span></span><br><span class="line">      rs.close();</span><br><span class="line">      stmt.close();</span><br><span class="line">      conn.close();</span><br><span class="line">   &#125;<span class="keyword">catch</span>(SQLException se)&#123;</span><br><span class="line">      <span class="comment">//Handle errors for JDBC</span></span><br><span class="line">      se.printStackTrace();</span><br><span class="line">   &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">      <span class="comment">//Handle errors for Class.forName</span></span><br><span class="line">      e.printStackTrace();</span><br><span class="line">   &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">      <span class="comment">//finally block used to close resources</span></span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)</span><br><span class="line">            conn.close();</span><br><span class="line">      &#125;<span class="keyword">catch</span>(SQLException se)&#123;</span><br><span class="line">         se.printStackTrace();</span><br><span class="line">      &#125;<span class="comment">//end finally try</span></span><br><span class="line">   &#125;<span class="comment">//end try</span></span><br><span class="line">   System.out.println(<span class="string">&quot;Goodbye!&quot;</span>);</span><br><span class="line">&#125;<span class="comment">//end main</span></span><br><span class="line">&#125;<span class="comment">//end JDBCExample</span></span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>现在编译上面例子中代码如下 -</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">F:\worksp\jdbc&gt;javac -Djava.ext.dirs=F:\worksp\jdbc\libs TryCatchFinally.java</span><br><span class="line">Shell</span><br></pre></td></tr></table></figure><p>执行上面编译后的代码，得到以下结果 - </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Connecting to database...</span><br><span class="line">Thu Jun 01 02:59:01 CST 2017 WARN: Establishing SSL connection without server&#x27;s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn&#x27;t set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to &#x27;false&#x27;. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification.</span><br><span class="line">Creating statement...</span><br><span class="line">ID: 100, Age: 28, First: Max, Last: Su</span><br><span class="line">ID: 101, Age: 25, First: Wei, Last: Wang</span><br><span class="line">ID: 102, Age: 35, First: Xueyou, Last: Zhang</span><br><span class="line">ID: 103, Age: 30, First: Jack, Last: Ma</span><br><span class="line">ID: 106, Age: 28, First: Curry, Last: Stephen</span><br><span class="line">ID: 107, Age: 32, First: Kobe, Last: Bryant</span><br><span class="line">Goodbye!</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13.jdbc事物保存点</title>
      <link href="/2022/04/26/JDBC/13.jdbc%E4%BA%8B%E5%8A%A1%E4%BF%9D%E5%AD%98%E7%82%B9/"/>
      <url>/2022/04/26/JDBC/13.jdbc%E4%BA%8B%E5%8A%A1%E4%BF%9D%E5%AD%98%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="以下是使用事务教程中描述的setSavepoint和回滚的代码示例。"><a href="#以下是使用事务教程中描述的setSavepoint和回滚的代码示例。" class="headerlink" title="以下是使用事务教程中描述的setSavepoint和回滚的代码示例。"></a>以下是使用事务教程中描述的<code>setSavepoint</code>和回滚的代码示例。</h2><p>此示例代码是基于前面章节中完成的环境和数据库设置编写的。</p><p>复制并将以下示例代码保存到：<em>JDBCSavepoint.java</em> 中，编译并运行如下 -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//STEP 1. Import required packages</span></span><br><span class="line"><span class="comment">// See more detail at http://www.yiibai.com/jdbc/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCSavepoint</span> </span>&#123;</span><br><span class="line">   <span class="comment">// JDBC driver name and database URL</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String JDBC_DRIVER = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;  </span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String DB_URL = <span class="string">&quot;jdbc:mysql://localhost/EMP&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//  Database credentials</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String USER = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String PASS = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   Connection conn = <span class="keyword">null</span>;</span><br><span class="line">   Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="comment">//STEP 2: Register JDBC driver</span></span><br><span class="line">      Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//STEP 3: Open a connection</span></span><br><span class="line">      System.out.println(<span class="string">&quot;Connecting to database...&quot;</span>);</span><br><span class="line">      conn = DriverManager.getConnection(DB_URL,USER,PASS);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//STEP 4: Set auto commit as false.</span></span><br><span class="line">      conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//STEP 5: Execute a query to delete statment with</span></span><br><span class="line">      <span class="comment">// required arguments for RS example.</span></span><br><span class="line">      System.out.println(<span class="string">&quot;Creating statement...&quot;</span>);</span><br><span class="line">      stmt = conn.createStatement();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//STEP 6: Now list all the available records.</span></span><br><span class="line">      String sql = <span class="string">&quot;SELECT id, first, last, age FROM Employees&quot;</span>;</span><br><span class="line">      ResultSet rs = stmt.executeQuery(sql);</span><br><span class="line">      System.out.println(<span class="string">&quot;List result set for reference....&quot;</span>);</span><br><span class="line">      printRs(rs);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// STEP 7: delete rows having ID grater than 104</span></span><br><span class="line">      <span class="comment">// But save point before doing so.</span></span><br><span class="line">      Savepoint savepoint1 = conn.setSavepoint(<span class="string">&quot;ROWS_DELETED_1&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;Deleting row....&quot;</span>);</span><br><span class="line">      String SQL = <span class="string">&quot;DELETE FROM Employees &quot;</span> +</span><br><span class="line">                   <span class="string">&quot;WHERE ID = 106&quot;</span>;</span><br><span class="line">      stmt.executeUpdate(SQL);  </span><br><span class="line">      <span class="comment">// oops... we deleted too wrong employees!</span></span><br><span class="line">      <span class="comment">//STEP 8: Rollback the changes afetr save point 2.</span></span><br><span class="line">      conn.rollback(savepoint1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// STEP 9: delete rows having ID grater than 104</span></span><br><span class="line">      <span class="comment">// But save point before doing so.</span></span><br><span class="line">      Savepoint savepoint2 = conn.setSavepoint(<span class="string">&quot;ROWS_DELETED_2&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;Deleting row....&quot;</span>);</span><br><span class="line">      SQL = <span class="string">&quot;DELETE FROM Employees &quot;</span> +</span><br><span class="line">                   <span class="string">&quot;WHERE ID = 107&quot;</span>;</span><br><span class="line">      stmt.executeUpdate(SQL);  </span><br><span class="line"></span><br><span class="line">      <span class="comment">//STEP 10: Now list all the available records.</span></span><br><span class="line">      sql = <span class="string">&quot;SELECT id, first, last, age FROM Employees&quot;</span>;</span><br><span class="line">      rs = stmt.executeQuery(sql);</span><br><span class="line">      System.out.println(<span class="string">&quot;List result set for reference....&quot;</span>);</span><br><span class="line">      printRs(rs);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//STEP 10: Clean-up environment</span></span><br><span class="line">      rs.close();</span><br><span class="line">      stmt.close();</span><br><span class="line">      conn.close();</span><br><span class="line">   &#125;<span class="keyword">catch</span>(SQLException se)&#123;</span><br><span class="line">      <span class="comment">//Handle errors for JDBC</span></span><br><span class="line">      se.printStackTrace();</span><br><span class="line">      <span class="comment">// If there is an error then rollback the changes.</span></span><br><span class="line">      System.out.println(<span class="string">&quot;Rolling back data here....&quot;</span>);</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)</span><br><span class="line">            conn.rollback();</span><br><span class="line">      &#125;<span class="keyword">catch</span>(SQLException se2)&#123;</span><br><span class="line">         se2.printStackTrace();</span><br><span class="line">      &#125;<span class="comment">//end try</span></span><br><span class="line"></span><br><span class="line">   &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">      <span class="comment">//Handle errors for Class.forName</span></span><br><span class="line">      e.printStackTrace();</span><br><span class="line">   &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">      <span class="comment">//finally block used to close resources</span></span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(stmt!=<span class="keyword">null</span>)</span><br><span class="line">            stmt.close();</span><br><span class="line">      &#125;<span class="keyword">catch</span>(SQLException se2)&#123;</span><br><span class="line">      &#125;<span class="comment">// nothing we can do</span></span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)</span><br><span class="line">            conn.close();</span><br><span class="line">      &#125;<span class="keyword">catch</span>(SQLException se)&#123;</span><br><span class="line">         se.printStackTrace();</span><br><span class="line">      &#125;<span class="comment">//end finally try</span></span><br><span class="line">   &#125;<span class="comment">//end try</span></span><br><span class="line">   System.out.println(<span class="string">&quot;Goodbye!&quot;</span>);</span><br><span class="line">&#125;<span class="comment">//end main</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printRs</span><span class="params">(ResultSet rs)</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line">      <span class="comment">//Ensure we start with first row</span></span><br><span class="line">      rs.beforeFirst();</span><br><span class="line">      <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">         <span class="comment">//Retrieve by column name</span></span><br><span class="line">         <span class="keyword">int</span> id  = rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">         <span class="keyword">int</span> age = rs.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">         String first = rs.getString(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">         String last = rs.getString(<span class="string">&quot;last&quot;</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//Display values</span></span><br><span class="line">         System.out.print(<span class="string">&quot;ID: &quot;</span> + id);</span><br><span class="line">         System.out.print(<span class="string">&quot;, Age: &quot;</span> + age);</span><br><span class="line">         System.out.print(<span class="string">&quot;, First: &quot;</span> + first);</span><br><span class="line">         System.out.println(<span class="string">&quot;, Last: &quot;</span> + last);</span><br><span class="line">     &#125;</span><br><span class="line">     System.out.println();</span><br><span class="line">   &#125;<span class="comment">//end printRs()</span></span><br><span class="line">&#125;<span class="comment">//end JDBCExample</span></span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>编译并运行结果如下 -</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">F:\worksp\jdbc&gt;javac -Djava.ext.dirs=F:\worksp\jdbc\libs JDBCSavepoint.java</span><br><span class="line"></span><br><span class="line">F:\worksp\jdbc&gt;java -Djava.ext.dirs=F:\worksp\jdbc\libs JDBCSavepoint</span><br><span class="line">Connecting to database...</span><br><span class="line">Thu Jun 01 02:35:49 CST 2017 WARN: Establishing SSL connection without server&#x27;s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn&#x27;t set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to &#x27;false&#x27;. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification.</span><br><span class="line">Creating statement...</span><br><span class="line">List result set for reference....</span><br><span class="line">ID: 100, Age: 28, First: Max, Last: Su</span><br><span class="line">ID: 101, Age: 25, First: Wei, Last: Wang</span><br><span class="line">ID: 102, Age: 35, First: Xueyou, Last: Zhang</span><br><span class="line">ID: 103, Age: 30, First: Jack, Last: Ma</span><br><span class="line">ID: 106, Age: 28, First: Curry, Last: Stephen</span><br><span class="line">ID: 107, Age: 32, First: Kobe, Last: Bryant</span><br><span class="line"></span><br><span class="line">Deleting row....</span><br><span class="line">Deleting row....</span><br><span class="line">List result set for reference....</span><br><span class="line">ID: 100, Age: 28, First: Max, Last: Su</span><br><span class="line">ID: 101, Age: 25, First: Wei, Last: Wang</span><br><span class="line">ID: 102, Age: 35, First: Xueyou, Last: Zhang</span><br><span class="line">ID: 103, Age: 30, First: Jack, Last: Ma</span><br><span class="line">ID: 106, Age: 28, First: Curry, Last: Stephen</span><br><span class="line"></span><br><span class="line">Goodbye!</span><br><span class="line"></span><br><span class="line">F:\worksp\jdbc&gt;</span><br><span class="line">Shell</span><br></pre></td></tr></table></figure><p>可以看到，上面代码中只回滚到保存点(ROWS_DELETED_1)，所以ID为<code>106</code>的这一行记录没有被删除，而ID为<code>107</code>的记录因为没有设置回滚点，直接提交删除了。</p>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12.jdbc事物提交回顾</title>
      <link href="/2022/04/26/JDBC/12.jdbc%E4%BA%8B%E5%8A%A1%E6%8F%90%E4%BA%A4%E5%9B%9E%E6%BB%9A/"/>
      <url>/2022/04/26/JDBC/12.jdbc%E4%BA%8B%E5%8A%A1%E6%8F%90%E4%BA%A4%E5%9B%9E%E6%BB%9A/</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>以下是使用事务教程中描述的提交和回滚的代码示例。</p><p>此示例代码是基于前面章节中完成的环境和数据库设置编写的。</p><p>复制并将以下示例代码保存到：<em>CommitAndRollback.java</em> 中，编译并运行如下 -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//STEP 1. Import required packages</span></span><br><span class="line"><span class="comment">// See more detail at http://www.yiibai.com/jdbc/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommitAndRollback</span> </span>&#123;</span><br><span class="line">   <span class="comment">// JDBC driver name and database URL</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String JDBC_DRIVER = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;  </span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String DB_URL = <span class="string">&quot;jdbc:mysql://localhost/EMP&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//  Database credentials</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String USER = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String PASS = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   Connection conn = <span class="keyword">null</span>;</span><br><span class="line">   Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="comment">//STEP 2: Register JDBC driver</span></span><br><span class="line">      Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//STEP 3: Open a connection</span></span><br><span class="line">      System.out.println(<span class="string">&quot;Connecting to database...&quot;</span>);</span><br><span class="line">      conn = DriverManager.getConnection(DB_URL,USER,PASS);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//STEP 4: Set auto commit as false.</span></span><br><span class="line">      conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//STEP 5: Execute a query to create statment with</span></span><br><span class="line">      <span class="comment">// required arguments for RS example.</span></span><br><span class="line">      System.out.println(<span class="string">&quot;Creating statement...&quot;</span>);</span><br><span class="line">      stmt = conn.createStatement(</span><br><span class="line">                           ResultSet.TYPE_SCROLL_INSENSITIVE,</span><br><span class="line">                           ResultSet.CONCUR_UPDATABLE);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//STEP 6: INSERT a row into Employees table</span></span><br><span class="line">      System.out.println(<span class="string">&quot;Inserting one row....&quot;</span>);</span><br><span class="line">      String SQL = <span class="string">&quot;INSERT INTO Employees &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;VALUES (106, 28, &#x27;Curry&#x27;, &#x27;Stephen&#x27;)&quot;</span>;</span><br><span class="line">      stmt.executeUpdate(SQL);  </span><br><span class="line"></span><br><span class="line">      <span class="comment">//STEP 7: INSERT one more row into Employees table</span></span><br><span class="line">      SQL = <span class="string">&quot;INSERT INTO Employees &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;VALUES (107, 32, &#x27;Kobe&#x27;, &#x27;Bryant&#x27;)&quot;</span>;</span><br><span class="line">      stmt.executeUpdate(SQL);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//STEP 8: Commit data here.</span></span><br><span class="line">      System.out.println(<span class="string">&quot;Commiting data here....&quot;</span>);</span><br><span class="line">      conn.commit();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//STEP 9: Now list all the available records.</span></span><br><span class="line">      String sql = <span class="string">&quot;SELECT id, first, last, age FROM Employees&quot;</span>;</span><br><span class="line">      ResultSet rs = stmt.executeQuery(sql);</span><br><span class="line">      System.out.println(<span class="string">&quot;List result set for reference....&quot;</span>);</span><br><span class="line">      printRs(rs);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//STEP 10: Clean-up environment</span></span><br><span class="line">      rs.close();</span><br><span class="line">      stmt.close();</span><br><span class="line">      conn.close();</span><br><span class="line">   &#125;<span class="keyword">catch</span>(SQLException se)&#123;</span><br><span class="line">      <span class="comment">//Handle errors for JDBC</span></span><br><span class="line">      se.printStackTrace();</span><br><span class="line">      <span class="comment">// If there is an error then rollback the changes.</span></span><br><span class="line">      System.out.println(<span class="string">&quot;Rolling back data here....&quot;</span>);</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)</span><br><span class="line">            conn.rollback();</span><br><span class="line">      &#125;<span class="keyword">catch</span>(SQLException se2)&#123;</span><br><span class="line">         se2.printStackTrace();</span><br><span class="line">      &#125;<span class="comment">//end try</span></span><br><span class="line"></span><br><span class="line">   &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">      <span class="comment">//Handle errors for Class.forName</span></span><br><span class="line">      e.printStackTrace();</span><br><span class="line">   &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">      <span class="comment">//finally block used to close resources</span></span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(stmt!=<span class="keyword">null</span>)</span><br><span class="line">            stmt.close();</span><br><span class="line">      &#125;<span class="keyword">catch</span>(SQLException se2)&#123;</span><br><span class="line">      &#125;<span class="comment">// nothing we can do</span></span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)</span><br><span class="line">            conn.close();</span><br><span class="line">      &#125;<span class="keyword">catch</span>(SQLException se)&#123;</span><br><span class="line">         se.printStackTrace();</span><br><span class="line">      &#125;<span class="comment">//end finally try</span></span><br><span class="line">   &#125;<span class="comment">//end try</span></span><br><span class="line">   System.out.println(<span class="string">&quot;Goodbye!&quot;</span>);</span><br><span class="line">&#125;<span class="comment">//end main</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printRs</span><span class="params">(ResultSet rs)</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line">      <span class="comment">//Ensure we start with first row</span></span><br><span class="line">      rs.beforeFirst();</span><br><span class="line">      <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">         <span class="comment">//Retrieve by column name</span></span><br><span class="line">         <span class="keyword">int</span> id  = rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">         <span class="keyword">int</span> age = rs.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">         String first = rs.getString(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">         String last = rs.getString(<span class="string">&quot;last&quot;</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//Display values</span></span><br><span class="line">         System.out.print(<span class="string">&quot;ID: &quot;</span> + id);</span><br><span class="line">         System.out.print(<span class="string">&quot;, Age: &quot;</span> + age);</span><br><span class="line">         System.out.print(<span class="string">&quot;, First: &quot;</span> + first);</span><br><span class="line">         System.out.println(<span class="string">&quot;, Last: &quot;</span> + last);</span><br><span class="line">     &#125;</span><br><span class="line">     System.out.println();</span><br><span class="line">   &#125;<span class="comment">//end printRs()</span></span><br><span class="line">&#125;<span class="comment">//end JDBCExample</span></span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>编译并运行结果如下 -</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Connecting to database...</span><br><span class="line">Thu Jun 01 02:30:04 CST 2017 WARN: Establishing SSL connection without server&#x27;s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn&#x27;t set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to &#x27;false&#x27;. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification.</span><br><span class="line">Creating statement...</span><br><span class="line">Inserting one row....</span><br><span class="line">Commiting data here....</span><br><span class="line">List result set for reference....</span><br><span class="line">ID: 100, Age: 28, First: Max, Last: Su</span><br><span class="line">ID: 101, Age: 25, First: Wei, Last: Wang</span><br><span class="line">ID: 102, Age: 35, First: Xueyou, Last: Zhang</span><br><span class="line">ID: 103, Age: 30, First: Jack, Last: Ma</span><br><span class="line">ID: 106, Age: 28, First: Curry, Last: Stephen</span><br><span class="line">ID: 107, Age: 32, First: Kobe, Last: Bryant</span><br><span class="line"></span><br><span class="line">Goodbye!</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11.jdbc事物</title>
      <link href="/2022/04/26/JDBC/11.jdbc%E4%BA%8B%E5%8A%A1/"/>
      <url>/2022/04/26/JDBC/11.jdbc%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>如果JDBC连接处于自动提交模式，默认情况下，则每个SQL语句在完成后都会提交到数据库。</p><p>对于简单的应用程序可能没有问题，但是有三个原因需要考虑是否关闭自动提交并管理自己的事务 -</p><ul><li>提高性能</li><li>保持业务流程的完整性</li><li>使用分布式事务</li></ul><p>事务能够控制何时更改提交并应用于数据库。 它将单个SQL语句或一组SQL语句视为一个逻辑单元，如果任何语句失败，整个事务将失败。</p><p>要启用手动事务支持，而不是使用JDBC驱动程序默认使用的自动提交模式，请调用<code>Connection</code>对象的<code>setAutoCommit()</code>方法。 如果将布尔的<code>false</code>传递给<code>setAutoCommit()</code>，则关闭自动提交。 也可以传递一个布尔值<code>true</code>来重新打开它。</p><p>例如，如果有一个名为<code>conn</code>的<code>Connection</code>对象，请将以下代码关闭自动提交 -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><h2 id="提交和回滚"><a href="#提交和回滚" class="headerlink" title="提交和回滚"></a>提交和回滚</h2><p>完成更改后，若要提交更改，那么可在连接对象上调用<code>commit()</code>方法，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conn.commit( );</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>否则，要使用连接名为<code>conn</code>的数据库回滚更新，请使用以下代码 -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conn.rollback( );</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>以下示例说明了如何使用提交和回滚对象 -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">   <span class="comment">//Assume a valid connection object conn</span></span><br><span class="line">   conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">   Statement stmt = conn.createStatement();</span><br><span class="line"></span><br><span class="line">   String SQL = <span class="string">&quot;INSERT INTO Employees  &quot;</span> +</span><br><span class="line">                <span class="string">&quot;VALUES (106, 20, &#x27;Rita&#x27;, &#x27;Tez&#x27;)&quot;</span>;</span><br><span class="line">   stmt.executeUpdate(SQL);  </span><br><span class="line">   <span class="comment">//Submit a malformed SQL statement that breaks</span></span><br><span class="line">   String SQL = <span class="string">&quot;INSERTED IN Employees  &quot;</span> +</span><br><span class="line">                <span class="string">&quot;VALUES (107, 22, &#x27;Sita&#x27;, &#x27;Singh&#x27;)&quot;</span>;</span><br><span class="line">   stmt.executeUpdate(SQL);</span><br><span class="line">   <span class="comment">// If there is no error.</span></span><br><span class="line">   conn.commit();</span><br><span class="line">&#125;<span class="keyword">catch</span>(SQLException se)&#123;</span><br><span class="line">   <span class="comment">// If there is any error.</span></span><br><span class="line">   conn.rollback();</span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>在这种情况下，上述<code>INSERT</code>语句不会成功执行，因为所有操作都被回滚了。</p><p>为了更好的理解，建议学习研究“<a href="http://www.yiibai.com/jdbc/commit-rollback.html">事务提交示例代码</a>”。</p><h2 id="使用保存点"><a href="#使用保存点" class="headerlink" title="使用保存点"></a>使用保存点</h2><p>新的JDBC 3.0新添加了<code>Savepoint</code>接口提供了额外的事务控制能力。大多数现代DBMS支持其环境中的保存点，如Oracle的PL/SQL。</p><p>设置保存点(<code>Savepoint</code>)时，可以在事务中定义逻辑回滚点。 如果通过保存点(<code>Savepoint</code>)发生错误时，则可以使用回滚方法来撤消所有更改或仅保存保存点之后所做的更改。</p><p><code>Connection</code>对象有两种新的方法可用来管理保存点 -</p><ul><li><strong>setSavepoint(String savepointName):</strong> - 定义新的保存点，它还返回一个<code>Savepoint</code>对象。</li><li><strong>releaseSavepoint(Savepoint savepointName):</strong>  - 删除保存点。要注意，它需要一个<code>Savepoint</code>对象作为参数。 该对象通常是由<code>setSavepoint()</code>方法生成的保存点。</li></ul><p>有一个*rollback (String savepointName)*方法，它将使用事务回滚到指定的保存点。</p><p>以下示例说明了使用<code>Savepoint</code>对象 -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">   <span class="comment">//Assume a valid connection object conn</span></span><br><span class="line">   conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">   Statement stmt = conn.createStatement();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//set a Savepoint</span></span><br><span class="line">   Savepoint savepoint1 = conn.setSavepoint(<span class="string">&quot;Savepoint1&quot;</span>);</span><br><span class="line">   String SQL = <span class="string">&quot;INSERT INTO Employees &quot;</span> +</span><br><span class="line">                <span class="string">&quot;VALUES (106, 24, &#x27;Curry&#x27;, &#x27;Stephen&#x27;)&quot;</span>;</span><br><span class="line">   stmt.executeUpdate(SQL);  </span><br><span class="line">   <span class="comment">//Submit a malformed SQL statement that breaks</span></span><br><span class="line">   String SQL = <span class="string">&quot;INSERTED IN Employees &quot;</span> +</span><br><span class="line">                <span class="string">&quot;VALUES (107, 32, &#x27;Kobe&#x27;, &#x27;Bryant&#x27;)&quot;</span>;</span><br><span class="line">   stmt.executeUpdate(SQL);</span><br><span class="line">   <span class="comment">// If there is no error, commit the changes.</span></span><br><span class="line">   conn.commit();</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span>(SQLException se)&#123;</span><br><span class="line">   <span class="comment">// If there is any error.</span></span><br><span class="line">   conn.rollback(savepoint1);</span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>在这种情况下，上述<code>INSERT</code>语句都不会成功，因为所有操作都被回滚了。</p><p>为了更好的理解，建议学习研究<a href="http://www.yiibai.com/jdbc/jdbc-savepoints.html">保存点示例代码</a>。</p>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.jdbc数据集</title>
      <link href="/2022/04/26/JDBC/10.jdbc%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2022/04/26/JDBC/10.jdbc%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="DBC驱动程序将Java数据类型转换为适当的JDBC类型，然后将其发送到数据库。-它为大多数数据类型提供并使用默认映射。-例如，Java-int类型会被转换为SQL-INTEGER。-创建默认映射以提供到驱动程序时保持一致性。"><a href="#DBC驱动程序将Java数据类型转换为适当的JDBC类型，然后将其发送到数据库。-它为大多数数据类型提供并使用默认映射。-例如，Java-int类型会被转换为SQL-INTEGER。-创建默认映射以提供到驱动程序时保持一致性。" class="headerlink" title="DBC驱动程序将Java数据类型转换为适当的JDBC类型，然后将其发送到数据库。 它为大多数数据类型提供并使用默认映射。 例如，Java int类型会被转换为SQL INTEGER。 创建默认映射以提供到驱动程序时保持一致性。"></a>DBC驱动程序将Java数据类型转换为适当的JDBC类型，然后将其发送到数据库。 它为大多数数据类型提供并使用默认映射。 例如，Java <code>int</code>类型会被转换为SQL <code>INTEGER</code>。 创建默认映射以提供到驱动程序时保持一致性。</h2><p>下表总结了当调用<code>PreparedStatement</code>或<code>CallableStatement</code>对象或<code>ResultSet.updateXXX()</code>方法的<code>setXXX()</code>方法时，将Java数据类型转换为的默认JDBC数据类型。</p><table><thead><tr><th>SQL类型</th><th>JDBC/Java类型</th><th>setXXX</th><th>updateXXX</th></tr></thead><tbody><tr><td>VARCHAR</td><td>java.lang.String</td><td>setString</td><td>updateString</td></tr><tr><td>CHAR</td><td>java.lang.String</td><td>setString</td><td>updateString</td></tr><tr><td>LONGVARCHAR</td><td>java.lang.String</td><td>setString</td><td>updateString</td></tr><tr><td>BIT</td><td>boolean</td><td>setBoolean</td><td>updateBoolean</td></tr><tr><td>NUMERIC</td><td>java.math.BigDecimal</td><td>setBigDecimal</td><td>updateBigDecimal</td></tr><tr><td>TINYINT</td><td>byte</td><td>setByte</td><td>updateByte</td></tr><tr><td>SMALLINT</td><td>short</td><td>setShort</td><td>updateShort</td></tr><tr><td>INTEGER</td><td>int</td><td>setInt</td><td>updateInt</td></tr><tr><td>BIGINT</td><td>long</td><td>setLong</td><td>updateLong</td></tr><tr><td>REAL</td><td>float</td><td>setFloat</td><td>updateFloat</td></tr><tr><td>FLOAT</td><td>float</td><td>setFloat</td><td>updateFloat</td></tr><tr><td>DOUBLE</td><td>double</td><td>setDouble</td><td>updateDouble</td></tr><tr><td>VARBINARY</td><td>byte[ ]</td><td>setBytes</td><td>updateBytes</td></tr><tr><td>BINARY</td><td>byte[ ]</td><td>setBytes</td><td>updateBytes</td></tr><tr><td>DATE</td><td>java.sql.Date</td><td>setDate</td><td>updateDate</td></tr><tr><td>TIME</td><td>java.sql.Time</td><td>setTime</td><td>updateTime</td></tr><tr><td>TIMESTAMP</td><td>java.sql.Timestamp</td><td>setTimestamp</td><td>updateTimestamp</td></tr><tr><td>CLOB</td><td>java.sql.Clob</td><td>setClob</td><td>updateClob</td></tr><tr><td>BLOB</td><td>java.sql.Blob</td><td>setBlob</td><td>updateBlob</td></tr><tr><td>ARRAY</td><td>java.sql.Array</td><td>setARRAY</td><td>updateARRAY</td></tr><tr><td>REF</td><td>java.sql.Ref</td><td>SetRef</td><td>updateRef</td></tr><tr><td>STRUCT</td><td>java.sql.Struct</td><td>SetStruct</td><td>updateStruct</td></tr></tbody></table><p>JDBC 3.0增强了对<code>BLOB</code>，<code>CLOB</code>，<code>ARRAY</code>和<code>REF</code>数据类型的支持。 <code>ResultSet</code>对象现在具有<code>updateBLOB()</code>，<code>updateCLOB()</code>，<code>updateArray()</code>和<code>updateRef()</code>方法，使您能够直接操作数据库服务器上的相应数据。</p><p><code>setXXX()</code>和<code>updateXXX()</code>方法可以将特定的Java类型转换为特定的JDBC数据类型。 方法<code>setObject()</code>和<code>updateObject()</code>可以将几乎任何Java类型映射到JDBC数据类型。</p><p><code>ResultSet</code>对象为每个数据类型提供相应的<code>getXXX()</code>方法来检索列值。每个方法都可以使用列名或其序数位置来检索列值。</p><table><thead><tr><th>SQL类型</th><th>JDBC/Java类型</th><th>setXXX</th><th>updateXXX</th></tr></thead><tbody><tr><td>VARCHAR</td><td>java.lang.String</td><td>setString</td><td>getString</td></tr><tr><td>CHAR</td><td>java.lang.String</td><td>setString</td><td>getString</td></tr><tr><td>LONGVARCHAR</td><td>java.lang.String</td><td>setString</td><td>getString</td></tr><tr><td>BIT</td><td>boolean</td><td>setBoolean</td><td>getBoolean</td></tr><tr><td>NUMERIC</td><td>java.math.BigDecimal</td><td>setBigDecimal</td><td>getBigDecimal</td></tr><tr><td>TINYINT</td><td>byte</td><td>setByte</td><td>getByte</td></tr><tr><td>SMALLINT</td><td>short</td><td>setShort</td><td>getShort</td></tr><tr><td>INTEGER</td><td>int</td><td>setInt</td><td>getInt</td></tr><tr><td>BIGINT</td><td>long</td><td>setLong</td><td>getLong</td></tr><tr><td>REAL</td><td>float</td><td>setFloat</td><td>getFloat</td></tr><tr><td>FLOAT</td><td>float</td><td>setFloat</td><td>getFloat</td></tr><tr><td>DOUBLE</td><td>double</td><td>setDouble</td><td>getDouble</td></tr><tr><td>VARBINARY</td><td>byte[ ]</td><td>setBytes</td><td>getBytes</td></tr><tr><td>BINARY</td><td>byte[ ]</td><td>setBytes</td><td>getBytes</td></tr><tr><td>DATE</td><td>java.sql.Date</td><td>setDate</td><td>getDate</td></tr><tr><td>TIME</td><td>java.sql.Time</td><td>setTime</td><td>getTime</td></tr><tr><td>TIMESTAMP</td><td>java.sql.Timestamp</td><td>setTimestamp</td><td>getTimestamp</td></tr><tr><td>CLOB</td><td>java.sql.Clob</td><td>setClob</td><td>getClob</td></tr><tr><td>BLOB</td><td>java.sql.Blob</td><td>setBlob</td><td>getBlob</td></tr><tr><td>ARRAY</td><td>java.sql.Array</td><td>setARRAY</td><td>getARRAY</td></tr><tr><td>REF</td><td>java.sql.Ref</td><td>SetRef</td><td>getRef</td></tr><tr><td>STRUCT</td><td>java.sql.Struct</td><td>SetStruct</td><td>getStruct</td></tr></tbody></table><h2 id="日期和时间数据类型"><a href="#日期和时间数据类型" class="headerlink" title="日期和时间数据类型"></a>日期和时间数据类型</h2><p><code>java.sql.Date</code>类映射到SQL <code>DATE</code>类型，<code>java.sql.Time</code>和<code>java.sql.Timestamp</code>类分别映射到SQL <code>TIME</code>和SQL <code>TIMESTAMP</code>数据类型。</p><p>以下示例显示了<code>Date</code>和<code>Time</code>类如何格式化为标准Java日期和时间值以匹配SQL数据类型要求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"><span class="keyword">import</span> java.sql.Time;</span><br><span class="line"><span class="keyword">import</span> java.sql.Timestamp;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlDateTime</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//Get standard date and time</span></span><br><span class="line">      java.util.Date javaDate = <span class="keyword">new</span> java.util.Date();</span><br><span class="line">      <span class="keyword">long</span> javaTime = javaDate.getTime();</span><br><span class="line">      System.out.println(<span class="string">&quot;The Java Date is:&quot;</span> + </span><br><span class="line">             javaDate.toString());</span><br><span class="line"></span><br><span class="line">      <span class="comment">//Get and display SQL DATE</span></span><br><span class="line">      java.sql.Date sqlDate = <span class="keyword">new</span> java.sql.Date(javaTime);</span><br><span class="line">      System.out.println(<span class="string">&quot;The SQL DATE is: &quot;</span> + </span><br><span class="line">             sqlDate.toString());</span><br><span class="line"></span><br><span class="line">      <span class="comment">//Get and display SQL TIME</span></span><br><span class="line">      java.sql.Time sqlTime = <span class="keyword">new</span> java.sql.Time(javaTime);</span><br><span class="line">      System.out.println(<span class="string">&quot;The SQL TIME is: &quot;</span> + </span><br><span class="line">             sqlTime.toString());</span><br><span class="line">      <span class="comment">//Get and display SQL TIMESTAMP</span></span><br><span class="line">      java.sql.Timestamp sqlTimestamp =</span><br><span class="line">      <span class="keyword">new</span> java.sql.Timestamp(javaTime);</span><br><span class="line">      System.out.println(<span class="string">&quot;The SQL TIMESTAMP is: &quot;</span> + </span><br><span class="line">             sqlTimestamp.toString());</span><br><span class="line">     &#125;<span class="comment">//end main</span></span><br><span class="line">&#125;<span class="comment">//end SqlDateTime</span></span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>编译并执行上面代码，得到以下结果 - </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">F:\worksp\jdbc&gt;javac SqlDateTime.java</span><br><span class="line"></span><br><span class="line">F:\worksp\jdbc&gt;java SqlDateTime</span><br><span class="line">The Java Date is:Wed May 31 23:54:57 CST 2017</span><br><span class="line">The SQL DATE is: 2017-05-31</span><br><span class="line">The SQL TIME is: 23:54:57</span><br><span class="line">The SQL TIMESTAMP is: 2017-05-31 23:54:57.937</span><br><span class="line"></span><br><span class="line">F:\worksp\jdbc&gt;</span><br><span class="line">Shell</span><br></pre></td></tr></table></figure><h2 id="处理NULL值"><a href="#处理NULL值" class="headerlink" title="处理NULL值"></a>处理NULL值</h2><p>SQL使用<code>NULL</code>值和Java使用<code>null</code>是不同的概念。 所以，要在Java中处理SQL <code>NULL</code>值，可以使用三种策略 -</p><ul><li>避免使用返回原始数据类型的<code>getXXX()</code>方法。</li><li>对原始数据类型使用包装类，并使用<code>ResultSet</code>对象的<code>wasNull()</code>方法来测试接收<code>getXXX()</code>方法的返回值的包装器类变量是否应设置为<code>null</code>。</li><li>使用原始数据类型和<code>ResultSet</code>对象的<code>wasNull()</code>方法来测试接收到由<code>getXXX()</code>方法返回的值的原始变量是否应设置为表示<code>NULL</code>的可接受值。</li></ul><p>下面是一个用来处理<code>NULL</code>值的例子 -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Statement stmt = conn.createStatement( );</span><br><span class="line">String sql = <span class="string">&quot;SELECT id, first, last, age FROM Employees&quot;</span>;</span><br><span class="line">ResultSet rs = stmt.executeQuery(sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> id = rs.getInt(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>( rs.wasNull( ) ) &#123;</span><br><span class="line">   id = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>09. jdbc结果集</title>
      <link href="/2022/04/26/JDBC/09.jdbc%E7%BB%93%E6%9E%9C%E9%9B%86/"/>
      <url>/2022/04/26/JDBC/09.jdbc%E7%BB%93%E6%9E%9C%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL语句执行后从数据库查询读取数据，返回的数据放在结果集中。-SELECT语句用于从数据库中选择行并在结果集中查看它们的标准方法。-java-sql-ResultSet接口表示数据库查询的结果集。"><a href="#SQL语句执行后从数据库查询读取数据，返回的数据放在结果集中。-SELECT语句用于从数据库中选择行并在结果集中查看它们的标准方法。-java-sql-ResultSet接口表示数据库查询的结果集。" class="headerlink" title="SQL语句执行后从数据库查询读取数据，返回的数据放在结果集中。 SELECT语句用于从数据库中选择行并在结果集中查看它们的标准方法。 java.sql.ResultSet接口表示数据库查询的结果集。"></a>SQL语句执行后从数据库查询读取数据，返回的数据放在结果集中。 <code>SELECT</code>语句用于从数据库中选择行并在结果集中查看它们的标准方法。 <code>java.sql.ResultSet</code>接口表示数据库查询的结果集。</h2><p><code>ResultSet</code>对象维护指向结果集中当前行的游标。 术语“结果集”是指包含在<code>ResultSet</code>对象中的行和列数据。</p><p><code>ResultSet</code>接口的方法可以分为三类：</p><ul><li><strong>浏览方法</strong>：用于移动光标。</li><li><strong>获取方法</strong>：用于查看光标指向的当前行的列中的数据。</li><li><strong>更新方法</strong>：用于更新当前行的列中的数据。 然后在基础数据库中更新数据。</li></ul><p>光标可以基于<code>ResultSet</code>的属性移动。当创建生成<code>ResultSet</code>的相应<code>Statement</code>时，将指定这些属性。</p><p>JDBC提供以下连接方法来创建具有所需<code>ResultSet</code>的语句 -</p><ul><li><code>createStatement(int RSType, int RSConcurrency);</code></li><li><code>prepareStatement(String SQL, int RSType, int RSConcurrency);</code></li><li><code>prepareCall(String sql, int RSType, int RSConcurrency);</code></li></ul><p>第一个参数表示<code>ResultSet</code>对象的类型，第二个参数是两个<code>ResultSet</code>常量之一，用于指定结果集是只读还是可更新。</p><h2 id="ResultSet类型"><a href="#ResultSet类型" class="headerlink" title="ResultSet类型"></a>ResultSet类型</h2><p>可能的<code>RSType</code>值如下。如果不指定任何<code>ResultSet</code>类型，将自动分配一个<code>TYPE_FORWARD_ONLY</code>值。</p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>ResultSet.TYPE_FORWARD_ONLY</code></td><td>光标只能在结果集中向前移动。</td></tr><tr><td><code>ResultSet.TYPE_SCROLL_INSENSITIVE</code></td><td>光标可以向前和向后滚动，结果集对创建结果集后发生的数据库所做的更改不敏感。</td></tr><tr><td><code>ResultSet.TYPE_SCROLL_SENSITIVE</code></td><td>光标可以向前和向后滚动，结果集对创建结果集之后发生的其他数据库的更改敏感。</td></tr></tbody></table><h2 id="ResultSet的并发性"><a href="#ResultSet的并发性" class="headerlink" title="ResultSet的并发性"></a>ResultSet的并发性</h2><p>可能的<code>RSConcurrency</code>如下。 如果不指定任何并发类型，将自动获得一个<code>CONCUR_READ_ONLY</code>值。</p><table><thead><tr><th>并发</th><th>描述</th></tr></thead><tbody><tr><td><code>ResultSet.CONCUR_READ_ONLY</code></td><td>创建只读结果集，这是默认值。</td></tr><tr><td><code>ResultSet.CONCUR_UPDATABLE</code></td><td>创建可更新的结果集</td></tr></tbody></table><p>到目前为止我们写的所有例子可以写成如下，它初始化一个<code>Statement</code>对象来创建一个只向前的只读<code>ResultSet</code>对象 -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   Statement stmt = conn.createStatement(</span><br><span class="line">                           ResultSet.TYPE_FORWARD_ONLY,</span><br><span class="line">                           ResultSet.CONCUR_READ_ONLY);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exception ex) &#123;</span><br><span class="line">   ....</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">   ....</span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><h2 id="浏览结果集"><a href="#浏览结果集" class="headerlink" title="浏览结果集"></a>浏览结果集</h2><p><code>ResultSet</code>接口中有几种涉及移动光标的方法，包括 -</p><table><thead><tr><th>编号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><code>public void beforeFirst() throws SQLException</code></td><td>将光标移动到第一行之前</td></tr><tr><td>2</td><td><code>public void afterLast() throws SQLException</code></td><td>将光标移动到最后一行之后。</td></tr><tr><td>3</td><td><code>public boolean first() throws SQLException</code></td><td>将光标移动到第一行。</td></tr><tr><td>4</td><td><code>public void last() throws SQLException</code></td><td>将光标移动到最后一行。</td></tr><tr><td>5</td><td><code>public boolean absolute(int row) throws SQLException</code></td><td>将光标移动到指定的行。</td></tr><tr><td>6</td><td><code>public boolean relative(int row) throws SQLException</code></td><td>从当前指向的位置，将光标向前或向后移动给定行数。</td></tr><tr><td>7</td><td><code>public boolean previous() throws SQLException</code></td><td>将光标移动到上一行。 如果上一行关闭结果集，此方法返回<code>false</code>。</td></tr><tr><td>8</td><td><code>public boolean next() throws SQLException</code></td><td>将光标移动到下一行。 如果结果集中没有更多行，则此方法返回<code>false</code>。</td></tr><tr><td>9</td><td><code>public int getRow() throws SQLException</code></td><td>返回光标指向的行号。</td></tr><tr><td>10</td><td><code>public void moveToInsertRow() throws SQLException</code></td><td>将光标移动到结果集中的特殊行，该行可用于将新行插入数据库。当前光标位置被记住。</td></tr><tr><td>11</td><td><code>public void moveToCurrentRow() throws SQLException</code></td><td>如果光标当前位于插入行，则将光标移回当前行; 否则，此方法什么也不做</td></tr></tbody></table><p>为了更好的理解，建议学习<a href="http://www.yiibai.com/jdbc/navigate-result-sets.html">浏览记录示例代码</a>。</p><h2 id="查看结果集"><a href="#查看结果集" class="headerlink" title="查看结果集"></a>查看结果集</h2><p><code>ResultSet</code>接口包含数十种获取当前行数据的方法。</p><p>每个可能的数据类型都有一个<code>get</code>方法，每个<code>get</code>方法有两个版本 -</p><ul><li>一个是采用列名称。</li><li>另一个采用列索引。</li></ul><p>例如，如果对查看感兴趣的列包含一个<code>int</code>，则需要使用<code>ResultSet</code>的其中一个<code>getInt()</code>方法 -</p><table><thead><tr><th>序号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><code>public int getInt(String columnName) throws SQLException</code></td><td>返回名为<code>columnName</code>的列中当前行中的<code>int</code>值。</td></tr><tr><td>2</td><td><code>public int getInt(int columnIndex) throws SQLException</code></td><td>返回指定列索引当前行中的<code>int</code>值。列索引从<code>1</code>开始，意味着行的第一列为<code>1</code>，行的第二列为<code>2</code>，依此类推。</td></tr></tbody></table><p>类似地，在八个Java基元类型中的每一个的<code>ResultSet</code>接口中都有<code>get</code>方法，以及常见的类型，如<code>java.lang.String</code>，<code>java.lang.Object</code>和<code>java.net.URL</code>等。</p><p>还有一些方法可以获取SQL数据类型<code>java.sql.Date，java.sql.Time</code>，<code>java.sql.TimeStamp</code>，<code>java.sql.Clob</code>和<code>java.sql.Blob</code>。查看文档以获取有关使用这些SQL数据类型的更多信息。</p><p>为了更好的理解，建议学习研究<a href="http://www.yiibai.com/jdbc/viewing-result-sets.html">查看结果集示例代码</a></p><h2 id="更新结果集"><a href="#更新结果集" class="headerlink" title="更新结果集"></a>更新结果集</h2><p><code>ResultSet</code>接口包含用于更新结果集的数据的更新方法的集合。</p><p>与get方法一样，每种数据类型都有两种更新方法 - </p><ul><li>一个是采用列名称。</li><li>另一个采用列索引。</li></ul><p>例如，要更新结果集当前行的<code>String</code>列，可以使用以下<code>updateString()</code>方法之一：</p><table><thead><tr><th>序号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><code>public void updateString(int columnIndex, String s) throws SQLException</code></td><td>将指定列中的<code>String</code>值更改为指定的<code>s</code>值。</td></tr><tr><td>2</td><td><code>public void updateString(String columnName, String s) throws SQLException</code></td><td>与前前的方法类似，除了使用列的名称而不是列的索引指定。</td></tr></tbody></table><p>有八种基本数据类型的更新方法，以及<code>java.sql</code>包中的<code>String</code>，<code>Object</code>，<code>URL</code>和SQL数据类型。</p><p>更新结果集中的一行会更改<code>ResultSet</code>对象中当前行的列，但不会更改底层数据库中的列的值。 要更新数据库中的行，需要调用以下方法之一。</p><table><thead><tr><th>序号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><code>public void updateRow()</code></td><td>更新数据库中当前行</td></tr><tr><td>2</td><td><code>public void deleteRow()</code></td><td>从数据库中删除当前行</td></tr><tr><td>3</td><td><code>public void refreshRow()</code></td><td>刷新结果集中的数据以反映数据库中最近的任何更改。</td></tr><tr><td>4</td><td><code>public void cancelRowUpdates()</code></td><td>取消对当前行所做的任何更新。</td></tr><tr><td>5</td><td><code>public void insertRow()</code></td><td>在数据库中插入一行。 只有当光标指向插入行时，才能调用此方法。</td></tr></tbody></table><p>为了更好的理解，建议您学习研究“<a href="http://www.yiibai.com/jdbc/updating-result-sets.html">更新结果集示例代码</a>”</p>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>08.jdbc statements</title>
      <link href="/2022/04/26/JDBC/08.jdbc%20statements/"/>
      <url>/2022/04/26/JDBC/08.jdbc%20statements/</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>当获得了与数据库的连接后，就可以与数据库进行交互了。 JDBC <code>Statement</code>，<code>CallableStatement</code>和<code>PreparedStatement</code>接口定义了可用于发送SQL或<em>PL/SQL</em>命令，并从数据库接收数据的方法和属性。</p><p>它们还定义了有助于在Java和SQL数据类型的数据类型差异转换的方法。<br>下表提供了每个接口定义，以及使用这些接口的目的的总结。</p><table><thead><tr><th>接口</th><th>推荐使用</th></tr></thead><tbody><tr><td><code>Statement</code></td><td>用于对数据库进行通用访问，在运行时使用静态SQL语句时很有用。 <code>Statement</code>接口不能接受参数。</td></tr><tr><td><code>PreparedStatement</code></td><td>当计划要多次使用SQL语句时使用。<code>PreparedStatement</code>接口在运行时接受输入参数。</td></tr><tr><td><code>CallableStatement</code></td><td>当想要访问数据库存储过程时使用。<code>CallableStatement</code>接口也可以接受运行时输入参数。</td></tr></tbody></table><h2 id="1-Statement对象"><a href="#1-Statement对象" class="headerlink" title="1. Statement对象"></a>1. Statement对象</h2><h3 id="1-1-创建Statement对象"><a href="#1-1-创建Statement对象" class="headerlink" title="1.1. 创建Statement对象"></a>1.1. 创建Statement对象</h3><p>在使用<code>Statement</code>对象执行SQL语句之前，需要使用<code>Connection</code>对象的<code>createStatement()</code>方法创建一个<code>Statement</code>对象，如以下示例所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Statement stmt = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   stmt = conn.createStatement( );</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>在创建<code>Statement</code>对象后，可以使用它来执行一个SQL语句，它有三个执行方法可以执行。它们分别是 - </p><ul><li><code>boolean execute (String SQL)</code> ： 如果可以检索到<code>ResultSet</code>对象，则返回一个布尔值<code>true</code>; 否则返回<code>false</code>。使用此方法执行SQL<code>DDL</code>语句或需要使用真正的动态SQL，可使用于执行创建数据库，创建表的SQL语句等等。</li><li><code>int executeUpdate (String SQL):</code> 返回受SQL语句执行影响的行数。使用此方法执行预期会影响多行的SQL语句，例如:<code>INSERT</code>，<code>UPDATE</code>或<code>DELETE</code>语句。</li><li><code>ResultSet executeQuery(String SQL)：</code>返回一个<code>ResultSet</code>对象。 当您希望获得结果集时，请使用此方法，就像使用<code>SELECT</code>语句一样。</li></ul><h3 id="1-2-关闭Statement对象"><a href="#1-2-关闭Statement对象" class="headerlink" title="1.2. 关闭Statement对象"></a>1.2. 关闭Statement对象</h3><p>就像关闭一个<code>Connection</code>对象一样，以保存数据库资源一样，由于同样的原因，还应该关闭<code>Statement</code>对象。</p><p>一个简单的调用<code>close()</code>方法将执行该作业(工作)。 如果先关闭<code>Connection</code>对象，它也会关闭<code>Statement</code>对象。 但是，应该始终显式关闭<code>Statement</code>对象，以确保正确的清理顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Statement stmt = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   stmt = conn.createStatement( );</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">   stmt.close();</span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>为了更好的理解，建议学习<a href="http://www.yiibai.com/jdbc/statement-object-example.html">Statment示例教程</a> 。 </p><h2 id="2-PreparedStatement对象"><a href="#2-PreparedStatement对象" class="headerlink" title="2. PreparedStatement对象"></a>2. PreparedStatement对象</h2><p><code>PreparedStatement</code>接口扩展了<code>Statement</code>接口，它添加了比<code>Statement</code>对象更好一些优点的功能。</p><p>此语句可以动态地提供/接受参数。</p><h3 id="2-1-创建PreparedStatement对象"><a href="#2-1-创建PreparedStatement对象" class="headerlink" title="2.1 创建PreparedStatement对象"></a>2.1 创建PreparedStatement对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PreparedStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   String SQL = <span class="string">&quot;Update Employees SET age = ? WHERE id = ?&quot;</span>;</span><br><span class="line">   pstmt = conn.prepareStatement(SQL);</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>JDBC中的所有参数都由 <code>?</code> 符号作为占位符，这被称为参数标记。 在执行SQL语句之前，必须为每个参数(占位符)提供值。</p><p><code>setXXX()</code>方法将值绑定到参数，其中<code>XXX</code>表示要绑定到输入参数的值的Java数据类型。 如果忘记提供绑定值，则将会抛出一个<code>SQLException</code>。</p><p>每个参数标记是它其顺序位置引用。第一个标记表示位置<code>1</code>，下一个位置<code>2</code>等等。 该方法与Java数组索引不同(它不从<code>0</code>开始)。</p><p>所有<code>Statement</code>对象与数据库交互的方法(a)<code>execute()</code>，(b)<code>executeQuery()</code>和(c)<code>executeUpdate()</code>也可以用于<code>PreparedStatement</code>对象。 但是，这些方法被修改为可以使用输入参数的SQL语句。</p><h3 id="2-2-关闭PreparedStatement对象"><a href="#2-2-关闭PreparedStatement对象" class="headerlink" title="2.2. 关闭PreparedStatement对象"></a>2.2. 关闭PreparedStatement对象</h3><p>就像关闭<code>Statement</code>对象一样，由于同样的原因(节省数据库系统资源)，也应该关闭<code>PreparedStatement</code>对象。</p><p>简单的调用<code>close()</code>方法将执行关闭。 如果先关闭<code>Connection</code>对象，它也会关闭<code>PreparedStatement</code>对象。 但是，应该始终显式关闭<code>PreparedStatement</code>对象，以确保以正确顺序清理资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PreparedStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   String SQL = <span class="string">&quot;Update Employees SET age = ? WHERE id = ?&quot;</span>;</span><br><span class="line">   pstmt = conn.prepareStatement(SQL);</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">   pstmt.close();</span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>为了更好的理解，建议学习<a href="http://www.yiibai.com/jdbc/preparestatement-object-example.html">PreparedStatement示例代码</a> 。</p><h2 id="3-CallableStatement对象"><a href="#3-CallableStatement对象" class="headerlink" title="3. CallableStatement对象"></a>3. CallableStatement对象</h2><p>类似<code>Connection</code>对象创建<code>Statement</code>和<code>PreparedStatement</code>对象一样，它还可以使用同样的方式创建<code>CallableStatement</code>对象，该对象将用于执行对数据库存储过程的调用。</p><h3 id="3-1-创建CallableStatement对象"><a href="#3-1-创建CallableStatement对象" class="headerlink" title="3.1. 创建CallableStatement对象"></a>3.1. 创建CallableStatement对象</h3><p>假设需要执行以下Oracle存储过程 -</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">PROCEDURE</span> getEmpName </span><br><span class="line">   (EMP_ID <span class="keyword">IN</span> NUMBER, EMP_FIRST <span class="keyword">OUT</span> <span class="type">VARCHAR</span>) <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">SELECT</span> <span class="keyword">first</span> <span class="keyword">INTO</span> EMP_FIRST</span><br><span class="line">   <span class="keyword">FROM</span> Employees</span><br><span class="line">   <span class="keyword">WHERE</span> ID <span class="operator">=</span> EMP_ID;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：上面的存储过程是针对Oracle编写的，但是如果您使用MySQL数据库，可使用以下方式来编写MySQL相同的存储过程，如下在EMP数据库中创建它 -</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> IF <span class="keyword">EXISTS</span> `EMP`.`getEmpName` $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> `EMP`.`getEmpName` </span><br><span class="line">   (<span class="keyword">IN</span> EMP_ID <span class="type">INT</span>, <span class="keyword">OUT</span> EMP_FIRST <span class="type">VARCHAR</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">SELECT</span> <span class="keyword">first</span> <span class="keyword">INTO</span> EMP_FIRST</span><br><span class="line">   <span class="keyword">FROM</span> Employees</span><br><span class="line">   <span class="keyword">WHERE</span> ID <span class="operator">=</span> EMP_ID;</span><br><span class="line"><span class="keyword">END</span> $$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"><span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><p>存在三种类型的参数：<code>IN</code>，<code>OUT</code>和<code>INOUT</code>。 <code>PreparedStatement</code>对象只使用<code>IN</code>参数。<code>CallableStatement</code>对象可以使用上面三个参数类型。</p><p>以下是上面三种类型参数的定义 -</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>IN</td><td>创建SQL语句时其参数值是未知的。 使用<code>setXXX()</code>方法将值绑定到<code>IN</code>参数。</td></tr><tr><td>OUT</td><td>由SQL语句返回的参数值。可以使用<code>getXXX()</code>方法从OUT参数中检索值。</td></tr><tr><td>INOUT</td><td>提供输入和输出值的参数。使用<code>setXXX()</code>方法绑定变量并使用<code>getXXX()</code>方法检索值。</td></tr></tbody></table><p>以下代码片段显示了如何使用<code>Connection.prepareCall()</code>方法根据上述存储过程来实例化一个<code>CallableStatement</code>对象 -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CallableStatement cstmt = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   String strSQL = <span class="string">&quot;&#123;call getEmpName (?, ?)&#125;&quot;</span>;</span><br><span class="line">   cstmt = conn.prepareCall (SQL);</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>String变量<code>strSQL</code>表示存储过程，带有两个参数占位符。</p><p>使用<code>CallableStatement</code>对象就像使用<code>PreparedStatement</code>对象一样。 在执行语句之前，必须将值绑定到所有参数，否则将抛出一个<code>SQLException</code>异常。</p><p>如果有<code>IN</code>参数，只需遵循适用于<code>PreparedStatement</code>对象的相同规则和技术; 使用与绑定的Java数据类型相对应的<code>setXXX()</code>方法。</p><p>使用<code>OUT</code>和<code>INOUT</code>参数时，必须使用一个额外的<code>CallableStatement</code>对象方法<code>registerOutParameter()</code>。 <code>registerOutParameter()</code>方法将JDBC数据类型绑定到存储过程并返回预期数据类型。</p><p>当调用存储过程，可以使用适当的<code>getXXX()</code>方法从<code>OUT</code>参数中检索该值。 此方法将检索到的SQL类型的值转换为对应的Java数据类型。</p><h2 id="关闭CallableStatement对象"><a href="#关闭CallableStatement对象" class="headerlink" title="关闭CallableStatement对象"></a>关闭CallableStatement对象</h2><p>就像关闭其他<code>Statement</code>对象一样，由于同样的原因(节省数据库系统资源)，还应该关闭<code>CallableStatement</code>对象。</p><p>简单的调用<code>close()</code>方法将执行关闭<code>CallableStatemen</code>t对象。 如果先关闭<code>Connection</code>对象，它也会关闭<code>CallableStatement</code>对象。 但是，应该始终显式关闭<code>CallableStatement</code>对象，以确保按正确顺序的清理资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CallableStatement cstmt = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   String SQL = <span class="string">&quot;&#123;call getEmpName (?, ?)&#125;&quot;</span>;</span><br><span class="line">   cstmt = conn.prepareCall (SQL);</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">   . . .</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">   cstmt.close();</span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>为了更好的理解，建议参考学习<a href="http://www.yiibai.com/jdbc/callablestatement-object-example.html">Callable示例代码</a>。</p>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>07.jdbc数据库连接</title>
      <link href="/2022/04/26/JDBC/07.jdbc%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/"/>
      <url>/2022/04/26/JDBC/07.jdbc%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>安装相应的驱动程序后，现在是时候来学习使用JDBC建立数据库连接了。</p><p>建立JDBC连接所涉及的编程相当简单。 以下是基本的四个步骤 -</p><ul><li><strong>导入JDBC包</strong>：使用Java语言的<code>import</code>语句在Java代码开头位置导入所需的类。</li><li><strong>注册JDBC驱动程序</strong>：使JVM将所需的驱动程序实现加载到内存中，从而可以满足JDBC请求。</li><li><strong>数据库URL配置</strong>：创建一个正确格式化的地址，指向要连接到的数据库(如：MySQL,Oracle和MSSQL等等)。</li><li><strong>创建连接对象</strong>：最后，调用<code>DriverManager</code>对象的<code>getConnection()</code>方法来建立实际的数据库连接。</li></ul><h2 id="1-导入JDBC包"><a href="#1-导入JDBC包" class="headerlink" title="1. 导入JDBC包"></a>1. 导入JDBC包</h2><p><code>import</code>语句告诉Java编译器在哪里找到在代码中引用的类，<code>import</code>语句一般放置在源代码的开头。<br>要使用标准的JDBC包，它允许在数据库表中执行选择，插入，更新和删除数据，请将以下导入添加到源代码中 -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.* ;  <span class="comment">// for standard JDBC programs</span></span><br><span class="line"><span class="keyword">import</span> java.math.* ; <span class="comment">// for BigDecimal and BigInteger support</span></span><br><span class="line">Java</span><br></pre></td></tr></table></figure><h2 id="2-注册JDBC驱动程序"><a href="#2-注册JDBC驱动程序" class="headerlink" title="2. 注册JDBC驱动程序"></a>2. 注册JDBC驱动程序</h2><p>在使用程序之前，必须先注册该驱动程序。 注册驱动程序是将Oracle驱动程序的类文件加载到内存中的过程，因此可以将其用作JDBC接口的实现。</p><p>只需在程序中一次注册就可以。可以通过两种方式之一来注册驱动程序。</p><h3 id="2-1-方法I-Class-forName"><a href="#2-1-方法I-Class-forName" class="headerlink" title="2.1 方法I - Class.forName()"></a>2.1 方法I - Class.forName()</h3><p>注册驱动程序最常见的方法是使用Java的<code>Class.forName()</code>方法，将驱动程序的类文件动态加载到内存中，并将其自动注册。这个方法是推荐使用的方法，因为它使驱动程序注册可配置和便携。</p><p>以下示例使用<code>Class.forName()</code>注册Oracle驱动程序 -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   Class.forName(<span class="string">&quot;oracle.jdbc.driver.OracleDriver&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(ClassNotFoundException ex) &#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;Error: unable to load driver class!&quot;</span>);</span><br><span class="line">   System.exit(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>使用JDBC驱动程序连接MySQL数据库的示例代码片段 - </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://hostname:port/db_name&quot;</span>,<span class="string">&quot;db_username&quot;</span>, <span class="string">&quot;db_password&quot;</span>);</span><br><span class="line">conn.close();</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>使用<code>getInstance()</code>方法来解决不合规的JVM，但是必须编写两个额外的异常，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   Class.forName(<span class="string">&quot;oracle.jdbc.driver.OracleDriver&quot;</span>).newInstance();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(ClassNotFoundException ex) &#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;Error: unable to load driver class!&quot;</span>);</span><br><span class="line">   System.exit(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">catch</span>(IllegalAccessException ex) &#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;Error: access problem while loading!&quot;</span>);</span><br><span class="line">   System.exit(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">catch</span>(InstantiationException ex) &#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;Error: unable to instantiate driver!&quot;</span>);</span><br><span class="line">   System.exit(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><h3 id="2-2-方法II-DriverManager-registerDriver"><a href="#2-2-方法II-DriverManager-registerDriver" class="headerlink" title="2.2 方法II - DriverManager.registerDriver()"></a>2.2 方法II - DriverManager.registerDriver()</h3><p>第二种方法是使用静态<code>DriverManager.registerDriver()</code>方法来注册驱动程序。</p><p>如果使用的是非JDK兼容的JVM(如Microsoft提供的)，则应使用<code>registerDriver()</code>方法。</p><p>以下示例使用<code>registerDriver()</code>注册Oracle驱动程序 -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   Driver myDriver = <span class="keyword">new</span> oracle.jdbc.driver.OracleDriver();</span><br><span class="line">   DriverManager.registerDriver( myDriver );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(ClassNotFoundException ex) &#123;</span><br><span class="line">   System.out.println(<span class="string">&quot;Error: unable to load driver class!&quot;</span>);</span><br><span class="line">   System.exit(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><h2 id="数据库URL配置"><a href="#数据库URL配置" class="headerlink" title="数据库URL配置"></a>数据库URL配置</h2><p>加载驱动程序后，可以使用<code>DriverManager.getConnection()</code>方法建立连接。 为了方便参考，这里列出三个重载的<code>DriverManager.getConnection()</code>方法 -</p><ul><li><code>getConnection(String url)</code></li><li><code>getConnection(String url, Properties prop)</code></li><li><code>getConnection(String url, String user, String password)</code></li></ul><p>这里每个格式都需要一个数据库URL。 数据库URL是指向数据库的地址。</p><p>制定数据库URL是建立连接相关联的大多数错误问题发生的地方。</p><p>下表列出了常用的JDBC驱动程序名称和数据库URL。</p><table><thead><tr><th>RDBMS</th><th>JDBC驱动程序名称</th><th>URL格式</th></tr></thead><tbody><tr><td>MySQL</td><td><code>com.mysql.jdbc.Driver</code></td><td><code>jdbc:mysql://hostname/databaseName</code></td></tr><tr><td>ORACLE</td><td><code>oracle.jdbc.driver.OracleDriver</code></td><td><code>jdbc:oracle:thin:@hostname:portNumber:databaseName</code></td></tr><tr><td>PostgreSQL</td><td><code>org.postgresql.Driver</code></td><td><code>jdbc:postgresql://hostname:port/dbname</code></td></tr><tr><td>DB2</td><td><code>com.ibm.db2.jdbc.net.DB2Driver</code></td><td><code>jdbc:db2:hostname:port Number/databaseName</code></td></tr><tr><td>Sybase</td><td><code>com.sybase.jdbc.SybDriver</code></td><td><code>jdbc:sybase:Tds:hostname: portNumber/databaseName</code></td></tr></tbody></table><p>URL格式的所有突出部分都是静态的，只需要根据数据库设置更改对应的部分。</p><h2 id="创建连接对象"><a href="#创建连接对象" class="headerlink" title="创建连接对象"></a>创建连接对象</h2><p>上面列出了三种形式的<code>DriverManager.getConnection()</code>方法来创建一个连接对象。</p><h2 id="使用具有用户名和密码的数据库URL"><a href="#使用具有用户名和密码的数据库URL" class="headerlink" title="使用具有用户名和密码的数据库URL"></a>使用具有用户名和密码的数据库URL</h2><p><code>getConnection()</code>最常用的形式要求传递数据库URL，用户名和密码：</p><p>假设使用Oracle thin驱动程序，那么需要为URL的数据库部分指定：<code>host:port:databaseName</code>值。</p><p>如果主机名为<strong>amrood</strong>的TCP/IP地址为<em>192.0.0.10</em>，并且Oracle侦听器配置为侦听端口<code>1521</code>，并且要连接的数据库名称是<code>EMP</code>，则完整的数据库URL将是 -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc:oracle:thin:<span class="meta">@amrood</span>:<span class="number">1521</span>:EMP</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">jdbc:oracle:thin:@<span class="number">192.0</span><span class="number">.0</span><span class="number">.10</span>:<span class="number">1521</span>:EMP</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>现在必须使用适当的用户名和密码调用<code>getConnection()</code>方法获取一个<code>Connection</code>对象，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String URL = <span class="string">&quot;jdbc:oracle:thin:@amrood:1521:EMP&quot;</span>;</span><br><span class="line"><span class="comment">// String URL = &quot;jdbc:oracle:thin:@192.0.0.10:1521:EMP&quot;;</span></span><br><span class="line">String USER = <span class="string">&quot;username&quot;</span>;</span><br><span class="line">String PASS = <span class="string">&quot;password&quot;</span></span><br><span class="line">Connection conn = DriverManager.getConnection(URL, USER, PASS);</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><h3 id="仅使用数据库URL"><a href="#仅使用数据库URL" class="headerlink" title="仅使用数据库URL"></a>仅使用数据库URL</h3><p><code>DriverManager.getConnection()</code>方法的第二种形式只需要数据库URL -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DriverManager.getConnection(String url);</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>但是，在本示例中，数据库URL包括用户名和密码，并具有以下一般形式 -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jdbc:oracle:driver:username/password<span class="meta">@database</span></span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>所以，上述连接可以使用如下方式创建 -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String URL = <span class="string">&quot;jdbc:oracle:thin:username/password@192.168.0.10:1521:EMP&quot;</span>;</span><br><span class="line">Connection conn = DriverManager.getConnection(URL);</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><h3 id="使用数据库URL和Properties对象"><a href="#使用数据库URL和Properties对象" class="headerlink" title="使用数据库URL和Properties对象"></a>使用数据库URL和Properties对象</h3><p><code>DriverManager.getConnection()</code>方法的第三种形式需要一个数据库URL和一个<code>Properties</code>对象 -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DriverManager.getConnection(String url, Properties info);</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p><code>Properties</code>对象包含一组键-值对。 在调用<code>getConnection()</code>方法时，它用于将驱动程序属性传递给驱动程序。</p><p>要进行与上述示例相同的连接，请使用以下代码 -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line">String URL = <span class="string">&quot;jdbc:oracle:thin:@amrood:1521:EMP&quot;</span>;</span><br><span class="line">Properties info = <span class="keyword">new</span> Properties( );</span><br><span class="line">info.put( <span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span> );</span><br><span class="line">info.put( <span class="string">&quot;password&quot;</span>, <span class="string">&quot;password12321&quot;</span> );</span><br><span class="line"></span><br><span class="line">Connection conn = DriverManager.getConnection(URL, info);</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><h2 id="关闭JDBC连接"><a href="#关闭JDBC连接" class="headerlink" title="关闭JDBC连接"></a>关闭JDBC连接</h2><p>在JDBC程序结束之后，显式地需要关闭与数据库的所有连接以结束每个数据库会话。 但是，如果在编写程序中忘记了关闭也没有关系，Java的垃圾收集器将在清除过时的对象时也会关闭这些连接。</p><p>依靠垃圾收集，特别是数据库编程，是一个非常差的编程实践。所以应该要使用与连接对象关联的<code>close()</code>方法关闭连接。</p><p>要确保连接已关闭，可以将关闭连接的代码中编写在“<code>finally</code>”块中。 一个<code>finally</code>块总是会被执行，不管是否发生异常。</p><p>要关闭上面打开的连接，应该调用<code>close()</code>方法如下 -</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conn.close();</span><br><span class="line"><span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><p>显式关闭连接可节省数据库系统的资源。为了更好的理解，建议您学习的<a href="http://www.yiibai.com/jdbc/jdbc-sample-code.html">JDBC示例代码教程</a>。</p><p>参考Oracle+JDBC示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yiibai;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OracleJDBCExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-------- Oracle JDBC Connection Testing ------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            Class.forName(<span class="string">&quot;oracle.jdbc.driver.OracleDriver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;Where is your Oracle JDBC Driver?&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Oracle JDBC Driver Registered!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            connection = DriverManager.getConnection(</span><br><span class="line">                    <span class="string">&quot;jdbc:oracle:thin:@localhost:1521:xe&quot;</span>, <span class="string">&quot;system&quot;</span>, <span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;Connection Failed! Check output console&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;You made it, take control your database now!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Failed to make connection!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06.jdbc驱动程序类型</title>
      <link href="/2022/04/26/JDBC/06.JDBC%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F%E7%B1%BB%E5%9E%8B/"/>
      <url>/2022/04/26/JDBC/06.JDBC%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="JDBC驱动程序是什么？"><a href="#JDBC驱动程序是什么？" class="headerlink" title="JDBC驱动程序是什么？"></a><strong>JDBC驱动程序是什么？</strong></h2><p>JDBC驱动程序在JDBC API中实现定义的接口，用于与数据库服务器进行交互。</p><p>例如，使用JDBC驱动程序，可以通过发送SQL或数据库命令，然后使用Java接收结果来打开数据库连接并与数据库进行交互。</p><p>JDK附带的<code>Java.sql</code>包包含各种类，其类的行为被定义，实现在第三方驱动程序中完成。 第三方供应商在其数据库驱动程序中实现<code>java.sql.Driver</code>接口。</p><h2 id="JDBC驱动程序类型"><a href="#JDBC驱动程序类型" class="headerlink" title="JDBC驱动程序类型"></a>JDBC驱动程序类型</h2><p>JDBC驱动程序实现因Java运行的各种操作系统和硬件平台而异。 Sun将实现类型分为四种类型，分别为<code>1</code>,<code>2</code>,<code>3</code>和<code>4</code>类型，如下所述：</p><h3 id="类型1：JDBC-ODBC桥驱动程序"><a href="#类型1：JDBC-ODBC桥驱动程序" class="headerlink" title="类型1：JDBC-ODBC桥驱动程序"></a>类型1：JDBC-ODBC桥驱动程序</h3><p>在<strong>类型1</strong>驱动程序中，JDBC桥接器用于访问安装在每台客户机上的ODBC驱动程序。 使用ODBC需要在系统上配置表示目标数据库的数据源名称(DSN)。</p><p>当Java第一次出现时，这是一个驱动程序，因为大多数数据库仅支持ODBC访问，但现在这种类型的驱动程序仅推荐用于实验性使用或没有其他替代方案时使用。</p><p><img src="http://www.yiibai.com/uploads/images/201705/3005/696110505_18575.jpg" alt="img"></p><p><strong>JDK 1.2</strong>附带的JDBC-ODBC桥接是这种驱动程序的一个很好的例子。</p><h3 id="类型2：JDBC本地API"><a href="#类型2：JDBC本地API" class="headerlink" title="类型2：JDBC本地API"></a>类型2：JDBC本地API</h3><p>在<strong>类型2</strong>驱动程序中，JDBC API调用将转换为本地C/C++ API调用，这是数据库唯一的。 这些驱动程序通常由数据库供应商提供，并以与JDBC-ODBC桥接相同的方式使用。 必须在每个客户机上安装供应商特定的驱动程序。</p><p>如果要更改数据库，则必须更改原生API，因为它特定于数据库，并且现在大部分已经过时，但是使用<strong>类型2</strong>驱动程序实现了一些扩展功能的开发，它消除了ODBC的开销。</p><p><img src="http://www.yiibai.com/uploads/images/201705/3005/881110514_49239.jpg" alt="img"></p><p>Oracle调用接口(OCI)驱动程序是<strong>类型2</strong>驱动程序的示例。</p><h3 id="类型3：JDBC-Net纯Java"><a href="#类型3：JDBC-Net纯Java" class="headerlink" title="类型3：JDBC-Net纯Java"></a>类型3：JDBC-Net纯Java</h3><p>在<strong>类型3</strong>驱动程序中，使用三层方法访问数据库。 JDBC客户端使用标准网络套接字与中间件应用程序服务器进行通信。 套接字信息随后由中间件应用服务器转换成DBMS所需的调用格式，并转发到数据库服务器。</p><p>这种驱动程序是非常灵活的，因为它不需要在客户端上安装代码，一个驱动程序实际上可以提供多个数据库的访问。</p><p><img src="http://www.yiibai.com/uploads/images/201705/3005/700110516_88885.jpg" alt="img"></p><p>可以将应用程序服务器视为JDBC“代理”，它会调用客户端应用程序。 因此，我们需要了解应用程序服务器的配置，才能有效地使用此驱动程序类型。</p><p>应用程序服务器可能会使用类型1,2或4驱动程序与数据库通信，了解细微差别对理解JDBC是有帮助的。</p><h3 id="类型4：100％纯Java"><a href="#类型4：100％纯Java" class="headerlink" title="类型4：100％纯Java"></a>类型4：100％纯Java</h3><p>在<strong>类型4</strong>驱动程序中，基于纯Java的驱动程序通过套接字连接与供应商的数据库直接通信。 这是数据库可用的最高性能驱动程序，通常由供应商自己提供。</p><p>这种驱动是非常灵活的，不需要在客户端或服务器上安装特殊的软件。 此外，这些驱动程序可以动态下载。</p><p><img src="http://www.yiibai.com/uploads/images/201705/3005/770110529_65984.jpg" alt="img"></p><p>MySQL <code>Connector/J</code>驱动程序是<strong>类型4</strong>驱动程序。 由于其网络协议的专有性质，数据库供应商通常提供<strong>类型4</strong>驱动程序。</p><h2 id="应该使用哪个驱动程序？"><a href="#应该使用哪个驱动程序？" class="headerlink" title="应该使用哪个驱动程序？"></a>应该使用哪个驱动程序？</h2><p>如果您正在访问一种类型的数据库，例如Oracle，Sybase或IBM DB2，则首选驱动程序类型为<strong>类型4</strong>。</p><p>如果Java应用程序同时访问多种类型的数据库，则<strong>类型3</strong>是首选驱动程序。</p><p><strong>类型2</strong>驱动程序在数据库不可用的<strong>类型3</strong>或<strong>类型4</strong>驱动程序的情况下使用。</p><p><strong>类型1</strong>驱动程序不被视为部署级驱动程序，通常仅用于开发和测试目的。</p>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05.jdbc简单事例代码</title>
      <link href="/2022/04/26/JDBC/05.jdbc%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81/"/>
      <url>/2022/04/26/JDBC/05.jdbc%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="本文章教程中将演示如何创建一个简单的JDBC应用程序的示例。-这将显示如何打开数据库连接，执行SQL查询并显示结果。"><a href="#本文章教程中将演示如何创建一个简单的JDBC应用程序的示例。-这将显示如何打开数据库连接，执行SQL查询并显示结果。" class="headerlink" title="本文章教程中将演示如何创建一个简单的JDBC应用程序的示例。 这将显示如何打开数据库连接，执行SQL查询并显示结果。"></a>本文章教程中将演示如何创建一个简单的JDBC应用程序的示例。 这将显示如何打开数据库连接，执行SQL查询并显示结果。</h2><p>这个示例代码中涉及所有步骤，一些步骤将在本教程的后续章节中进行说明。</p><h2 id="创建JDBC应用程序"><a href="#创建JDBC应用程序" class="headerlink" title="创建JDBC应用程序"></a>创建JDBC应用程序</h2><p>构建JDBC应用程序涉及以下六个步骤 -</p><ul><li><strong>导入包</strong>：需要包含包含数据库编程所需的JDBC类的包。 大多数情况下，使用<code>import java.sql.*</code>就足够了。</li><li><strong>注册JDBC驱动程序</strong>：需要初始化驱动程序，以便可以打开与数据库的通信通道。</li><li><strong>打开一个连接</strong>：需要使用<code>DriverManager.getConnection()</code>方法创建一个<code>Connection</code>对象，它表示与数据库的物理连接。</li><li><strong>执行查询</strong>：需要使用类型为<code>Statement</code>的对象来构建和提交SQL语句到数据库。</li><li><strong>从结果集中提取数据</strong>：需要使用相应的<code>ResultSet.getXXX()</code>方法从结果集中检索数据。</li><li><strong>清理环境</strong>：需要明确地关闭所有数据库资源，而不依赖于JVM的垃圾收集。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>当您以后需要创建自己的JDBC应用程序时，可将此示例可以作为模板使用，建议您收藏好此网页。</p><p>此示例代码是基于上一章完成的环境和数据库设置之后编写的。</p><p>在<em>FirstExample.java</em> (F:\worksp\jdbc\FirstExample.java)中复制并粘贴以下示例，编译并运行如下 -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//STEP 1. Import required packages</span></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstExample</span> </span>&#123;</span><br><span class="line">   <span class="comment">// JDBC driver name and database URL</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String JDBC_DRIVER = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;  </span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String DB_URL = <span class="string">&quot;jdbc:mysql://localhost/emp&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//  Database credentials</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String USER = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String PASS = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   Connection conn = <span class="keyword">null</span>;</span><br><span class="line">   Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="comment">//STEP 2: Register JDBC driver</span></span><br><span class="line">      Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//STEP 3: Open a connection</span></span><br><span class="line">      System.out.println(<span class="string">&quot;Connecting to database...&quot;</span>);</span><br><span class="line">      conn = DriverManager.getConnection(DB_URL,USER,PASS);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//STEP 4: Execute a query</span></span><br><span class="line">      System.out.println(<span class="string">&quot;Creating statement...&quot;</span>);</span><br><span class="line">      stmt = conn.createStatement();</span><br><span class="line">      String sql;</span><br><span class="line">      sql = <span class="string">&quot;SELECT id, first, last, age FROM Employees&quot;</span>;</span><br><span class="line">      ResultSet rs = stmt.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//STEP 5: Extract data from result set</span></span><br><span class="line">      <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">         <span class="comment">//Retrieve by column name</span></span><br><span class="line">         <span class="keyword">int</span> id  = rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">         <span class="keyword">int</span> age = rs.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">         String first = rs.getString(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">         String last = rs.getString(<span class="string">&quot;last&quot;</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//Display values</span></span><br><span class="line">         System.out.print(<span class="string">&quot;ID: &quot;</span> + id);</span><br><span class="line">         System.out.print(<span class="string">&quot;, Age: &quot;</span> + age);</span><br><span class="line">         System.out.print(<span class="string">&quot;, First: &quot;</span> + first);</span><br><span class="line">         System.out.println(<span class="string">&quot;, Last: &quot;</span> + last);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//STEP 6: Clean-up environment</span></span><br><span class="line">      rs.close();</span><br><span class="line">      stmt.close();</span><br><span class="line">      conn.close();</span><br><span class="line">   &#125;<span class="keyword">catch</span>(SQLException se)&#123;</span><br><span class="line">      <span class="comment">//Handle errors for JDBC</span></span><br><span class="line">      se.printStackTrace();</span><br><span class="line">   &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">      <span class="comment">//Handle errors for Class.forName</span></span><br><span class="line">      e.printStackTrace();</span><br><span class="line">   &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">      <span class="comment">//finally block used to close resources</span></span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(stmt!=<span class="keyword">null</span>)</span><br><span class="line">            stmt.close();</span><br><span class="line">      &#125;<span class="keyword">catch</span>(SQLException se2)&#123;</span><br><span class="line">      &#125;<span class="comment">// nothing we can do</span></span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)</span><br><span class="line">            conn.close();</span><br><span class="line">      &#125;<span class="keyword">catch</span>(SQLException se)&#123;</span><br><span class="line">         se.printStackTrace();</span><br><span class="line">      &#125;<span class="comment">//end finally try</span></span><br><span class="line">   &#125;<span class="comment">//end try</span></span><br><span class="line">   System.out.println(<span class="string">&quot;There are so thing wrong!&quot;</span>);</span><br><span class="line">&#125;<span class="comment">//end main</span></span><br><span class="line">&#125;<span class="comment">//end FirstExample</span></span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>把上面代码存放到 <em>F:\worksp\jdbc\FirstExample.java</em> 文件中，并创建一个目录：<em>F:\worksp\jdbc\libs</em>，下载 <code>mysql-connector-java-5.1.40-bin.jar</code> 放入到<em>F:\worksp\jdbc\libs</em> 目录中。</p><p>下载地址：<a href="http://downloads.mysql.com/archives/c-j/">http://downloads.mysql.com/archives/c-j/</a></p><p>使用命令行编译Java程序并加载指定目录中的Jar包(<code>mysql-connector-java-5.1.40-bin.jar</code>)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">F:\worksp\jdbc&gt; javac -Djava.ext.dirs=./libs FirstExample.java</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#-- 或者</span></span></span><br><span class="line">F:\worksp\jdbc&gt; javac -Djava.ext.dirs=F:\worksp\jdbc\libs FirstExample.java</span><br><span class="line">Shell</span><br></pre></td></tr></table></figure><p>编译上面代码后，得到以下结果 -</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># F:\worksp\jdbc&gt;javac -Djava.ext.dirs=./libs FirstExample.java</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 运行程序 -</span></span></span><br><span class="line">F:\worksp\jdbc&gt;java -Djava.ext.dirs=./libs FirstExample</span><br><span class="line">Connecting to database...</span><br><span class="line">Tue May 30 22:43:18 CST 2017 WARN: Establishing SSL connection without server&#x27;s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn&#x27;t set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to &#x27;false&#x27;. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification.</span><br><span class="line">Creating statement...</span><br><span class="line">ID: 100, Age: 28, First: Max, Last: Su</span><br><span class="line">ID: 101, Age: 25, First: Wei, Last: Wang</span><br><span class="line">ID: 102, Age: 30, First: Xueyou, Last: Zhang</span><br><span class="line">ID: 103, Age: 28, First: Jack, Last: Ma</span><br><span class="line">There are so thing wrong!</span><br><span class="line"></span><br><span class="line">F:\worksp\jdbc&gt;</span><br><span class="line">Shell</span><br></pre></td></tr></table></figure><p>完整的执行过程如下 - </p><p><img src="http://www.yiibai.com/uploads/images/201705/3005/385100551_66513.png" alt="img"></p><p>或者使用 <code>Eclipse</code> 或其它IDE创建代码执行。</p>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04.jdbc配置环境</title>
      <link href="/2022/04/26/JDBC/04.jdbc%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/04/26/JDBC/04.jdbc%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="要开始使用JDBC开发应用程序，应该按照以下步骤设置您的JDBC环境。-我们假设在Windows平台上工作-开发JDBC程序-。"><a href="#要开始使用JDBC开发应用程序，应该按照以下步骤设置您的JDBC环境。-我们假设在Windows平台上工作-开发JDBC程序-。" class="headerlink" title="要开始使用JDBC开发应用程序，应该按照以下步骤设置您的JDBC环境。 我们假设在Windows平台上工作(开发JDBC程序)。"></a>要开始使用JDBC开发应用程序，应该按照以下步骤设置您的JDBC环境。 我们假设在Windows平台上工作(开发JDBC程序)。</h2><h2 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h2><p>从Java官方网站安装J2SE Development Kit 5.0(JDK 5.0)或以上版本。</p><p>有关JAVA JDK的安装，请参考： <a href="http://www.yiibai.com/java/java_environment_setup.html">http://www.yiibai.com/java/java_environment_setup.html</a></p><h2 id="安装MySQL数据库"><a href="#安装MySQL数据库" class="headerlink" title="安装MySQL数据库"></a>安装MySQL数据库</h2><p>最重要的事情当然是具有可以查询和修改的表的数据库，这里我们以MySQL为例来讲解JDBC的操作实例。</p><p>当然，您也可以安装最适合您的数据库。 可以有很多选择，最常见的是 -</p><ul><li><strong>MySQL数据库</strong>：MySQL是一个开源数据库。 可以从<a href="http://dev.mysql.com/downloads/mysql">MySQL官方网站</a>下载。 我们建议下载完整的Windows安装。或者可以参考我们的<a href="http://www.yiibai.com/mysql/mysql_installation.html">MySQL安装教程</a>。</li><li><strong>PostgreSQL数据库</strong>：PostgreSQL是一个开源数据库。可以从PostgreSQL官方网站下载。或者可以参考我们的<a href="http://www.yiibai.com/postgresql/install-postgresql.html">PostgreSQL教程</a>。</li><li><strong>Oracle数据库</strong>：<a href="http://www.studyoracle.cn/">Oracle</a>数据库是由Oracle公司销售的商业数据库，可参考：<a href="http://www.studyoracle.cn/quickstart/sql-tutorial-for-beginners-with-oracle.html">http://www.studyoracle.cn/quickstart/sql-tutorial-for-beginners-with-oracle.html</a> </li></ul><h2 id="安装数据库驱动程序"><a href="#安装数据库驱动程序" class="headerlink" title="安装数据库驱动程序"></a>安装数据库驱动程序</h2><p>最新的JDK包括一个JDBC-ODBC桥接驱动程序，它使大多数开放数据库连接(ODBC)驱动程序可用于使用JDBC API的程序序。</p><p>大多数数据库供应商都在提供适当的JDBC驱动程序以及数据库安装。 所以，不应该担心这部分。</p><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>要创建<code>EMP</code>数据库，请使用以下步骤：</p><h3 id="1-第1步"><a href="#1-第1步" class="headerlink" title="1. 第1步"></a>1. 第1步</h3><p>打开命令提示符，并按如下所示进入安装MySQL目的录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt;</span><br><span class="line">C:\Program Files\MySQL\MySQL Server 5.7&gt;bin</span><br><span class="line">C:\Program Files\MySQL\MySQL Server 5.7\bin&gt;</span><br><span class="line">Shell</span><br></pre></td></tr></table></figure><p>注意：<code>mysqld.exe</code>的路径可能会因系统上的MySQL安装位置而异。可以查看有关如何启动和停止数据库服务器的文档。</p><h3 id="2-第2步"><a href="#2-第2步" class="headerlink" title="2. 第2步"></a>2. 第2步</h3><p>通过执行以下命令(如果它尚未运行)启动数据库服务器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\MySQL\MySQL Server 5.7\bin&gt;mysqld.exe</span><br><span class="line">C:\Program Files\MySQL\MySQL Server 5.7\bin&gt;</span><br><span class="line">Shell</span><br></pre></td></tr></table></figure><p>或者从服务中启动 - </p><p><img src="http://www.yiibai.com/uploads/images/201705/3005/565100508_58663.png" alt="img"></p><h3 id="3-第3步"><a href="#3-第3步" class="headerlink" title="3. 第3步"></a>3. 第3步</h3><p>通过执行以下命令创建<code>EMP</code>数据库 -</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\MySQL\MySQL Server 5.7\bin&gt;mysqladmin create EMP -u root -p</span><br><span class="line">Enter password: ******</span><br><span class="line"></span><br><span class="line">C:\Program Files\MySQL\MySQL Server 5.7\bin&gt;</span><br><span class="line">Shell</span><br></pre></td></tr></table></figure><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><p>要在<code>EMP</code>数据库中创建<code>Employees</code>表，请参照以下步骤：</p><h3 id="1-第1步-1"><a href="#1-第1步-1" class="headerlink" title="1. 第1步"></a>1. 第1步</h3><p>打开命令提示符，并按如下所示进入MySQL安装目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt;</span><br><span class="line">C:\Program Files\MySQL\MySQL Server 5.7&gt;bin</span><br><span class="line">C:\Program Files\MySQL\MySQL Server 5.7\bin&gt;</span><br><span class="line">Shell</span><br></pre></td></tr></table></figure><h3 id="2-第2步-1"><a href="#2-第2步-1" class="headerlink" title="2. 第2步"></a>2. 第2步</h3><p>登录到数据库如下 -</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\MySQL\MySQL Server 5.7\bin&gt; mysql -u root -p</span><br><span class="line">Enter password: ********</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"></span></span><br><span class="line"><span class="bash">Shell</span></span><br></pre></td></tr></table></figure><h3 id="3-第3步-1"><a href="#3-第3步-1" class="headerlink" title="3. 第3步"></a>3. 第3步</h3><p>创建表<code>Employee</code>如下 -</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> use EMP;</span><br><span class="line">Database changed</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">table</span> Employees (</span><br><span class="line">  id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  age <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  <span class="keyword">first</span> <span class="type">varchar</span> (<span class="number">255</span>),</span><br><span class="line">  <span class="keyword">last</span> <span class="type">varchar</span> (<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.08</span> sec)</span><br><span class="line">mysql<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><h2 id="创建数据记录"><a href="#创建数据记录" class="headerlink" title="创建数据记录"></a>创建数据记录</h2><p>最后，在<code>Employee</code>表中创建(插入)几条数据记录如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> Employees <span class="keyword">VALUES</span> (<span class="number">100</span>, <span class="number">28</span>, <span class="string">&#x27;Max&#x27;</span>, <span class="string">&#x27;Su&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.05</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> Employees <span class="keyword">VALUES</span> (<span class="number">101</span>, <span class="number">25</span>, <span class="string">&#x27;Wei&#x27;</span>, <span class="string">&#x27;Wang&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> Employees <span class="keyword">VALUES</span> (<span class="number">102</span>, <span class="number">30</span>, <span class="string">&#x27;Xueyou&#x27;</span>, <span class="string">&#x27;Zhang&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> Employees <span class="keyword">VALUES</span> (<span class="number">103</span>, <span class="number">28</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="string">&#x27;Ma&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><p>现在，来看看 <code>Employees</code> 表中的数据 - </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-----+--------+-------+</span></span><br><span class="line"><span class="operator">|</span> id  <span class="operator">|</span> age <span class="operator">|</span> <span class="keyword">first</span>  <span class="operator">|</span> <span class="keyword">last</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-----+--------+-------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">100</span> <span class="operator">|</span>  <span class="number">28</span> <span class="operator">|</span> Max    <span class="operator">|</span> Su    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">101</span> <span class="operator">|</span>  <span class="number">25</span> <span class="operator">|</span> Wei    <span class="operator">|</span> Wang  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">102</span> <span class="operator">|</span>  <span class="number">30</span> <span class="operator">|</span> Xueyou <span class="operator">|</span> Zhang <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">103</span> <span class="operator">|</span>  <span class="number">28</span> <span class="operator">|</span> Jack   <span class="operator">|</span> Ma    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+-----+--------+-------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><p>要进一步了解MySQL数据库，请阅读<a href="http://www.yiibai.com/mysql/">MySQL教程</a>。</p><p>现在，已经准备好了使用JDBC的前期工作。 下一章学习JDBC编程示例。</p>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03.jdbc sql语法</title>
      <link href="/2022/04/26/JDBC/03.jdbc%20sql%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/04/26/JDBC/03.jdbc%20sql%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="结构化查询语言-SQL-是一种标准化语言，允许对数据库执行操作，例如：创建数据记录，读取内容，更新内容和删除数据记录等。"><a href="#结构化查询语言-SQL-是一种标准化语言，允许对数据库执行操作，例如：创建数据记录，读取内容，更新内容和删除数据记录等。" class="headerlink" title="结构化查询语言(SQL)是一种标准化语言，允许对数据库执行操作，例如：创建数据记录，读取内容，更新内容和删除数据记录等。"></a>结构化查询语言(SQL)是一种标准化语言，允许对数据库执行操作，例如：创建数据记录，读取内容，更新内容和删除数据记录等。</h2><p>本教程中将概述SQL，这是了解和学习JDBC概念的前提条件。 经过本章后，您将能够在数据库中创建，创建，读取，更新和删除(通常称为CRUD操作)数据。</p><p>有关SQL的详细了解，可以阅读我们的<a href="http://www.yiibai.com/mysql">MySQL教程</a> 。 </p><p><strong>1. 创建数据库</strong></p><p><code>CREATE DATABASE</code>语句用于创建新的数据库。 语法是 -</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">CREATE</span> DATABASE DATABASE_NAME;</span><br><span class="line"><span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><p><strong>示例</strong><br>以下SQL语句创建一个名为<code>EMP</code>的数据库 -</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">CREATE</span> DATABASE EMP;</span><br><span class="line"><span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><p><strong>2. 删除数据库</strong></p><p><code>DROP DATABASE</code>语句用于删除存在的数据库。 语法是 -</p><blockquote><p><strong>注意</strong>：要创建或删除数据库，需要有数据库服务器的管理员权限。 需要特别小心的是：删除数据库将丢失数据库中存储的所有数据(无法恢复)。</p></blockquote><p><strong>3. 创建表</strong></p><p><code>CREATE TABLE</code>语句用于创建新表。 语法是 -</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line">(</span><br><span class="line">   column_name column_data_type,</span><br><span class="line">   column_name column_data_type,</span><br><span class="line">   column_name column_data_type</span><br><span class="line">   ...</span><br><span class="line">);</span><br><span class="line"><span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><p>以下SQL语句创建一个名为<code>Employees</code>的表，其中包含四列：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Employees</span><br><span class="line">(</span><br><span class="line">   id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   age <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   <span class="keyword">first</span> <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">   <span class="keyword">last</span> <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">   <span class="keyword">PRIMARY</span> KEY ( id )</span><br><span class="line">);</span><br><span class="line"><span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><p><strong>4. 删除表</strong></p><p><code>DROP TABLE</code>语句用于删除存在的表。 语法是 -</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">DROP</span> <span class="keyword">TABLE</span> table_name;</span><br><span class="line"><span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><p>以下SQL语句删除名为<code>Employees</code>的表 -</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">DROP</span> <span class="keyword">TABLE</span> Employees;</span><br><span class="line"><span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><p><strong>5. INSERT数据</strong></p><p><code>INSERT</code>的语法如下所示，其中<code>column1</code>，<code>column2</code>等表示要显示在相应列中的数据值 -</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name <span class="keyword">VALUES</span> (column1, column2, ...);</span><br><span class="line"><span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><p>以下SQL <code>INSERT</code>语句在先前创建的<code>Employees</code>表中插入一个新行 -</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> Employees <span class="keyword">VALUES</span> (<span class="number">100</span>, <span class="number">18</span>, <span class="string">&#x27;Max&#x27;</span>, <span class="string">&#x27;Su&#x27;</span>);</span><br><span class="line"><span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><p><strong>6. 查询数据</strong></p><p><code>SELECT</code>语句用于从数据库检索数据。 <code>SELECT</code>的语法是 -</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">SELECT</span> column_name, column_name, ...</span><br><span class="line">     <span class="keyword">FROM</span> table_name</span><br><span class="line">     <span class="keyword">WHERE</span> conditions;</span><br><span class="line"><span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><p><code>WHERE</code>子句可以使用比较运算符，例如：<code>=</code>，<code>!=</code>，<code>&lt;</code>，<code>&gt;</code>，<code>&lt;=</code>和<code>&gt;=</code>，以及<code>BETWEEN</code>和<code>LIKE</code>运算符。</p><p><strong>示例</strong></p><p>以下SQL语句从<code>Employees</code>表中选择：<code>age</code>，<code>first</code>和<code>last</code>列，其中<code>id</code>列为<code>100</code> -</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">first</span>, <span class="keyword">last</span>, age </span><br><span class="line">     <span class="keyword">FROM</span> Employees </span><br><span class="line">     <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><p>以下SQL语句从<code>Employees</code>表中选择：<code>age</code>, <code>first</code> 和 <code>last</code> 列，其中<code>first</code>列包含<code>Max</code> -</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="keyword">first</span>, <span class="keyword">last</span>, age </span><br><span class="line">     <span class="keyword">FROM</span> Employees </span><br><span class="line">     <span class="keyword">WHERE</span> <span class="keyword">first</span> <span class="keyword">LIKE</span> <span class="string">&#x27;%Max%&#x27;</span>;</span><br><span class="line"><span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><p><strong>7. 更新数据</strong></p><p><code>UPDATE</code>语句用于更新数据。 <code>UPDATE</code>的语法是 -</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> UPDATE table_name</span><br><span class="line">     <span class="keyword">SET</span> column_name <span class="operator">=</span> <span class="keyword">value</span>, column_name <span class="operator">=</span> <span class="keyword">value</span>, ...</span><br><span class="line">     <span class="keyword">WHERE</span> conditions;</span><br><span class="line"><span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><p><code>WHERE</code>子句可以使用比较运算符，例如：<code>=</code>，<code>!=</code>，<code>&lt;</code>，<code>&gt;</code>，<code>&lt;=</code>和<code>&gt;=</code>，以及<code>BETWEEN</code>和<code>LIKE</code>运算符。</p><p><strong>示例</strong></p><p>以下SQL <code>UPDATE</code>语句更新<code>id</code>为<code>100</code>的雇员的<code>age</code>列的值为：<code>20</code>，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> UPDATE Employees <span class="keyword">SET</span> age<span class="operator">=</span><span class="number">20</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">100</span>;</span><br><span class="line"><span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><p><strong>8. 删除数据</strong></p><p><code>DELETE</code>语句用于从表中删除数据。 <code>DELETE</code>的语法是 -</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> conditions;</span><br><span class="line"><span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><p><code>WHERE</code>子句可以使用比较运算符，例如：<code>=</code>，<code>!=</code>，<code>&lt;</code>，<code>&gt;</code>，<code>&lt;=</code>和<code>&gt;=</code>，以及<code>BETWEEN</code>和<code>LIKE</code>运算符。</p><p><strong>示例</strong></p><p>以下SQL <code>DELETE</code>语句将删除<code>ID</code>为<code>100</code>的员工的记录 -</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">DELETE</span> <span class="keyword">FROM</span> Employees <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">100</span>;</span><br><span class="line"><span class="keyword">SQL</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02.jdbc是什么</title>
      <link href="/2022/04/26/JDBC/02.jdbc%E6%98%AF%E4%BB%80%E4%B9%88/"/>
      <url>/2022/04/26/JDBC/02.jdbc%E6%98%AF%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<h2 id="JDBC是什么"><a href="#JDBC是什么" class="headerlink" title="JDBC是什么"></a>JDBC是什么</h2><p>JDBC代表Java数据库连接(<strong>J</strong>ava <strong>D</strong>ata<strong>b</strong>ase <strong>C</strong>onnectivity)，它是用于Java编程语言和数据库之间的数据库无关连接的标准Java API，换句话说：JDBC是用于在Java语言编程中与数据库连接的API。</p><p>JDBC库包括通常与数据库使用相关，如下面提到的每个任务的API - </p><ul><li>连接到数据库</li><li>创建SQL或MySQL语句</li><li>在数据库中执行SQL或MySQL查询</li><li>查看和修改结果记录</li></ul><p>从根本上说，JDBC是一个规范，它提供了一整套接口，允许以一种可移植的访问底层数据库API。 Java可以用它来编写不同类型的可执行文件，如 -</p><ul><li>Java应用程序</li><li>Java Applet</li><li>Java Servlets</li><li>Java ServerPages(<a href="http://www.yiibai.com/jsp/">JSP</a>)</li><li>企业级JavaBeans(EJB)</li></ul><p>所有这些不同的可执行文件都能够使用JDBC驱动程序来访问数据库，并用于存储数据到数据库中。</p><p>JDBC提供与ODBC相同的功能，允许Java程序包含与数据库无关的代码(同样的代码，只需要指定使用的数据库类型，不需要重修改数据库查询或操作代码)。</p><h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><p>在进一步了解之前，需要对以下两个Java和数据库SQL语句有很好的了解 -</p><ul><li><a href="http://www.yiibai.com/java/">JAVA编程</a></li><li><a href="http://www.yiibai.com/sql/">SQL</a>或<a href="http://www.yiibai.com/mysql/">MySQL</a>数据库</li></ul><h2 id="JDBC架构"><a href="#JDBC架构" class="headerlink" title="JDBC架构"></a>JDBC架构</h2><p>JDBC API支持用于数据库访问的两层和三层处理模型，但通常，JDBC体系结构由两层组成：</p><ul><li>JDBC API：提供应用程序到JDBC管理器连接。</li><li>JDBC驱动程序API：支持JDBC管理器到驱动程序连接。</li></ul><p>JDBC API使用驱动程序管理器并指定数据库的驱动程序来提供与异构数据库的透明连接。</p><p>JDBC驱动程序管理器确保使用正确的驱动程序来访问每个数据源。 驱动程序管理器能够支持连接到多个异构数据库的多个并发驱动程序。</p><p>以下是架构图，它显示了驱动程序管理器相对于JDBC驱动程序和Java应用程序的位置 -</p><p><img src="http://www.yiibai.com/uploads/images/201705/3005/659080547_64242.jpg" alt="img"></p><h2 id="常见的JDBC组件"><a href="#常见的JDBC组件" class="headerlink" title="常见的JDBC组件"></a>常见的JDBC组件</h2><p>JDBC API提供以下接口和类 -</p><ul><li><code>DriverManager</code>：此类管理数据库驱动程序列表。 使用通信子协议将来自java应用程序的连接请求与适当的数据库驱动程序进行匹配。在JDBC下识别某个子协议的第一个驱动程序将用于建立数据库连接。</li><li><code>Driver</code>：此接口处理与数据库服务器的通信。我们很少会直接与<code>Driver</code>对象进行交互。 但会使用<code>DriverManager</code>对象来管理这种类型的对象。 它还提取与使用<code>Driver</code>对象相关的信息。</li><li><code>Connection</code>：此接口具有用于联系数据库的所有方法。 连接(<code>Connection</code>)对象表示通信上下文，即，与数据库的所有通信仅通过连接对象。</li><li><code>Statement</code>：使用从此接口创建的对象将SQL语句提交到数据库。 除了执行存储过程之外，一些派生接口还接受参数。</li><li><code>ResultSet</code>：在使用<code>Statement</code>对象执行SQL查询后，这些对象保存从数据库检索的数据。 它作为一个迭代器并可移动<code>ResultSet</code>对象查询的数据。</li><li><code>SQLException</code>：此类处理数据库应用程序中发生的任何错误。</li></ul><h2 id="JDBC-4-0包"><a href="#JDBC-4-0包" class="headerlink" title="JDBC 4.0包"></a>JDBC 4.0包</h2><p><code>java.sql</code>和<code>javax.sql</code>是JDBC 4.0的主要包。这是编写本教程时最新的JDBC版本。 它提供了与数据源进行交互的主要类。</p><p>这些包中的新功能包括以下更改(增强) -</p><ul><li>自动数据库驱动程序加载</li><li>异常处理改进</li><li>增强的<code>BLOB/CLOB</code>功能</li><li><code>Connection</code> 和 <code>Statement</code>接口的增强</li><li>国家字符集支持</li><li>SQL ROWID访问</li><li>SQL 2003 XML数据类型的支持</li><li>注解支持</li></ul>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01. jdbc 快速入门</title>
      <link href="/2022/04/26/JDBC/01.jdbc%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2022/04/26/JDBC/01.jdbc%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="JDBC是什么"><a href="#JDBC是什么" class="headerlink" title="JDBC是什么?"></a>JDBC是什么?</h2><p>JDBC API是一个Java API，可以访问任何类型表列数据，特别是存储在关系数据库中的数据。JDBC代表Java数据库连接。</p><p>JDBC库中所包含的API通常与数据库使用于：</p><ul><li>连接到数据库</li><li>创建SQL或MySQL语句</li><li>在数据库中执行SQL或MySQL查询</li><li>查看和修改数据库中的数据记录</li></ul><h2 id="使用JDBC前提条件"><a href="#使用JDBC前提条件" class="headerlink" title="使用JDBC前提条件"></a>使用JDBC前提条件</h2><p>在学习JDBC之前，需要对以下两个编程知识有一定的了解：</p><ul><li>JAVA核心编程</li><li>SQL语句或一种数据库系统(如：MySQL,Oracle数据库)</li></ul><h2 id="JDBC环境设置"><a href="#JDBC环境设置" class="headerlink" title="JDBC环境设置"></a>JDBC环境设置</h2><p>请确认您已完成以下设置：</p><ul><li>JAVA(JDK)安装</li><li>数据库系统的安装(如：MySQL的安装)</li></ul><p>除上述者外环境配置外，还需要建立一个数据库，为本程项目作为测试使用。假设创建一个数据库：<code>test</code>，在这个数据库上创建一张表：<code>employees</code>。</p><h2 id="创建JDBC应用程序"><a href="#创建JDBC应用程序" class="headerlink" title="创建JDBC应用程序"></a>创建JDBC应用程序</h2><p>建立一个JDBC应用程序，本教程中以Java连接MySQL为一个示例，分六个步骤进行：</p><h3 id="1-导入包"><a href="#1-导入包" class="headerlink" title="1. 导入包"></a>1. 导入包</h3><p>在程序中包含数据库编程所需的JDBC类。大多数情况下，使用 <code>import java.sql.*</code> 就足够了，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//STEP 1. Import required packages</span></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><h3 id="2-注册JDBC驱动程序"><a href="#2-注册JDBC驱动程序" class="headerlink" title="2. 注册JDBC驱动程序"></a>2. 注册JDBC驱动程序</h3><p>需要初始化驱动程序，这样就可以打开与数据库的通信。以下是代码片段实现这一目标：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//STEP 2: Register JDBC driver</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><h3 id="3-打开一个连接"><a href="#3-打开一个连接" class="headerlink" title="3. 打开一个连接"></a>3. 打开一个连接</h3><p>使用<code>DriverManager.getConnection()</code>方法来创建一个<code>Connection</code>对象，它代表一个数据库的物理连接，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//STEP 3: Open a connection</span></span><br><span class="line"><span class="comment">//  Database credentials</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> String USER = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> String PASS = <span class="string">&quot;pwd123456&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;Connecting to database...&quot;</span>);</span><br><span class="line">conn = DriverManager.getConnection(DB_URL,USER,PASS);</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><h3 id="4-执行一个查询"><a href="#4-执行一个查询" class="headerlink" title="4. 执行一个查询"></a>4. 执行一个查询</h3><p>需要使用一个类型为<code>Statement</code>或<code>PreparedStatement</code>的对象，并提交一个SQL语句到数据库执行查询。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//STEP 4: Execute a query</span></span><br><span class="line">System.out.println(<span class="string">&quot;Creating statement...&quot;</span>);</span><br><span class="line">stmt = conn.createStatement();</span><br><span class="line">String sql;</span><br><span class="line">sql = <span class="string">&quot;SELECT id, first, last, age FROM Employees&quot;</span>;</span><br><span class="line">ResultSet rs = stmt.executeQuery(sql);</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>如果要执行一个SQL语句：<code>UPDATE</code>，<code>INSERT</code>或<code>DELETE</code>语句，那么需要下面的代码片段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//STEP 4: Execute a query</span></span><br><span class="line">System.out.println(<span class="string">&quot;Creating statement...&quot;</span>);</span><br><span class="line">stmt = conn.createStatement();</span><br><span class="line">String sql;</span><br><span class="line">sql = <span class="string">&quot;DELETE FROM Employees&quot;</span>;</span><br><span class="line">ResultSet rs = stmt.executeUpdate(sql);</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><h3 id="5-从结果集中提取数据"><a href="#5-从结果集中提取数据" class="headerlink" title="5. 从结果集中提取数据"></a>5. 从结果集中提取数据</h3><p>这一步中演示如何从数据库中获取查询结果的数据。可以使用适当的<code>ResultSet.getXXX()</code>方法来检索的数据结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//STEP 5: Extract data from result set</span></span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">    <span class="comment">//Retrieve by column name</span></span><br><span class="line">    <span class="keyword">int</span> id  = rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> age = rs.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    String first = rs.getString(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">    String last = rs.getString(<span class="string">&quot;last&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Display values</span></span><br><span class="line">    System.out.print(<span class="string">&quot;ID: &quot;</span> + id);</span><br><span class="line">    System.out.print(<span class="string">&quot;, Age: &quot;</span> + age);</span><br><span class="line">    System.out.print(<span class="string">&quot;, First: &quot;</span> + first);</span><br><span class="line">    System.out.println(<span class="string">&quot;, Last: &quot;</span> + last);</span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><h3 id="6-清理环境资源"><a href="#6-清理环境资源" class="headerlink" title="6. 清理环境资源"></a>6. 清理环境资源</h3><p>在使用JDBC与数据交互操作数据库中的数据后，应该明确地关闭所有的数据库资源以减少资源的浪费，对依赖于JVM的垃圾收集如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//STEP 6: Clean-up environment</span></span><br><span class="line">rs.close();</span><br><span class="line">stmt.close();</span><br><span class="line">conn.close();</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><h2 id="第一个JDBC-程序实例"><a href="#第一个JDBC-程序实例" class="headerlink" title="第一个JDBC 程序实例"></a>第一个JDBC 程序实例</h2><p>基于上面的步骤，我们可以综合示例代码，您可以使用以下代码作为模板来编写JDBC代码。</p><blockquote><p>注意：此示例代码基于环境和数据库环境设置完成的前提下使用。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//STEP 1. Import required packages</span></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstExample</span> </span>&#123;</span><br><span class="line">   <span class="comment">// JDBC driver name and database URL</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String JDBC_DRIVER = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;  </span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String DB_URL = <span class="string">&quot;jdbc:mysql://localhost/test&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//  Database credentials -- 数据库名和密码自己修改</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String USER = <span class="string">&quot;username&quot;</span>;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> String PASS = <span class="string">&quot;password&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   Connection conn = <span class="keyword">null</span>;</span><br><span class="line">   Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="comment">//STEP 2: Register JDBC driver</span></span><br><span class="line">      Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//STEP 3: Open a connection</span></span><br><span class="line">      System.out.println(<span class="string">&quot;Connecting to database...&quot;</span>);</span><br><span class="line">      conn = DriverManager.getConnection(DB_URL,USER,PASS);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//STEP 4: Execute a query</span></span><br><span class="line">      System.out.println(<span class="string">&quot;Creating statement...&quot;</span>);</span><br><span class="line">      stmt = conn.createStatement();</span><br><span class="line">      String sql;</span><br><span class="line">      sql = <span class="string">&quot;SELECT id, first, last, age FROM Employees&quot;</span>;</span><br><span class="line">      ResultSet rs = stmt.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//STEP 5: Extract data from result set</span></span><br><span class="line">      <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">         <span class="comment">//Retrieve by column name</span></span><br><span class="line">         <span class="keyword">int</span> id  = rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">         <span class="keyword">int</span> age = rs.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">         String first = rs.getString(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">         String last = rs.getString(<span class="string">&quot;last&quot;</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//Display values</span></span><br><span class="line">         System.out.print(<span class="string">&quot;ID: &quot;</span> + id);</span><br><span class="line">         System.out.print(<span class="string">&quot;, Age: &quot;</span> + age);</span><br><span class="line">         System.out.print(<span class="string">&quot;, First: &quot;</span> + first);</span><br><span class="line">         System.out.println(<span class="string">&quot;, Last: &quot;</span> + last);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//STEP 6: Clean-up environment</span></span><br><span class="line">      rs.close();</span><br><span class="line">      stmt.close();</span><br><span class="line">      conn.close();</span><br><span class="line">   &#125;<span class="keyword">catch</span>(SQLException se)&#123;</span><br><span class="line">      <span class="comment">//Handle errors for JDBC</span></span><br><span class="line">      se.printStackTrace();</span><br><span class="line">   &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">      <span class="comment">//Handle errors for Class.forName</span></span><br><span class="line">      e.printStackTrace();</span><br><span class="line">   &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">      <span class="comment">//finally block used to close resources</span></span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(stmt!=<span class="keyword">null</span>)</span><br><span class="line">            stmt.close();</span><br><span class="line">      &#125;<span class="keyword">catch</span>(SQLException se2)&#123;</span><br><span class="line">      &#125;<span class="comment">// nothing we can do</span></span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(conn!=<span class="keyword">null</span>)</span><br><span class="line">            conn.close();</span><br><span class="line">      &#125;<span class="keyword">catch</span>(SQLException se)&#123;</span><br><span class="line">         se.printStackTrace();</span><br><span class="line">      &#125;<span class="comment">//end finally try</span></span><br><span class="line">   &#125;<span class="comment">//end try</span></span><br><span class="line">   System.out.println(<span class="string">&quot;Goodbye!&quot;</span>);</span><br><span class="line">&#125;<span class="comment">//end main</span></span><br><span class="line">&#125;<span class="comment">//end FirstExample - by www.yiibai.com</span></span><br><span class="line">Java</span><br></pre></td></tr></table></figure><p>如果使用IDE，可将上面代码可放在IDE(如：Eclipse/Netbeans)中加入<code>mysql-connector-java-5.1.37-bin.jar</code> 库并执行。</p><p>如果手动编译，需要把上面代码存放到 <code>F:\worksp\jdbc\FirstExample.java</code> 文件中，并创建一个目录：<code>F:\worksp\jdbc\libs</code>，把下载的<code>mysql-connector-java-5.1.40-bin.jar</code>库(下载地址：<a href="http://downloads.mysql.com/archives/c-j/)%E6%94%BE%E5%85%A5%E5%88%B0">http://downloads.mysql.com/archives/c-j/)放入到</a> <code>F:\worksp\jdbc\libs</code> 目录中。</p><p>使用命令行编译Java程序并加载指定目录中的Jar包(mysql-connector-java-5.1.40-bin.jar)，现在编译上面的例子如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">F:\worksp\jdbc&gt; javac -Djava.ext.dirs=F:\worksp\jdbc\libs FirstExample.java</span><br><span class="line">F:\worksp\jdbc&gt;</span><br><span class="line">Shell</span><br></pre></td></tr></table></figure><p>当运行<code>FirstExample</code>后，它会产生类似以下结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">F:\worksp\jdbc&gt; java -Djava.ext.dirs=F:\worksp\jdbc\libs FirstExample</span><br><span class="line">Connecting to database...</span><br><span class="line">Creating statement...</span><br><span class="line">ID: <span class="number">100</span>, Age: <span class="number">18</span>, First: Zara, Last: Ali</span><br><span class="line">ID: <span class="number">101</span>, Age: <span class="number">25</span>, First: Mahnaz, Last: Fatma</span><br><span class="line">ID: <span class="number">102</span>, Age: <span class="number">30</span>, First: Zaid, Last: Khan</span><br><span class="line">ID: <span class="number">103</span>, Age: <span class="number">28</span>, First: Sumit, Last: Mittal</span><br><span class="line">F:\worksp\jdbc&gt;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><h3 id="SQLException中的方法"><a href="#SQLException中的方法" class="headerlink" title="SQLException中的方法"></a>SQLException中的方法</h3><p>一个<code>SQLException</code>类既可以发生在驱动程序和数据库中。当这样的异常时，SQLException类型的对象将被传递到<code>catch</code>子句。<br>通过<code>SQLException</code>对象有以下几种方法可用于获取更多的关于异常的信息：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>getErrorCode()</td><td>获取与异常关联的错误代码</td></tr><tr><td>getMessage()</td><td>获取JDBC驱动程序的错误处理错误消息，或获取Oracle错误代码和数据库的错误消息。</td></tr><tr><td>getSQLState()</td><td>获取<code>XOPEN SQLSTATE</code>字符串。对于JDBC驱动程序错误，从该方法返回的可能是无用的信息。对于一个数据库错误，返回一个五位的<code>XOPEN SQLSTATE</code>代码。这种方法可以返回<code>null</code>。</td></tr><tr><td>getNextException()</td><td>获取异常链中的下一个<code>Exception</code>对象</td></tr><tr><td>printStackTrace()</td><td>打印当前的异常，或也可以抛出，并回溯到标准错误流</td></tr><tr><td>printStackTrace(PrintStream s)</td><td>打印此抛出对象及其回溯到指定的打印流</td></tr><tr><td>printStackTrace(PrintWriter w)</td><td>打印此抛出对象及其回溯到指定打印写入流</td></tr></tbody></table><p>通过利用从<code>Exception</code>对象提供的信息，可以捕获一个异常，并适当地继续运行程序。这是一个<code>try</code>块中的一般形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   <span class="comment">// Your risky code goes between these curly braces!!!</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exception ex) &#123;</span><br><span class="line">   <span class="comment">// Your exception handling code goes between these </span></span><br><span class="line">   <span class="comment">// curly braces, similar to the exception clause </span></span><br><span class="line">   <span class="comment">// in a PL/SQL block.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">   <span class="comment">// Your must-always-be-executed code goes between these </span></span><br><span class="line">   <span class="comment">// curly braces. Like closing database connection.</span></span><br><span class="line">&#125;</span><br><span class="line">Java</span><br></pre></td></tr></table></figure><h2 id="JDBC数据类型"><a href="#JDBC数据类型" class="headerlink" title="JDBC数据类型"></a>JDBC数据类型</h2><p>下表列出了默认的JDBC数据类型与Java数据类型转换，当使用<code>PreparedStatement</code>或<code>CallableStatement</code>对象时可调用<code>setXXX()</code>方法或<code>ResultSet.updateXXX()</code>方法。</p><table><thead><tr><th>SQL</th><th>JDBC/Java</th><th>setXXX</th><th>updateXXX</th></tr></thead><tbody><tr><td>VARCHAR</td><td>java.lang.String</td><td>setString</td><td>updateString</td></tr><tr><td>CHAR</td><td>java.lang.String</td><td>setString</td><td>updateString</td></tr><tr><td>LONGVARCHAR</td><td>java.lang.String</td><td>setString</td><td>updateString</td></tr><tr><td>BIT</td><td>boolean</td><td>setBoolean</td><td>updateBoolean</td></tr><tr><td>NUMERIC</td><td>java.math.BigDecimal</td><td>setBigDecimal</td><td>updateBigDecimal</td></tr><tr><td>TINYINT</td><td>byte</td><td>setByte</td><td>updateByte</td></tr><tr><td>SMALLINT</td><td>short</td><td>setShort</td><td>updateShort</td></tr><tr><td>INTEGER</td><td>int</td><td>setInt</td><td>updateInt</td></tr><tr><td>BIGINT</td><td>long</td><td>setLong</td><td>updateLong</td></tr><tr><td>REAL</td><td>float</td><td>setFloat</td><td>updateFloat</td></tr><tr><td>FLOAT</td><td>float</td><td>setFloat</td><td>updateFloat</td></tr><tr><td>DOUBLE</td><td>double</td><td>setDouble</td><td>updateDouble</td></tr><tr><td>VARBINARY</td><td>byte[ ]</td><td>setBytes</td><td>updateBytes</td></tr><tr><td>BINARY</td><td>byte[ ]</td><td>setBytes</td><td>updateBytes</td></tr><tr><td>DATE</td><td>java.sql.Date</td><td>setDate</td><td>updateDate</td></tr><tr><td>TIME</td><td>java.sql.Time</td><td>setTime</td><td>updateTime</td></tr><tr><td>TIMESTAMP</td><td>java.sql.Timestamp</td><td>setTimestamp</td><td>updateTimestamp</td></tr><tr><td>CLOB</td><td>java.sql.Clob</td><td>setClob</td><td>updateClob</td></tr><tr><td>BLOB</td><td>java.sql.Blob</td><td>setBlob</td><td>updateBlob</td></tr><tr><td>ARRAY</td><td>java.sql.Array</td><td>setARRAY</td><td>updateARRAY</td></tr><tr><td>REF</td><td>java.sql.Ref</td><td>SetRef</td><td>updateRef</td></tr><tr><td>STRUCT</td><td>java.sql.Struct</td><td>SetStruct</td><td>updateStruct</td></tr></tbody></table><p>在<strong>JDBC3.0</strong>中增强支持<code>BLOB</code>，<code>CLOB</code>，<code>ARRAY</code>，<code>REF</code>等数据类型。<code>ResultSet</code>对象可调用<code>UPDATEBLOB()</code>，<code>updateCLOB()</code>，<code>updateArray()</code>和<code>updateRef()</code>方法，使您可以在数据库服务器上直接操作相应的数据。</p><p>对于<code>setXXX()</code>和<code>updateXXX()</code>方法，可以转换成特定的Java类型到特定的JDBC数据类型。而使用<code>setObject()</code>和<code>updateObject()</code>方法，几乎所有的Java类型映射到JDBC数据类型。</p><p><code>ResultSet</code>对象提供相应的<code>getXXX()</code>方法为每个数据类型来检索列值。每一种类型方法，可以使用与列名或由列的序号位置来获取列的数据。</p><table><thead><tr><th>SQL</th><th>JDBC/Java</th><th>setXXX</th><th>getXXX</th></tr></thead><tbody><tr><td>VARCHAR</td><td>java.lang.String</td><td>setString</td><td>getString</td></tr><tr><td>CHAR</td><td>java.lang.String</td><td>setString</td><td>getString</td></tr><tr><td>LONGVARCHAR</td><td>java.lang.String</td><td>setString</td><td>getString</td></tr><tr><td>BIT</td><td>boolean</td><td>setBoolean</td><td>getBoolean</td></tr><tr><td>NUMERIC</td><td>java.math.BigDecimal</td><td>setBigDecimal</td><td>getBigDecimal</td></tr><tr><td>TINYINT</td><td>byte</td><td>setByte</td><td>getByte</td></tr><tr><td>SMALLINT</td><td>short</td><td>setShort</td><td>getShort</td></tr><tr><td>INTEGER</td><td>int</td><td>setInt</td><td>getInt</td></tr><tr><td>BIGINT</td><td>long</td><td>setLong</td><td>getLong</td></tr><tr><td>REAL</td><td>float</td><td>setFloat</td><td>getFloat</td></tr><tr><td>FLOAT</td><td>float</td><td>setFloat</td><td>getFloat</td></tr><tr><td>DOUBLE</td><td>double</td><td>setDouble</td><td>getDouble</td></tr><tr><td>VARBINARY</td><td>byte[ ]</td><td>setBytes</td><td>getBytes</td></tr><tr><td>BINARY</td><td>byte[ ]</td><td>setBytes</td><td>getBytes</td></tr><tr><td>DATE</td><td>java.sql.Date</td><td>setDate</td><td>getDate</td></tr><tr><td>TIME</td><td>java.sql.Time</td><td>setTime</td><td>getTime</td></tr><tr><td>TIMESTAMP</td><td>java.sql.Timestamp</td><td>setTimestamp</td><td>getTimestamp</td></tr><tr><td>CLOB</td><td>java.sql.Clob</td><td>setClob</td><td>getClob</td></tr><tr><td>BLOB</td><td>java.sql.Blob</td><td>setBlob</td><td>getBlob</td></tr><tr><td>ARRAY</td><td>java.sql.Array</td><td>setARRAY</td><td>getARRAY</td></tr><tr><td>REF</td><td>java.sql.Ref</td><td>SetRef</td><td>getRef</td></tr><tr><td>STRUCT</td><td>java.sql.Struct</td><td>SetStruct</td><td>getStruct</td></tr></tbody></table><h2 id="JDBC批量处理"><a href="#JDBC批量处理" class="headerlink" title="JDBC批量处理"></a>JDBC批量处理</h2><p>批处理允许执行一个批处理组相关的SQL语句，并将其一次提交到数据库中执行。当几个SQL语句一次发送到数据库中时，可以减少通信开销，从而提高性能。</p><ul><li>JDBC驱动程序不支持此功能。您应该使用<code>DatabaseMetaData.supportsBatchUpdates()</code>方法来确定目标数据库支持批量更新处理。如果JDBC驱动程序支持此功能，则该方法返回<code>true</code>。</li><li><code>addBatch()</code>方法是<code>PreparedStatement</code>和<code>CallableStatementis</code>类中用于添加单个语句的批处理的声明。 <code>executeBatch()</code>将开始将所有语句组合到一起并执行。</li><li><code>executeBatch()</code>将返回一个整数数组，每个数组元素的表示为相应的更新语句的更新计数。</li><li>添加语句进行批处理时，可以使用<code>clearBatch()</code>方法删除它们。此方法将删除<code>addBatch()</code>方法添加的所有语句。但是不能有选择性地选择某个语句来删除。</li></ul><h2 id="JDBC数据流"><a href="#JDBC数据流" class="headerlink" title="JDBC数据流"></a>JDBC数据流</h2><p><code>PreparedStatement</code>对象有能力使用提供参数数据的输入和输出流。这使您可以将整个文件到数据库中，可容纳较大的值，如<code>CLOB</code>和<code>BLOB</code>数据类型的列。</p><p>有下列方法可用于流数据：</p><ol><li><code>setAsciiStream()</code>: 此方法用于提供大的<code>ASCII</code>数据值。</li><li><code>setCharacterStream()</code>: 此方法用于提供大的<code>UNICODE</code>数据值。</li><li><code>setBinaryStream()</code>: 使用此方法用于提供大的二进制数据值。</li></ol><p><code>setXXXStream()</code>方法需要一个额外的参数，文件大小(除了参数占位符)。此参数通知应发送多少数据到数据库来使用流的驱动程序。</p><p>对于一个详细的关于所有这些概念，这里只是一个简单的入门教程，还需要读者去学习完整的教程，有关JDBC的后续教程，可以从左侧文章中了解和学习。</p>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>00.jdbc 简介</title>
      <link href="/2022/04/26/JDBC/00.jdbc%E7%AE%80%E4%BB%8B/"/>
      <url>/2022/04/26/JDBC/00.jdbc%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="JDBC-API是一个Java-API可以访问任何类型的数据库的数据，尤其是存储在关系数据库中的数据。-JDBC的工作原理与Java在各种平台一样，如Windows，Mac-OS和各种版本的UNIX系统。"><a href="#JDBC-API是一个Java-API可以访问任何类型的数据库的数据，尤其是存储在关系数据库中的数据。-JDBC的工作原理与Java在各种平台一样，如Windows，Mac-OS和各种版本的UNIX系统。" class="headerlink" title="JDBC API是一个Java API可以访问任何类型的数据库的数据，尤其是存储在关系数据库中的数据。 JDBC的工作原理与Java在各种平台一样，如Windows，Mac OS和各种版本的UNIX系统。"></a>JDBC API是一个Java API可以访问任何类型的数据库的数据，尤其是存储在关系数据库中的数据。 JDBC的工作原理与Java在各种平台一样，如Windows，Mac OS和各种版本的UNIX系统。</h2><h2 id="读者"><a href="#读者" class="headerlink" title="读者"></a>读者</h2><p>本教程是为Java程序员设计的，需要了解JDBC框架的细节以及它的架构和实际使用情况。</p><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>在学习本教程，应该对Java编程语言的一个很好的理解。因为要处理RDBMS，所以它需要对SQL和数据库的概念有很好的理解。</p><p>JDBC代表Java与数据库的连接，这对Java编程语言和广泛的数据库之间独立于数据库的连接标准的Java API。</p><p>JDBC库包含的API为每个通常与数据库的使用相关联的任务：</p><ul><li>使得连接到数据库</li><li>创建SQL或MySQL语句</li><li>执行SQL或MySQL的查询数据库</li></ul><p>查看和修改结果记录</p><p>从根本上说，JDBC是一种规范，它提供的接口，一套完整的，可移植的访问底层数据库的程序。可以用Java来写不同类型的可执行文件，如：</p><ul><li>Java应用程序</li><li>Java Applets</li><li>Java Servlets</li><li>Java ServerPages (JSP)</li><li>Enterprise JavaBeans (EJBs)</li></ul><p>所有这些不同的可执行文件就可以使用JDBC驱动程序来访问数据库，并把存储的数据的优势。</p><p>JDBC提供了与ODBC相同的功能，允许Java程序包含与数据库无关的代码。</p><h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><p>如果您要学习本教程，需要具备以下两个主题内容很好的了解：</p><ul><li><a href="http://www.yiibai.com/java/">核心Java编程</a></li><li><a href="http://www.yiibai.com/mysql/">SQL或MySQL数据库</a></li></ul><h2 id="JDBC架构"><a href="#JDBC架构" class="headerlink" title="JDBC架构"></a>JDBC架构</h2><p>JDBC API支持两层和三层处理模型进行数据库访问，但在一般的JDBC体系结构由两层组成：</p><ul><li>JDBC API: 提供了应用程序对JDBC的管理连接。</li><li>JDBC Driver API: 支持JDBC管理到驱动器连接。</li><li>JDBC API的使用驱动程序管理器和数据库特定的驱动程序提供透明的连接到异构数据库。</li><li>JDBC驱动程序管理器可确保正确的驱动程序来访问每个数据源。该驱动程序管理器能够支持连接到多个异构数据库的多个并发的驱动程序。</li></ul><p>以下是JDBC结构图，它显示了驱动程序管理器方面的JDBC驱动程序和Java应用程序的位置：</p><p><img src="http://www.yiibai.com/uploads/images/201706/0206/392080659_56700.jpg" alt="img"></p><h2 id="常见的JDBC组件："><a href="#常见的JDBC组件：" class="headerlink" title="常见的JDBC组件："></a>常见的JDBC组件：</h2><p>JDBC API提供了以下接口和类：</p><ul><li><strong>DriverManager</strong>: 这个类管理数据库驱动程序的列表。确定内容是否符合从Java应用程序使用的通信子协议正确的数据库驱动程序的连接请求。识别JDBC在一定子协议的第一个驱动器将被用来建立数据库连接。</li><li><strong>Driver</strong>: 此接口处理与数据库服务器通信。很少直接直接使用驱动程序（Driver）对象，一般使用<code>DriverManager</code>中的对象，它用于管理此类型的对象。它也抽象与驱动程序对象工作相关的详细信息</li><li><strong>Connection</strong> : 此接口与接触数据库的所有方法。连接对象表示通信上下文，即，与数据库中的所有的通信是通过此唯一的连接对象。</li><li><strong>Statement</strong> : 可以使用这个接口创建的对象的SQL语句提交到数据库。一些派生的接口接受除执行存储过程的参数。</li><li><strong>ResultSet</strong>: 这些对象保存从数据库后，执行使用<code>Statement</code>对象的SQL查询中检索数据。它作为一个迭代器，可以通过移动它来检索下一个数据。</li><li><strong>SQLException</strong>: 这个类用于处理发生在数据库应用程序中的任何错误。</li></ul><h2 id="JDBC-4-0软件包"><a href="#JDBC-4-0软件包" class="headerlink" title="JDBC 4.0软件包"></a>JDBC 4.0软件包</h2><p>对JDBC4.0，<code>java.sql</code>和<code>javax.sql</code>是主要的包。在写这篇教程的时候，这是最新版本的JDBC。它提供的主要类与数据源进行交互。</p><p>在这些包中的新功能包括改变在以下几个方面：</p><ul><li>自动数据库驱动程序加载</li><li>异常处理的改进</li><li>BLOB/CLOB功能增强</li><li>连接和语句接口增强</li><li>国家字符集支持</li><li>SQL ROWID访问</li><li>SQL 2003 XML数据类型支持</li><li>注释</li></ul><h2 id="问题反馈"><a href="#问题反馈" class="headerlink" title="问题反馈"></a>问题反馈</h2><p>我们不能保证您在此JDBC教程中不会遇到任何问题。本教程中的讲解，示例和代码等只是根据作者的理解来概括写出。由于作者水平和能力有限，因此不保正所有的编写文章都准确无误。但是如果有遇到任何错误或问题，请反馈给我们，我们会及时纠正以方便后继读者阅读。</p><p>​                                </p><p>//原文出自【易百教程】，商业转载请联系作者获得授权，非商业转载请保留原文链接：<a href="https://www.yiibai.com/jdbc">https://www.yiibai.com/jdbc</a> </p>]]></content>
      
      
      <categories>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络复习</title>
      <link href="/2021/11/15/%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0/"/>
      <url>/2021/11/15/%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章、路由交换和网络设备管理基础"><a href="#第一章、路由交换和网络设备管理基础" class="headerlink" title="第一章、路由交换和网络设备管理基础"></a>第一章、路由交换和网络设备管理基础</h2><h3 id="一、网络基础"><a href="#一、网络基础" class="headerlink" title="一、网络基础"></a>一、网络基础</h3><ul><li><p>物理层传输：比特</p><p>数据链路层：帧</p><p>网络层：包</p><p>其余为：报文</p></li></ul><h4 id="1-1-分层方法"><a href="#1-1-分层方法" class="headerlink" title="1.1    分层方法"></a>1.1    分层方法</h4><h5 id="a、三层"><a href="#a、三层" class="headerlink" title="a、三层"></a>a、三层</h5><p>（1） 核心层</p><p>（2） 汇聚层</p><p>（3） 用户层</p><h5 id="b、五层"><a href="#b、五层" class="headerlink" title="b、五层"></a>b、五层</h5><p>（1）应用层<br>                支持网络应用，应用协议仅仅是网络应用的一个组成部分，运行在不同主机上的进程则使用应用层协议进行通信。主要的协议        有：http、ftp、telnet、smtp、pop3等。<br>（2）传输层<br>                负责为信源和信宿提供应用程序进程间的数据传输服务，这一层上主要定义了两个传输协议，传输控制协议即TCP和用户数据报        协议UDP。<br>（3）网络层<br>                负责将数据报独立地从信源发送到信宿，主要解决路由选择、拥塞控制和网络互联等问题。<br>（4）数据链路层<br>                负责将IP数据报封装成合适在物理网络上传输的帧格式并传输，或将从物理网络接收到的帧解封，取出IP数据报交给网络层。<br>（5）物理层<br>                负责将比特流在结点间传输，即负责物理传输。该层的协议既与链路有关也与传输介质有关。</p><h5 id="c、七层"><a href="#c、七层" class="headerlink" title="c、七层"></a>c、七层</h5><p>（1）物理层<br>                物理层(Physical layer)是参考模型的最低层。该层是网络通信的数据传输介质，由连接不同结点的电缆与设备共同构成。主要功        能是：利用传输介质为数据链路层提供物理连接，负责处理数据传输并监控数据出错率，以便数据流的透明传输。<br>（2）数据链路层<br>                数据链路层(Data link layer)是参考模型的第2层。 主要功能是：在物理层提供的服务基础上，在通信的实体间建立数据链路连        接，传输以“帧”为单位的数据包，并采用<strong>差错控制</strong>与<strong>流量控制</strong>方法，使有差错的物理线路变成无差错的数据链路。<br>（3）网络层<br>                网络层(Network layer)是参考模型的第3层。主要功能是：为数据在结点之间传输创建逻辑链路，通过路由选择算法为分组            (packet, 也称数据包)通过通信子网选择最适当的路径，以及实现拥塞控制、网络互联等功能。<br>（4）传输层<br>                传输层(Transport layer)是参考模型的第4层。主要功能是向用户提供可靠的端到端(End-to-End)服务，处理数据包错误、数据包        次序，以及其他一些关键传输问题。传输层向高层屏蔽了下层数据通信的细节，因此，它是计算机通信体系结构中关键的一层。<br>（5）会话层<br>                会话层(Session layer)是参考模型的第5层。主要功能是：负责维护两个结点之间的传输链接，以便确保点到点传输不中断，以        及管理数据交换等功能。<br>（6）表示层<br>                表示层(Presentation layer)是参考模型的第6层。主要功能是：用于处理在两个通信系统中交换信息的表示方式，主要包括数据        格式变换、数据加密与解密、数据压缩与恢复等功能。<br>（7）应用层<br>                应用层(Application layer)是参考模型的最高层。主要功能是：为应用软件提供了很多服务，例如文件服务器、数据库服务、电        子邮件与其他网络软件服务。</p><h4 id="1-2-传输层"><a href="#1-2-传输层" class="headerlink" title="1.2 传输层"></a>1.2 传输层</h4><h5 id="1-2-1-常用端口号"><a href="#1-2-1-常用端口号" class="headerlink" title="1.2.1 常用端口号"></a>1.2.1 常用端口号</h5><p>（TCP) : HTTP 80    FTP 20/21    Telnet 23    SMTP 25(的电子邮件传输的协议)    DNS 53</p><p>（UDP) : DNS 53    BootP 67/ 68    TFTP 69    SNMP 161</p><h5 id="1-2-2-TCP工作过程"><a href="#1-2-2-TCP工作过程" class="headerlink" title="1.2.2 TCP工作过程"></a>1.2.2 TCP工作过程</h5><ul><li><p>简单介绍：传输控制协议（Transmission Control Protocol，TCP）是一种面向连接的、可靠的、基于字节流的运输层通信协议。<br>面向连接：通信前要建立连接，通信后要拆除连接；<br>可靠的：它会后续的数据包状态进行跟踪；<br>字节流：以字节为最小单位的流服务；</p></li><li><p>TCP分三个阶段<br>第一阶段：连接建立（三次握手）<br>第二阶段：数据传输<br>第三阶段：连接拆除（四次握手）</p></li></ul><h4 id="1-3-网络层"><a href="#1-3-网络层" class="headerlink" title="1.3 网络层"></a>1.3 网络层</h4><h5 id="1-3-1-IP地址"><a href="#1-3-1-IP地址" class="headerlink" title="1.3.1 IP地址"></a>1.3.1 IP地址</h5><h6 id="a、地址分类"><a href="#a、地址分类" class="headerlink" title="a、地址分类"></a>a、地址分类</h6><p>​    A类：1.0.0.0-126.0.0.0        默认子网掩码：255.0.0.0</p><p>​    B类：128.0.0.0-191.255.0.0        默认子网掩码：255.255.0.0</p><p>​    C类：192.0.0.0-223.255.255.0        默认子网掩码：255.255.255.0</p><h6 id="b、私有地址段"><a href="#b、私有地址段" class="headerlink" title="b、私有地址段"></a>b、私有地址段</h6><p>​    10.0.0.0到10.255.255.255</p><p>​    172.16.0.0到172.31.255.255</p><p>​    192.168.0.0到192.168.255.255</p><h4 id="1-4-简单地址极计算"><a href="#1-4-简单地址极计算" class="headerlink" title="1.4 简单地址极计算"></a>1.4 简单地址极计算</h4><h4 id="1-5-VLSM简单应用"><a href="#1-5-VLSM简单应用" class="headerlink" title="1.5 VLSM简单应用"></a>1.5 VLSM简单应用</h4><h4 id="1-6-网络地址规划"><a href="#1-6-网络地址规划" class="headerlink" title="1.6 网络地址规划"></a>1.6 网络地址规划</h4><h3 id="二、-路由"><a href="#二、-路由" class="headerlink" title="二、 路由"></a>二、 路由</h3><ul><li><p>AS（自治网络系统）：包含 IGP、EGP</p><p>IGP（内部网关协议）：包含常见的 RIP、OSPF、ISIS</p><ul><li>EGP（外部网关协议）：包括 BGP</li></ul></li><li><p>按照协议划分，可以划分为：基于距离向量的路由选择协议、基于开放最短路径优先的路由协议</p><ul><li>DV（基于距离向量的路由选择协议）：RIP、BGP</li><li>LS（基于开放最短路径优先的路由协议）：OSPF、ISIS</li></ul></li></ul><h4 id="2-1-网络设备路由表，表项"><a href="#2-1-网络设备路由表，表项" class="headerlink" title="2.1 网络设备路由表，表项 "></a>2.1 网络设备路由表，表项 <img src="C:\Users\XuQihan\Desktop\src\2-1-1.png" alt="2-1-1"></h4><p>（1）destination (目的网段）<br>（2）mask (子网掩码）<br>（3）interface (到达该目的地的本路由器的出口ip）<br>（4）gateway (下一跳路由器入口的ip）</p><p>​            路由器通过interface和gateway定义一调到下一个路由器的链路，通常情况下，interface和gateway是同一网段的<br>（5）metric (跳数）</p><p>​            该条路由记录的质量，一般情况下，如果有多条到达相同目的地的路由记录，路由器会采用metric值小的那条路由</p><ul><li><p><strong>路由解析</strong></p><p>第一条  </p><p>缺省路由：意思就是说，当一个数据包的目的网段不在你的路由记录中，那么，你的路由器该把那个数据包发送到哪里！缺省路由的网关是由你的连接上的default gateway决定的<br>该路由记录的意思是：当我接收到一个数据包的目的网段不在我的路由记录中，我会将该数据包通过192.168.123.88这个接口发送到192.168.123.254这个地址，这个地址是下一个路由器的一个接口，这样这个数据包就可以交付给下一个路由器处理，与我无关。该路由记录的线路质量 1  </p><p>第二条  </p><p>缺省路由：该路由记录的意思是：当我接收到一个数据包的目的网段不在我的路由记录中，我会将该数据包通过192.168.123.68这个接口发送到192.168.123.254这个地址，这个地址是下一个路由器的一个接口，这样这个数据包就可以交付给下一个路由器处理，与我无关。该路由记录的线路质量 1  </p><p>第三条  </p><p>本地环路：127.0.0.0这个网段内所有地址都指向自己机器，如果收到这样一个数据，应该发向哪里 该路由记录的线路质量 1  </p><p>第四条  </p><p>直联网段的路由记录：当路由器收到发往直联网段的数据包时该如何处理，这种情况，路由记录的interface和gateway是同一个。<br>当我接收到一个数据包的目的网段是192.168.123.0时，我会将该数据包通过192.168.123.68这个接口直接发送出去，因为这个端口直接连接着192.168.123.0这个网段，该路由记录的线路质量 1  </p><p>第五条  </p><p>直联网段的路由记录<br>当我接收到一个数据包的目的网段是192.168.123.0时，我会将该数据包通过192.168.123.88这个接口直接发送出去，因为这个端口直接连接着192.168.123.0这个网段，该路由记录的线路质量 1  </p><p>第六条  </p><p>本地主机路由：当路由器收到发送给自己的数据包时将如何处理<br>当我接收到一个数据包的目的网段是192.168.123.68时，我会将该数据包收下，因为这个数据包时发送给我自己的，该路由记录的线路质量 1  </p><p>第七条  </p><p>本地主机路由：当路由器收到发送给自己的数据包时将如何处理<br>当我接收到一个数据包的目的网段是192.168.123.88时，我会将该数据包收下，因为这个数据包时发送给我自己的，该路由记录的线路质量 1  </p><p>第八条  </p><p>本地广播路由：当路由器收到发送给直联网段的本地广播时如何处理<br>当我接收到广播数据包的目的网段是192.168.123.255时，我会将该数据从192.168.123.68接口以广播的形势发送出去，该路由记录的线路质量 1  </p><p>第九条  </p><p>本地广播路由：当路由器收到发送给直联网段的本地广播时如何处理<br>当我接收到广播数据包的目的网段是192.168.123.255时，我会将该数据从192.168.123.88接口以广播的形势发送出去，该路由记录的线路质量 1  </p><p>第十条  </p><p>组播路由：当路由器收到一个组播数据包时该如何处理<br>当我接收到组播数据包时，我会将该数据从192.168.123.68接口以组播的形势发送出去，该路由记录的线路质量 1  </p><p>第十一条  </p><p>组播路由：当路由器收到一个组播数据包时该如何处理<br>当我接收到组播数据包时，我会将该数据从192.168.123.88接口以组播的形势发送出去，该路由记录的线路质量 1  </p><p>第十二条  </p><p>广播路由：当路由器收到一个绝对广播时该如何处理<br>当我接收到绝对广播数据包时，将该数据包丢弃掉</p></li></ul><h4 id="2-2-静态路由和缺省路由（默认路由）"><a href="#2-2-静态路由和缺省路由（默认路由）" class="headerlink" title="2.2 静态路由和缺省路由（默认路由）"></a>2.2 静态路由和缺省路由（默认路由）</h4><ul><li>组播报文为 224.0.0.9</li></ul><h4 id="2-3-RIP"><a href="#2-3-RIP" class="headerlink" title="2.3 RIP"></a>2.3 RIP</h4><h5 id="2-3-1-v1-vs-v2"><a href="#2-3-1-v1-vs-v2" class="headerlink" title="2.3.1 v1 vs v2"></a>2.3.1 v1 vs v2</h5><ul><li>v1不支持VSLM、CIDR，v2支持VSLM、CIDR。</li><li>v1以广播形势发出报文，v2以组播（或者广播）形势发出报文。</li><li>v1不支持认证，v2支持明文和MD5密文认证。</li></ul><h5 id="2-3-2-环路问题及处理技术"><a href="#2-3-2-环路问题及处理技术" class="headerlink" title="2.3.2 环路问题及处理技术"></a>2.3.2 环路问题及处理技术</h5><ul><li><p>毒性反转 </p><p>​    当一条路径信息变为无效之后，路由器并不立即将它从路由表中删除，而是用16，即不可达的度量值将它广播出去</p></li><li><p>水平分割  </p><p>​    路由器从某个接口接收到的更新信息不允许再从这个接口发回去</p></li><li><p>触发更新 </p></li><li><p>16跳</p></li></ul><h4 id="2-4-OSPF"><a href="#2-4-OSPF" class="headerlink" title="2.4 OSPF"></a>2.4 OSPF</h4><h5 id="2-4-1-概述"><a href="#2-4-1-概述" class="headerlink" title="2.4.1 概述"></a>2.4.1 概述</h5><ul><li><p>原理：OSPF的简单说就是两个相邻的路由器通过发报文的形式成为邻居关系，邻居再相互发送链路状态信息形成邻接关系，之后各自根据最短路径算法算出路由，放在OSPF路由表，OSPF路由与其他路由比较后优的加入全局路由表。</p></li><li><p>工作位置： 网络层</p></li><li><p>链路开销： 路由沿途接口的开销和</p></li><li><p>是否支持认证：是</p></li><li><p>支持的协议： VLSM(可变长子网掩码)、CIDR(无类别域间路由)、LSDB(链路状态数据库)</p></li><li><p>五种报文：hello、DD、LSR、LSU、LSACk</p></li><li><p>七种状态：down、init、2—way、exstart、exchange、loading、full</p></li></ul><h5 id="2-4-2-邻居和邻接，DR-BDR选举"><a href="#2-4-2-邻居和邻接，DR-BDR选举" class="headerlink" title="2.4.2 邻居和邻接，DR/BDR选举"></a>2.4.2 邻居和邻接，DR/BDR选举</h5><ul><li><p>DR、BDR选举原则：优先级大优先、Router ID大优先、遵循不抢占原则（后来的就是DRouter）</p></li><li><p>邻居和邻接：邻接之间相互发送DD，只有DRouter之间是邻居关系</p></li><li><p>224.0.0.5（组播报文）：hello</p><p>224.0.0.6（组播报文）：路由更细</p><p>224.0.0.5（组播报文）：路由下发</p></li></ul><h4 id="2-5-PPP"><a href="#2-5-PPP" class="headerlink" title="2.5 PPP"></a>2.5 PPP</h4><p>！！！以下所述均在数据链路层 同理PPP是数据链路层协议   同时PPP 是广域网协议</p><ul><li><p>广域网设备基本角色：CE（用户边缘设备）、PE（服务提供商边缘设备）、P（服务提供商，不连接任何CE）</p><p>ISP：PE——P——PE</p><ul><li>ISP内部常用的广域网协议：ATM</li></ul><p>连接模型：CE——PE——P——PE——CE</p></li><li><p>CE与PE之间常见广域网协议：PPP、HDLC、FR</p></li><li><p>工作顺序： LCP（链路协商）、认证协商（可选）、NCP（网络层协商）</p></li><li><p>LCP报文格式：Flag、Address、Control、Protocol、Information、PCS、Flag</p></li><li><p>NCP协商：常见使用IPCP协议（分为静态IP地址协商，动态IP地址协商）</p></li></ul><h5 id="2-5-1-认证协商：pap和chap"><a href="#2-5-1-认证协商：pap和chap" class="headerlink" title="2.5.1 认证协商：pap和chap"></a>2.5.1 认证协商：pap和chap</h5><ul><li><p>PAP：明文传输、两次握手</p><p>PAP的两次握手：Authenticate——Request（用户名＋密码）（认证方发给被认证方）、Authenticate——Ack（被认证方发给认证方）。密码从认证方发起 。</p></li><li><p>CHAP：三次握手、密文传输</p><p>CHAP的三次握手：认证方发起挑战，携带随机数发送、被认证方本机计算并回复MD5、认证方本地计算并验证。</p></li></ul><h4 id="2-6-ACL"><a href="#2-6-ACL" class="headerlink" title="2.6 ACL"></a>2.6 ACL</h4><ul><li>原理：可以定义一系列不同的规则，设备根据这些规则对数据进行分类，并针对不同类型的报文进行不同的处理。</li><li>位置：三层交换机、路由器</li></ul><h5 id="2-6-1-基本ACL"><a href="#2-6-1-基本ACL" class="headerlink" title="2.6.1 基本ACL"></a>2.6.1 基本ACL</h5><ul><li>编号范围：2000-2999</li><li>参数：源IP地址等</li></ul><h5 id="2-6-2-高级ACL"><a href="#2-6-2-高级ACL" class="headerlink" title="2.6.2 高级ACL"></a>2.6.2 高级ACL</h5><ul><li><p>编号范围：3000-3999</p></li><li><p>参数：源IP地址、目的IP地址、源端口、目的端口等</p></li><li><p>二层ACL</p><ul><li>编号范围：4000-4999</li><li>参数：源MAC地址、目的MAC地址、以太帧协议类型等</li></ul></li></ul><h4 id="2-7-NAT"><a href="#2-7-NAT" class="headerlink" title="2.7 NAT"></a>2.7 NAT</h4><h5 id="2-7-1-静态、动态"><a href="#2-7-1-静态、动态" class="headerlink" title="2.7.1 静态、动态"></a>2.7.1 静态、动态</h5><ul><li>静态：静态NAT是指在NAT转换时，为某一个或者某一组内局地址总是转换为固定的外局地址。</li><li>动态：动态NAT是指外部IP有多个，比如1.1.1.1-10，客户端向外访问时，是轮询使用这10个IP地址的。</li></ul><h5 id="2-7-2-NAPT-PAT、EasyIP"><a href="#2-7-2-NAPT-PAT、EasyIP" class="headerlink" title="2.7.2 NAPT/PAT、EasyIP"></a>2.7.2 NAPT/PAT、EasyIP</h5><ul><li><p>NAPT:</p><ul><li><p>简述：实现端口映射，不仅仅对IP进行转换，还对IP包中的TCP和UDP的Port进行转换。</p></li><li><p>详述： 由于 NAT 实现是私有 IP 和 NAT 的公共 IP 之间的转换，那么，私有网中同时与公共网进行通信的主机数量就受到 NAT 的公共 IP 地址数量的限制。为了克服这种限制，NAT 被进一步扩展到在进行 IP 地址转换的同时进行 Port 的转换，这就是网络地址端口转换 NAPT（Network Address Port Translation）技术。</p></li></ul></li><li><p>Easy IP:</p><ul><li>NAPT 需要知道被分配的IP是多少</li><li>Easy IP 不需要知道被分配的IP是多少，只需要知道路由器IP，从路由器接口出去</li></ul></li></ul><h3 id="三、-交换"><a href="#三、-交换" class="headerlink" title="三、 交换"></a>三、 交换</h3><h4 id="3-1-交换机"><a href="#3-1-交换机" class="headerlink" title="3.1 交换机"></a>3.1 交换机</h4><h5 id="3-1-1-基本工作原理：MAC地址表"><a href="#3-1-1-基本工作原理：MAC地址表" class="headerlink" title="3.1.1 基本工作原理：MAC地址表"></a>3.1.1 基本工作原理：MAC地址表</h5><ul><li>工作位置：交换机工作在二层（数据链路层），也有三层交换机（具有路由功能的交换机）</li><li>主要功能：<ul><li>学习：以太网交换机了解每一端口相连设备的MAC地址，并将地址同相应的端口映射起来存放在交换机缓存中的MAC地址表中.</li><li>转发/过滤：当一个数据帧的目的地址在MAC地址表中有映射时，它被转发到连接目的节点的端口而不是所有端口（如该数据帧为广播/组播帧则转发至所有端口)</li><li>消除回路： 当交换机包括一个冗余回路时，以太网交换机通过生成树协议避免回路的产生，同时允许存在后备路径。</li></ul></li></ul><h5 id="3-1-2-交换机接口类型（链路类型）"><a href="#3-1-2-交换机接口类型（链路类型）" class="headerlink" title="3.1.2 交换机接口类型（链路类型）"></a>3.1.2 交换机接口类型（链路类型）</h5><ul><li>Access：只属于一个VLAN，一般用于连接计算机端口。</li><li>Trunk：允许多个vlan通过，可以接收和发送多个vlan的报文，一般用于交换机之间的端口。</li><li>hybrid：允许多个vlan通过，可以接受和发送多个vlan的报文，可以用于交换机之间连接，也可以用于连接用户计算机。</li></ul><h4 id="3-2-VLAN"><a href="#3-2-VLAN" class="headerlink" title="3.2 VLAN"></a>3.2 VLAN</h4><ul><li><a href="http://www.023wg.com/message/message/cd_feature_eth_vlan.html">帧格式</a></li></ul><h5 id="3-2-1-接口数据处理：Access、trunk、hybrid"><a href="#3-2-1-接口数据处理：Access、trunk、hybrid" class="headerlink" title="3.2.1 接口数据处理：Access、trunk、hybrid"></a>3.2.1 接口数据处理：Access、trunk、hybrid</h5><ul><li>Access：<ul><li>收报文<ul><li>有Vlan：丢弃</li><li>无Vlan：打上端口的PVID，进行转发</li></ul></li><li>发报文<ul><li>将报文的Vlan信息剥离，再发送</li></ul></li></ul></li><li>Trunk：<ul><li>收报文：<ul><li>有Vlan：判断该trunk端口是否允许该vlan的数据进入，若可以则转发，否则丢弃</li><li>无Vlan：打上端口的PVID，进行转发</li></ul></li><li>发报文：<ul><li>比较端口的PVID和将要发送报文的vlan信息，若两者相等则剥离vlan信息，再发送，若不相等则直接发送</li></ul></li></ul></li><li>hybrid：<ul><li>收报文：<ul><li>有Vlan：判断该hybrid端口是否允许该vlan数据的进入，若可以则转发，否则丢弃（此时端口上的untag配置是不用考虑的，untag配置只对发送报文时起作用）</li><li>无Vlan：打上端口的PVID，进行转发</li></ul></li><li>发报文：<ul><li>untag：剥离vlan信息，再发送</li><li>tag：直接发送</li></ul></li></ul></li></ul><h4 id="3-3-STP"><a href="#3-3-STP" class="headerlink" title="3.3 STP"></a>3.3 STP</h4><ul><li><p>简述：生成树协议，作用是防止网桥网络中的冗余链路形成环路工作。</p></li><li><p>生成树算法过程：</p><ul><li>选择根网桥<ul><li>选取依据：<ul><li>网桥ID=网桥优先级+网桥MAC地址</li><li>网桥ID小的优先，优先级相同时，比较MAC地址</li></ul></li></ul></li><li>选择根端口（每个非根网桥都要选举一个）<ul><li>选取依据：<ul><li>到跟网桥路径开销最低</li><li>最低的发送方网桥ID</li><li>最低的端口ID</li></ul></li></ul></li><li>选择指定端口（每条链路需要选举一个）<ul><li>根桥上的所有端口都是指定端口</li><li>选取依据：<ul><li>根路径开销较低</li><li>所在的交换机网桥ID值最小</li><li>端口号最小</li></ul></li></ul></li><li>阻塞非跟端口、非指定端口</li></ul></li><li><p>开销</p><ul><li>链路速度：10Gbps            开销：2</li><li>链路速度：1Gbps              开销：4</li><li>链路速度：100Mbps        开销：19</li><li>链路速度：10Mbps           开销：100</li></ul></li><li><p>端口状态</p><ul><li>Blocking（阻塞状态）：此时，二层端口为非指定端口，也不会参与数据帧的转发。该端口通过接收BPDU来判断根交换机的位置和根ID，以及在STP拓扑收敛结束之后，各交换机端口应该处于什么状态，在默认情况下，端口会在这种状态下停留20秒钟时间。</li><li>Listening（侦听状态）：生成树此时已经根据交换机所接收到的BPDU而判断出了这个端口应该参与数据帧的转发。于是交换机端口就将不再满足于接收BPDU，而同时也开始发送自己的BPDU，并以此通告邻接的交换机该端口会在活动拓扑中参与转发数据帧的工作。在默认情况下，该端口会在这种状态下停留15秒钟的时间。</li><li>Learning(学习状态)：这个二层端口准备参与数据帧的转发，并开始填写MAC表。在默认情况下，端口会在这种状态下停留15秒钟时间。</li><li>Forwarding（转发状态）：这个二层端口已经成为了活动拓扑的一个组成部分，它会转发数据帧，并同时收发BPDU。</li><li>Disabled（禁用状态）：这个二层端口不会参与生成树，也不会转发数据帧。</li></ul></li><li><table><thead><tr><th>状态</th><th align="center">功能</th></tr></thead><tbody><tr><td>禁用</td><td align="center">不收发任何报文</td></tr><tr><td>阻塞</td><td align="center">不接收或转发数据，接收但不发送BPDU，不进行地址学习</td></tr><tr><td>监听</td><td align="center">不接收或转发数据，接收并发送BPDU，不进行地址学习</td></tr><tr><td>学习</td><td align="center">不接收或转发数据，接收并发送BPDU，开始地址学习</td></tr><tr><td>转发</td><td align="center">接收或转发数据，接收并发送BPDU，开始地址学习</td></tr></tbody></table></li><li><p>BPDU：运行STP的交换机之间交换的消息帧。BPDU内包含了STP所需的路径和优先级信息，STP便利用这些信息来确定根桥以及到根桥的路径。</p></li></ul><h5 id="3-3-1-端口角色、状态转换"><a href="#3-3-1-端口角色、状态转换" class="headerlink" title="3.3.1 端口角色、状态转换"></a>3.3.1 端口角色、状态转换</h5><ul><li>禁用端口<ul><li>位置：存在于非根网桥和根网桥上</li><li>解释：生成树中不起作用的端口</li></ul></li><li>根端口<ul><li>位置：存在于非根网桥上</li><li>解释：非根交换机上距离根交换机最近的端口，根端口会将数据传送给根桥用于传输，是交换机端口去往跟桥的最佳路径。</li></ul></li><li>指定端口<ul><li>位置：存在于非根网桥和根网桥上</li><li>解释：对于根网桥来说，所有端口都为指定端口；对于非根网桥来说，指定端口根据需要与根交换机之间收发数据。</li></ul></li><li>替代端口<ul><li>位置：存在于非根网桥上</li><li>解释：用来提供替代去往根网桥路径的端口，即替换当前根端口，工作在稳定拓扑中为丢弃状态。</li></ul></li><li>备份端口<ul><li>位置：存在于非根网桥上</li><li>解释：充当指定交换机的那个网段提供一条备份链路，工作在稳定拓扑中为丢弃状态。</li></ul></li></ul><h5 id="3-3-2-根桥选举"><a href="#3-3-2-根桥选举" class="headerlink" title="3.3.2 根桥选举"></a>3.3.2 根桥选举</h5><p>见上生成树算法过程</p><h5 id="3-3-2-MSTP"><a href="#3-3-2-MSTP" class="headerlink" title="3.3.2 MSTP"></a>3.3.2 MSTP</h5><h3 id="四、网络优化"><a href="#四、网络优化" class="headerlink" title="四、网络优化"></a>四、网络优化</h3><h4 id="4-1-交换机端口：端口捆绑-链路聚合"><a href="#4-1-交换机端口：端口捆绑-链路聚合" class="headerlink" title="4.1 交换机端口：端口捆绑/链路聚合"></a>4.1 交换机端口：端口捆绑/链路聚合</h4><h4 id="4-2-VRRP"><a href="#4-2-VRRP" class="headerlink" title="4.2 VRRP"></a>4.2 VRRP</h4><h3 id="五、网络工程项目管理"><a href="#五、网络工程项目管理" class="headerlink" title="五、网络工程项目管理"></a>五、网络工程项目管理</h3><h4 id="5-1-网络设计"><a href="#5-1-网络设计" class="headerlink" title="5.1 网络设计"></a>5.1 网络设计</h4><h2 id="第二章、网络原理与协议分析"><a href="#第二章、网络原理与协议分析" class="headerlink" title="第二章、网络原理与协议分析"></a>第二章、网络原理与协议分析</h2><h3 id="一、-嗅探机制"><a href="#一、-嗅探机制" class="headerlink" title="一、 嗅探机制"></a>一、 嗅探机制</h3><h3 id="二、-Wireshark基本操作："><a href="#二、-Wireshark基本操作：" class="headerlink" title="二、 Wireshark基本操作："></a>二、 Wireshark基本操作：</h3><h4 id="2-1-过滤器-Examples：CaptureFilters-The-Wireshark-Wiki"><a href="#2-1-过滤器-Examples：CaptureFilters-The-Wireshark-Wiki" class="headerlink" title="2.1 过滤器 Examples：CaptureFilters - The Wireshark Wiki"></a>2.1 过滤器 Examples：<a href="https://wiki.wireshark.org/CaptureFilters">CaptureFilters - The Wireshark Wiki</a></h4><h4 id="2-2-3-4-3过滤器案例"><a href="#2-2-3-4-3过滤器案例" class="headerlink" title="2.2 3.4.3过滤器案例"></a>2.2 3.4.3过滤器案例</h4><h3 id="三、ARP-RARP"><a href="#三、ARP-RARP" class="headerlink" title="三、ARP/RARP"></a>三、ARP/RARP</h3><h4 id="3-1-工作原理，报文格式"><a href="#3-1-工作原理，报文格式" class="headerlink" title="3.1 工作原理，报文格式"></a>3.1 工作原理，报文格式</h4><h4 id="3-2-免费ARP工作原理"><a href="#3-2-免费ARP工作原理" class="headerlink" title="3.2 免费ARP工作原理"></a>3.2 免费ARP工作原理</h4><h3 id="四、IP"><a href="#四、IP" class="headerlink" title="四、IP"></a>四、IP</h3><h4 id="4-1-报文格式"><a href="#4-1-报文格式" class="headerlink" title="4.1 报文格式"></a>4.1 报文格式</h4><h4 id="4-2-分片原理"><a href="#4-2-分片原理" class="headerlink" title="4.2 分片原理"></a>4.2 分片原理</h4><h3 id="五、ICMP"><a href="#五、ICMP" class="headerlink" title="五、ICMP"></a>五、ICMP</h3><h4 id="5-1-报文结构"><a href="#5-1-报文结构" class="headerlink" title="5.1 报文结构"></a>5.1 报文结构</h4><h4 id="5-2-echo-request-echo-response"><a href="#5-2-echo-request-echo-response" class="headerlink" title="5.2 echo request/echo response"></a>5.2 echo request/echo response</h4><h4 id="5-3-traceroute工作原理"><a href="#5-3-traceroute工作原理" class="headerlink" title="5.3 traceroute工作原理"></a>5.3 traceroute工作原理</h4><h3 id="六、-TCP"><a href="#六、-TCP" class="headerlink" title="六、 TCP"></a>六、 TCP</h3><h4 id="6-1-报文结构"><a href="#6-1-报文结构" class="headerlink" title="6.1 报文结构"></a>6.1 报文结构</h4><h4 id="6-2-三次握手原理"><a href="#6-2-三次握手原理" class="headerlink" title="6.2 三次握手原理"></a>6.2 三次握手原理</h4><h4 id="6-3-四次挥手原理"><a href="#6-3-四次挥手原理" class="headerlink" title="6.3 四次挥手原理"></a>6.3 四次挥手原理</h4><h4 id="6-4-窗口与window-scale"><a href="#6-4-窗口与window-scale" class="headerlink" title="6.4 窗口与window scale"></a>6.4 窗口与window scale</h4><h3 id="七、-DNS"><a href="#七、-DNS" class="headerlink" title="七、 DNS"></a>七、 DNS</h3><h4 id="7-1-常见记录类型"><a href="#7-1-常见记录类型" class="headerlink" title="7.1 常见记录类型"></a>7.1 常见记录类型</h4><h2 id="第三章、-渗透测试"><a href="#第三章、-渗透测试" class="headerlink" title="第三章、 渗透测试"></a>第三章、 渗透测试</h2><h3 id="一、-PETS流程及工作内容"><a href="#一、-PETS流程及工作内容" class="headerlink" title="一、 PETS流程及工作内容"></a>一、 PETS流程及工作内容</h3><h3 id="二、-网安关键词"><a href="#二、-网安关键词" class="headerlink" title="二、 网安关键词"></a>二、 网安关键词</h3><ul><li><p>肉鸡：肉鸡指的就是被黑客成功入侵并取得控制权限的电脑。黑客们可以随意的控制肉鸡，就像在使用自己的电脑一样，很形象的比喻，就像是养的肉鸡，任黑客宰杀和利用。关键的是，在成为肉鸡后，只要黑客不对电脑进行破坏，使用者很难发现，有可能就是被养在哪里，随时都可能被用。</p></li><li><p>后门：从字面意思就可以理解，前门有锁进不去，从后门悄悄潜入。这里指的是可以绕过安全软件等的防护，从一条比较隐蔽的通道获取对电脑的控制权限的通道，就叫做后门。黑客在入侵一台电脑成功后，很可能会再留下一个后门，将其发展成为肉鸡。</p></li><li><p>Shell：Shell指的是一种命令执行环境，比如，Windows下的cmd就是其Shell执行环境</p></li><li><p>WebShell：WebShell就是以.asp、.php、.jsp或者.cgi等网页文件形式存在的一种命令执行环境，也可以将其称作是一种网页后门。</p></li><li><p>弱口令：这个相比都很熟悉了，注册账号的时候，我们输入123456，abcd等，网站就会在后面显示密码等级弱。这种非常简单的密码就叫做弱口令，弱口令通常很容易被黑客破解，用最低端的暴力算号器都能试出来。</p></li><li><p>扫描：黑客会用一些工具来进行扫描，但用途则稍有不同，大多扫描的是IP、端口、漏洞等一切有利于入侵的信息。大概原理就是通过向目标计算机发送一些特定的请求，根据返回的信息来获取信息。</p></li><li><p>嗅探：嗅探指的是对局域网中流经的数据包进行截取及分析，从中获取有效信息，早期用HUB组建的局域网中属共享原理，数据是通过MAC地址来分辨目的地的，改变网卡为混杂模式，则就可以接受并分析数据包了。而现在大多用交换机组建局域网，交换机原理高级，数据直接发送至目标主机的网卡端口，所以大多采用ARP欺骗，修改MAC地址欺骗等方式来嗅探。</p></li><li><p>木马：木马指的是伪装成正常程序的的程序，它可以捆绑在任何正常的软件中，看起来让你感兴趣去打开，当运行后回在你的电脑上安装客户端或者执行特定的任务。之后黑客就能轻松地利用正在运行的木马程序来取得你的电脑控制权。</p></li><li><p>网页木马：网页木马指表面上伪装成普通的网页文件或是将恶意的代码直接插入到正常的网页文件中，当有人访问时，网页木马就会利用对方系统或者浏览器的漏洞自动将配置好木马的服务端下载到访问者的计算机上来自动执行。</p></li><li><p>挂马：挂马指在他人的网站文件中放入网页木马或是将代码潜入到对方正常的网页文件里，以使浏览者中马。</p></li><li><p>病毒：病毒大家都不陌生，指的就是具有破坏性的程序或者代码，电脑只要感染病毒后，即刻就会收到相应的破坏，病毒具有传染性、可不断复制，直接对电脑系统或者文件造成损坏。木马实际上也可以算病毒的一种。</p></li><li><p>蠕虫：蠕虫是指能自我复制和广泛传播，以占用系统和网络资源为主要目的的恶意程<br>序。按照传播途径，蠕虫可进一步分为邮件蠕虫、即时消息蠕虫、U盘蠕虫、漏洞<br>利用蠕虫和其他蠕虫5类。</p></li><li><p>加壳：加壳指给捆绑了木马的程序传一层马甲，进行压缩及代码加密，使得杀毒软件无法真实辨别出其恶意属性，特意绕过安全软件进入到电脑已达到目的。加壳也用于开发者对软件代码的保护等。脱壳指加壳的反向操作——去掉程序的壳。</p></li><li><p>花指令：花指令是指几句汇编指令，让汇编语句进行一些跳转，使得杀毒软件不能正常地判断病毒文件的构造。通俗地说，就是杀毒软件是从头到脚按顺序来查找病毒，如果把病毒的头和脚颠倒位置，杀毒软件就找不到病毒了。</p></li><li><p>免杀：免杀是指通过加壳、加密、修改特征码、加花指令等技术来修改程序，使其逃过杀毒软件的查杀。</p></li><li><p>漏洞：人人都知道，又是一个很形象的比喻，漏指一个系统或软件存在的弱点或缺陷，来自应用设计时的缺陷或编码时产生的错误，而这些错误则会被黑客利用。现在我们使用的系统及软件，经常都会更新补丁及程序，目的就是为了修复发现的漏洞增加相应的防护及功能，确保更加安全。</p></li><li><p>溢出：确切地讲，溢出应该是”缓冲区溢出”。简单的解释就是程序对接收的输入数据没有执行有效的检测而导致错误，后果可能是造成程序崩溃或者是执行攻击者的命令。溢出大致可以分为两类：堆溢出和栈溢出。</p></li><li><p>注入：由于程序员的水平参差不齐，相当大一部分应用程序存在安全隐患，用户可以提交一段数据库查询代码，根据程序返回的结果获得某些想要的数据，这就是SQL注入。</p></li><li><p>注入点：注入点是可以实行注入的地方，通常是一个访问数据库的连接。根据注入点数据库运行账号的权限的不同，所得到的权限也不同。</p></li><li><p>内网：通俗地讲，内网就是局域网。比如网吧、校园网、公司内部网等都属于此类。如果计算机的IP地址在以下三个范围之内，就说明该计算机是处于内网之中的：</p><ul><li>10.0.0.0~10.255.255.255</li><li>172.16.0.0~172.31.255.255</li><li>192.168.0.0~192.168.255.255</li></ul></li><li><p>外网：外网是相对于内网而言，其中的计算机直接连入互联网，从而与互联网上的任意一台计算机互相访问。</p></li><li><p>勒索软件：勒索软件是黑客用来劫持用户资产或资源并以此为条件向用户勒索钱财的一种 恶意软件。勒索软件通常会将用户数据或用户设备进行加密操作或更改配置，使之 不可用，然后向用户发出勒索通知，要求用户支付费用以获得解密密码或者获得恢 复系统正常运行的方法。</p></li><li><p>拒绝服务攻击：拒绝服务攻击是向某一目标信息系统发送密集的攻击包，或执行特定攻击操 作，以期致使目标系统停止提供服务。</p></li><li><p>域名劫持：域名劫持是通过拦截域名解析请求或篡改域名服务器上的数据，使得用户在访 问相关域名时返回虚假IP地址或使用户的请求失败。</p></li><li><p>路由劫持：路由劫持是通过欺骗方式更改路由信息，导致用户无法访问正确的目标，或导 致用户的访问流量绕行黑客设定的路径，达到不正当的目的。</p></li><li><p>网页篡改：网页篡改是恶意破坏或更改网页内容，使网站无法正常工作或出现黑客插入的 非正常网页内容。</p></li><li><p>网站后门：网站后门事件是指黑客在网站的特定目录中上传远程控制页面，从而能够通过 该页面秘密远程控制网站服务器的攻击形式。</p></li></ul><h3 id="三、-主动信息收集"><a href="#三、-主动信息收集" class="headerlink" title="三、 主动信息收集"></a>三、 主动信息收集</h3><h4 id="3-1-二层发现：arping、netdiscover"><a href="#3-1-二层发现：arping、netdiscover" class="headerlink" title="3.1 二层发现：arping、netdiscover"></a>3.1 二层发现：arping、netdiscover</h4><ul><li>arping：Arping 是一个 ARP 级别的 ping 工具，可用来直接 ping MAC 地址，以及找出那些 ip 地址被哪些电脑所使用了。</li><li>netdiscover：和arping差不多</li></ul><h4 id="3-2-三层发现：fping、hping、nping"><a href="#3-2-三层发现：fping、hping、nping" class="headerlink" title="3.2 三层发现：fping、hping、nping"></a>3.2 三层发现：fping、hping、nping</h4><ul><li>fping：Fping程序类似于ping（ping是通过ICMP（网络控制信息协议InternetControl Message Protocol）协议回复请求以检测主机是否存在）。Fping与ping不同的地方在于，fping可以在命令行中指定要ping的主机数量范围，也可以指定含有要ping的主机列表文件。</li><li>hping：典型ping程序使用的是ICMP回显请求来测试，而HPING可以使用任何IP报文，包括ICMP、TCP、UDP、RAWSOCKET。</li><li>nping：Nping 是一个用于网络数据包生成、响应分析和响应时间测量的开源工具。Nping 可以为各种协议生成网络数据包，允许用户完全控制协议头。虽然 Nping 可以用作简单ping来检测活动主机的实用程序，但它也可以用作网络堆栈压力测试、ARP中毒、拒绝服务攻击、路由跟踪和其他目的的原始数据包生成器。</li></ul><h4 id="3-3-四层发现："><a href="#3-3-四层发现：" class="headerlink" title="3.3 四层发现："></a>3.3 四层发现：</h4><h5 id="3-3-1-TCP、UDP发现原理"><a href="#3-3-1-TCP、UDP发现原理" class="headerlink" title="3.3.1 TCP、UDP发现原理"></a>3.3.1 TCP、UDP发现原理</h5><h5 id="3-3-2-隐蔽扫描"><a href="#3-3-2-隐蔽扫描" class="headerlink" title="3.3.2 隐蔽扫描"></a>3.3.2 隐蔽扫描</h5><h5 id="3-3-3-僵尸扫描"><a href="#3-3-3-僵尸扫描" class="headerlink" title="3.3.3 僵尸扫描"></a>3.3.3 僵尸扫描</h5><h4 id="3-4-服务扫描"><a href="#3-4-服务扫描" class="headerlink" title="3.4 服务扫描"></a>3.4 服务扫描</h4><h5 id="3-4-1-OS系统识别原理"><a href="#3-4-1-OS系统识别原理" class="headerlink" title="3.4.1 OS系统识别原理"></a>3.4.1 OS系统识别原理</h5><h5 id="3-4-2-SMB扫描技术"><a href="#3-4-2-SMB扫描技术" class="headerlink" title="3.4.2 SMB扫描技术"></a>3.4.2 SMB扫描技术</h5><h4 id="3-5-nmap基本应用"><a href="#3-5-nmap基本应用" class="headerlink" title="3.5 nmap基本应用"></a>3.5 nmap基本应用</h4><h4 id="3-6-漏洞扫描"><a href="#3-6-漏洞扫描" class="headerlink" title="3.6 漏洞扫描"></a>3.6 漏洞扫描</h4><h5 id="3-6-1-关键词：CVSS、CVE、CNNVD、NVD"><a href="#3-6-1-关键词：CVSS、CVE、CNNVD、NVD" class="headerlink" title="3.6.1 关键词：CVSS、CVE、CNNVD、NVD"></a>3.6.1 关键词：CVSS、CVE、CNNVD、NVD</h5><h5 id="3-6-2-漏洞检索"><a href="#3-6-2-漏洞检索" class="headerlink" title="3.6.2 漏洞检索"></a>3.6.2 漏洞检索</h5><ul><li><p>kali漏洞数据库利用</p></li><li><p>MSF插件漏扫：wmap</p></li><li><p>nmap nse脚本库和漏扫命令</p></li></ul><h4 id="3-7-漏洞分析与利用"><a href="#3-7-漏洞分析与利用" class="headerlink" title="3.7 漏洞分析与利用"></a>3.7 漏洞分析与利用</h4><h5 id="3-7-1-辅助模块基本使用"><a href="#3-7-1-辅助模块基本使用" class="headerlink" title="3.7.1 辅助模块基本使用"></a>3.7.1 辅助模块基本使用</h5><h5 id="3-7-2-Exploit模块基本应用"><a href="#3-7-2-Exploit模块基本应用" class="headerlink" title="3.7.2 Exploit模块基本应用"></a>3.7.2 Exploit模块基本应用</h5>]]></content>
      
      
      
        <tags>
            
            <tag> 网络复习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
